Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month)
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv", header = F)
Keeling_Data
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv")
colnames(Keeling_Data)
head(Keeling_Data, 3)
head(Keeling_Data)
tail(Keeling_Data)
head(Keeling_Data,3)
head(Keeling_Data)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2))
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(monthly_mean)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(desc(monthly_mean))
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2), monthly_sd = sd(co2),
monthly_min = min(co2), monthly_max = max(co2),
monthly_se = sd(co2)/sqrt(n()))
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
tya
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(desc(monthly_mean))
Keeling_Data_tbl
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2),
monthly_sd = sd(co2),
monthly_min = min(co2),
monthly_max = max(co2),
monthly_se = sd(co2)/sqrt(n()) )
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
mutate(co2_ppb = co2 * 1e3, co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3, co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line() +
facet_wrap(~ month)
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date1, y=co2_new, color=month)) +
geom_line() +
facet_wrap(~ month)
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line() +
facet_wrap(~ month)
# Add a new column to the original tibble
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
# Notice we use pull() to get a vector from a tibble
Month_CO2 <- Keeling_Data_tbl %>%
pull(co2_new)
Month_CO2
# plot hist
hist(Month_CO2)
# plot hist
hist(Month_CO2)
# plot hist
hist(Month_CO2)
hist(Month_CO2,
xlab = "Monthly CO2 mixing ratios (ppm)",
main = "Histogram of Monthly CO2",
breaks = 20,
col = "blue",
border = "red")
box(lwd=2,col="green")
hist(Month_CO2,
xlab = "Monthly CO2 mixing ratios (ppm)",
main = "Histogram of Monthly CO2",
breaks = 10,
col = "pink",
border = "black")
box(lwd=2,col="white")
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl
boxplot(Month_CO2)
boxplot(Keeling_Data$co2)
boxplot(co2_new ~ month, data=Keeling_Data_tbl)
boxplot(co2_new ~ month, data=Keeling_Data_tbl,
xlab = "Month",
ylab = "CO2 (ppm)",
main = "Monthly CO2",
cex = 2,
col = "orange",
border = "darkgreen")
boxplot(co2_new ~ month, data=Keeling_Data_tbl,
xlab = "Month",
ylab = "CO2 (ppm)",
main = "Monthly CO2",
cex = 10,
col = "orange",
border = "darkgreen")
boxplot(co2_new ~ month, data=Keeling_Data_tbl,
xlab = "Month",
ylab = "CO2 (ppm)",
main = "Monthly CO2",
cex = 0.1,
col = "orange",
border = "darkgreen")
boxplot(co2_new ~ month, data=Keeling_Data_tbl,
xlab = "Month",
ylab = "CO2 (ppm)",
main = "Monthly CO2",
cex = 0.1,
col = "red",
border = "darkgreen")
boxplot(co2_new ~ month, data=Keeling_Data_tbl,
xlab = "Month",
ylab = "CO2 (ppm)",
main = "Monthly CO2",
cex = 0.1,
col = "red",
border = "black")
plot(co2_new ~ year, data=Keeling_Data_tbl)
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 2,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 0.5,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "*",
cex = 0.5,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "*",
cex = 1,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = ".",
cex = 1,
col = "red")
co2_new
Month_CO2
Month_CO2[1]
Month_CO2[0]
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
#
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(year) %>%
summarize(annual_mean = mean(co2))
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(year) %>%
summarize(annual_mean = mean(co2)) %>%
# Make the plot
ggplot(aes(x=year, y=annual_mean)) +
geom_line()
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(year >= 1959) %>%
filter(quality == 1) %>%
group_by(year) %>%
summarize(annual_mean = mean(co2)) %>%
# Make the plot
ggplot(aes(x=year, y=annual_mean)) +
geom_line()
# Section 02
# In-class exercise
Keeling_Data_tbl %>%
filter(year >= 1959 || quality == 1) %>%
group_by(year) %>%
summarize(annual_mean = mean(co2)) %>%
# Make the plot
ggplot(aes(x=year, y=annual_mean)) +
geom_line()
# Section 02
# In-class exercise
Keeling_Data_tbl %>%
filter(year >= 1959 || quality == 1)
# In-class exercise
Keeling_Data_tbl %>%
filter(year >= 1959 ) %>%
filter(quality == 1)
# Section 02
# In-class exercise
Keeling_Data_tbl %>%
filter(year >= 1959 && quality == 1)
# In-class exercise
Keeling_Data_tbl %>%
# Observations since 1959
filter(year >= 1959) %>%
# Only use valid observations
filter(quality == 1) %>%
# Group by year
group_by(year) %>%
# Get annual mean
summarize(annual_mean = mean(co2)) %>%
# Make the plot
ggplot(aes(x=year, y=annual_mean)) +
# Plot as a line
geom_line()
sample(3,seq(1,11))
sample(seq(1,11))
sample(seq(1,11),3)
sample(seq(1,11),3)
?sample()
sample(seq(1,11),3)
sample(seq(1,11),3)
library(moments)
sample(3 seq(1,10))
sample(3, seq(1,10))
sample(3, seq(1,10))
sample(seq(1,10), 3)
sample(seq(1,10), 3)
library(moments)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
mean(sample1)
sd(sample1)
var(sample1)
range(sample1)
skewness(sample1)
# Compute the kurtosis
kurtosis(sample1)
# Make a log-normal
sample2 <- exp(sample1+10)
# Check
hist(sample2)
mean(sample2)
sd(sample2)
var(sample2)
range(sample2)
skewness(sample2)
# Compute the kurtosis
kurtosis(sample2)
ls
# Need `gtools` package
library(gtools)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Obs_all
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)*0.1
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 1
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
Groupings_A
dim(Groupings_A)
dim(Groupings_A)[1]
#---------------------------------------
# Ex. 1
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING student’s scores
length( which(difference >= Obs_difference) )/length(difference)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING student’s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on student’s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
