# Check SST = SSB + SSW
SST -SSB - SSW
# Get F-statistic
MSB      <- SSB/df_B
MSW      <- SSW/df_W
F_ratio  <- MSB/MSW
# Find the p-value
# The pf() function gives the Cumulative Distribution Function (CDF)
# of the F distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here F_ratio).
# Here we that 1-pf to get the probability that the
# variable takes a value higher than the threshold (F_ratio).
# Notice F distribution is defined by two degrees of freedom (df_B and df_W).
P_value  <- 1 - pf(F_ratio, df1=df_B, df2=df_W)
print(P_value)
oneway.test(Cd ~ group, data=Cd_data, var.equal=T)
Cd_data
oneway.test(Cd ~ group, data=Cd_data, var.equal=T)
res_aov <- aov(Cd ~ group, data=Cd_data)
summary(res_aov)
library(ggplot2)
# Make a vector from 0 to 5, with a step of 0.01
x        <- seq(0, 5.0, by=0.01)
# Get the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=2, cex=2,
xlim=c(0, 5.0), ylim=c(0,1.2),
main="PDF of F distributions")
# Get and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- df(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=2, cex=2)
# Get and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- df(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=2, cex=2)
# Get and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- df(x, df1=30, df2=30)
lines(x, density4, col="purple", xlab="", ylab="",
type="l", lwd=2, cex=2)
# Add legends
text(3, 0.90, "F (2,2)",   col="black",  cex=1.5)
text(3, 0.80, "F (2,30)",  col="blue",   cex=1.5)
text(3, 0.70, "F (30,2)",  col="red",    cex=1.5)
text(3, 0.60, "F (30,30)", col="purple", cex=1.5)
# Sub-samples
Control  <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1       <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2       <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3       <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Number of levels
M        <- 4
# The overall sample and its size
Sample   <- c(Control, P1, P2, P3)
# Get sample size and degrees of freedom for each sub-sample
n1       <- length(Control)
df1      <- n1 -1
n2       <- length(P1)
df2      <- n2 -1
n3       <- length(P2)
df3      <- n3 -1
n4       <- length(P3)
df4      <- n4 -1
# The overall sample size
N        <- n1 + n2 + n3 + n4
# Make data frame
Cd_data  <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3))) )
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Degrees of freedoms of variability between groups
df_B     <- M-1
# Degrees of freedoms of variability within groups
df_W     <- N - M
# Compute SST
SST      <- sd(Sample)^2*(N-1)
# Compute SSW
SSW      <- sd(Control)^2*(n1-1) +
sd(P1)^2*(n2-1) +
sd(P2)^2*(n3-1) +
sd(P3)^2*(n4-1)
# Compute SSB
SSB      <- n1*(mean(Control)-mean(Sample))^2 +
n2*(mean(P1)-mean(Sample))^2 +
n3*(mean(P2)-mean(Sample))^2 +
n4*(mean(P3)-mean(Sample))^2
# Check SST = SSB + SSW
SST -SSB - SSW
# Get F-statistic
MSB      <- SSB/df_B
MSW      <- SSW/df_W
F_ratio  <- MSB/MSW
# Find the p-value
# The pf() function gives the Cumulative Distribution Function (CDF)
# of the F distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here F_ratio).
# Here we that 1-pf to get the probability that the
# variable takes a value higher than the threshold (F_ratio).
# Notice F distribution is defined by two degrees of freedom (df_B and df_W).
P_value  <- 1 - pf(F_ratio, df1=df_B, df2=df_W)
print(P_value)
# One-way ANOVA
oneway.test(Cd ~ group, data=Cd_data, var.equal=T)
# One-way ANOVA
res_aov <- aov(Cd ~ group, data=Cd_data)
summary(res_aov)
#--------------------------
# EX. 1
# Sub-samples
City1       <- c(5.11, 5.01, 4.90, 5.14, 4.80, 5.24)
City2       <- c(4.87, 4.18, 4.40, 4.67, 4.89, 4.09)
City3       <- c(5.46, 6.29, 5.57, 5.15, 5.45, 5.30)
# Make data frame
Rain_data  <- data.frame(Acidity = c(City1, City2, City3),
City=c(rep("City 1", length(City1)),
rep("City 2", length(City2)),
rep("City 3", length(City3))))
# Compare boxplots
ggplot(Rain_data, aes(x=City, y=Acidity, fill=City)) +
geom_boxplot() +
labs(title="Rain acidity in different cities",
x="City", y="Acidity") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Acidity ~ City, data=Rain_data)
summary(res_aov)
#--------------------------
# EX. 2
# Sub-samples
Condition1       <- c(19.4, 32.6, 27.0, 32.1, 33.0)
Condition2       <- c(17.7, 24.8, 27.9, 25.2, 24.3)
Condition3       <- c(20.7, 21.0, 20.5, 18.8, 18.6)
Condition4       <- c(17.3, 19.4, 19.1, 16.9, 20.8)
Condition5       <- c(17.0, 19.4, 9.1, 11.9, 15.8)
Condition6       <- c(14.3, 14.4, 11.8, 11.6, 14.2)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition4, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Ratio ~ Condition, data=Decomposition_data)
summary(res_aov)
# One-way ANOVA
res_aov <- aov(Acidity ~ City, data=Rain_data)
summary(res_aov)
#--------------------------
# EX. 2
# Sub-samples
Condition1       <- c(19.4, 32.6, 27.0, 32.1, 33.0)
Condition2       <- c(17.7, 24.8, 27.9, 25.2, 24.3)
Condition3       <- c(20.7, 21.0, 20.5, 18.8, 18.6)
Condition4       <- c(17.3, 19.4, 19.1, 16.9, 20.8)
Condition5       <- c(17.0, 19.4, 9.1, 11.9, 15.8)
Condition6       <- c(14.3, 14.4, 11.8, 11.6, 14.2)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition4, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
library(tidyr)
library(dplyr)
library(ggplot2)
library(randtests)
library(moments)
library(outliers)
library(nortest)
# Sub-samples
Control  <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1       <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2       <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3       <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Make data frame
Cd_data  <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3)) ))
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Perform the one-way ANOVA
res_aov <- aov(Cd ~ group, data=Cd_data)
summary(res_aov)
# Post-hoc test with the Hukey test
TukeyHSD(res_aov)
# Plot the 95% (default) CI of the difference
plot(TukeyHSD(res_aov))
cd_data <- read.csv("cd_data.csv", header=T)
# Read csv
cd_data <- read.csv("cd_data.csv", header=T)
# Change to factor type using tibble
cd_data_tbl <- as_tibble(cd_data) %>%
mutate(Chemical = factor(Chemical, ordered = TRUE)) %>%
mutate(Physical = factor(Physical, ordered = TRUE)) %>%
mutate(Plant    = factor(Plant   , ordered = TRUE))
# Quick check
glimpse(cd_data_tbl)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Chemical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Chemical + Plant, data = cd_data_tbl)
summary(two_way_additive)
TukeyHSD(two_way_additive)
library(tidyr)
library(dplyr)
library(ggplot2)
library(randtests)
library(moments)
library(outliers)
library(nortest)
#-------------------------------------
# EX. 1
# Quick plots
# Boxplot - Physical
ggplot(cd_data_tbl, aes(x = Physical, y = Cd, fill = Physical )) +
geom_boxplot() +
theme_classic()
# Boxplot - Plant
ggplot(cd_data_tbl, aes(x = Plant, y = Cd, fill = Plant)) +
geom_boxplot() +
theme_classic()
# Check independence of the dependent variable
runs.test(cd_data_tbl$Cd)
# Check normality
# Sample size > 30, use the Lilliefors test
lillie.test(cd_data_tbl$Cd)
# Check outliers
# After examining the data, we decide to keep this value
grubbs.test(cd_data_tbl$Cd)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Physical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
TukeyHSD(two_way_additive)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
var.equal = T)
TukeyHSD(two_way_additive)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
var.equal = T)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Physical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
TukeyHSD(two_way_additive)
45821*16
45821+220-8631.8-11966.4+5490-1624.98
45821*16+5490*12
45821+5490
45821+5490+220
45821*16+5490*12+5000*12
45821*16+5490*12+5000*12+45821*4
45821*16+5490*12+5000*12+45821*12*0.2
45821+220-8199.8+5490
45821+220-8199.8
45821-8199.8
45821+220-3284.12
45821+220-8199.8-3284.12
45821+220-8199.8-3284.12+5490
45821*12+5490*12
45821*12+5490*12+45821*4
45821*12+5490*12+45821*4+5000*12
45821*12+5490*12+45821*4+5000*12+45821*12*0.2
45821*12*0.2
45821*12+5490*12+45821*4+5000*12+45821*12*0.2+5239*12
45821*12+5490*12+45821*4+5000*12
45821*12+5490*12+45821*4
2200.08+673.32+87.32+5239.08
45821*12+5490*12+45821*4+8000*12
45821*12+5490*12+45821*4
45821*12+5490*12+45821*4+5000*12
45821*12+5490*12+45821*4+5000*12+45821*12*0.2
45821*12+5490*12+45821*4+5000*12
45821*12
45821*12/52000
45821*12/520000
45821*12/520000*550000
45821*12/520000*550000/12
48464*12+5490*12+48464*4+5000*12+48464*12*0.2
48464*12+5490*12+48464*4+5000*12
100*1000
100*1000/10000
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
par(mfrow=c(1,1))
# Compute covariance
cov(x,y)
cov(2*x,2*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
runs.test(y)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# Check outliers
grubbs.test(x)
grubbs.test(y)
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
#-----------------------------
# EX 1
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
plot(x, y)
# Compute Pearson Correlation Coefficient with the outlier
cor(x, y)
# Uncomment the following lines to remove the outlier
x <- x[- 11]
y <- y[- 11]
# Compute Pearson Correlation Coefficient without the outlier
cor(x, y)
# EX 1
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
plot(x, y)
# Compute Pearson Correlation Coefficient with the outlier
cor(x, y)
# Uncomment the following lines to remove the outlier
x <- x[- 11]
y <- y[- 11]
# Compute Pearson Correlation Coefficient without the outlier
cor(x, y)
# EX 2
# Make up samples
x1 <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y1 <- 2*x1+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
x2 <- x1-5.0
y2 <- -1.0*y1
x <- c(x1,x2)
y <- c(y1,y2)
plot(x,y,col="black")
points(x1,y1,col="red",cex=2)
points(x2,y2,col="blue",cex=2)
# Compute the Pearson correlation coefficient between x1 and y1.
cor(x1, y1)
# Compute the Pearson correlation coefficient between x2 and y2.
cor(x2, y2)
# Compute the Pearson correlation coefficient between x and y
cor(x, y)
# Make up samples
x1 <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y1 <- 2*x1+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
x2 <- x1-5.0
y2 <- -1.0*y1
x <- c(x1,x2)
y <- c(y1,y2)
plot(x,y,col="black")
plot(x,y,col="black")
points(x1,y1,col="red",cex=2)
points(x2,y2,col="blue",cex=2)
# Compute the Pearson correlation coefficient between x1 and y1.
cor(x1, y1)
# Compute the Pearson correlation coefficient between x2 and y2.
cor(x2, y2)
# Compute the Pearson correlation coefficient between x and y
cor(x, y)
# Observations
Soil_conc      <- c(10, 50, 20, 30, 80, 60, 70, 40)
Uptaken_amount <- c(0.18, 1.05, 0.50, 0.61, 1.58, 1.10, 1.36, 0.77)
# Plot the scatter plot
plot(Soil_conc,Uptaken_amount)
# Compute the Pearson correlation coefficient
r              <- cor(Soil_conc, Uptaken_amount)
print(r)
# Get estimator of beta1 and beta0 manually
Beta1_hat      <- cov(Soil_conc, Uptaken_amount)/sd(Soil_conc)^2
Beta0_hat      <- mean(Uptaken_amount) - Beta1_hat*mean(Soil_conc)
Beta1_hat
Beta0_hat
Beta0_hat
Beta1_hat
# Predictions based on the linear model
Prediction     <- Beta0_hat + Soil_conc*Beta1_hat
Prediction
# Variance analysis
SST            <- sum( (Uptaken_amount - mean(Uptaken_amount))^2 )
SSR            <- sum( (Prediction - mean(Uptaken_amount))^2   )
SSE            <- sum( (Uptaken_amount- Prediction)^2 )
# Check SST = SSR + SSE
SST - SSR - SSE
# Compute R2
R2             <- SSR/SST
# Check R2 = r2
print(R2)
# Compute R2
R2             <- SSR/SST
# Check R2 = r2
print(R2)
r^2
# Fit a simple linear regression model between
# dependent variable (Uptaken_amount) and
# independent variable (Soil_conc)
reg            <- lm( Uptaken_amount ~ Soil_conc )
# Print details of the linear model
summary(reg)
# Data
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30, 1.00,
3.20, 0.80, 2.20, 3.20, 2.10)
UV <- c(0.144, 0.152, 0.113, 0.025, 0.227, 0.149,
0.014, 0.158, 0.042, 0.154, 0.173, 0.095)
# Fit a simple linear regression model between
# dependent variable (Uptaken_amount) and
# independent variable (Soil_conc)
reg            <- lm( UV ~ TOC )
# Print details of the linear model
summary(reg)
plot(TOC, UV)
sample(seq(1,12),1)
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30, 1.00,
3.20, 0.80, 2.20, 3.20, 2.10)
UV <- c(0.144, 0.152, 0.113, 0.025, 0.227, 0.149,
0.014, 0.158, 0.042, 0.154, 0.173, 0.095)
plot(TOC, UV)
reg <- lm( UV ~ TOC)
summary(reg)
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
