1 + 1
1
2 * 2
(1 + 2) * 2
x <- all.equal(1, 1+1e-5)
x
print(x)
if(x){print(1)}
installed.packages(dplyr)
installed.packages(tidyr)
# Define the function FindTop()
FindTop        <- function(N){
MoviePage  <- readLines('https://movie.douban.com/top250', encoding='UTF-8')
Pattarn    <- '<span class=\"title\">&nbsp;/&nbsp;([^<]*)</span>'
Lines      <- grep(Pattarn, MoviePage, value=TRUE)
Lines      <- sub(Pattarn,  '\\1', Lines )
Names      <- sub('^ *', '', Lines)
Names      <- sub('&#39;', "'", Names)
print(Names[1:N])
}
# Call the function with arguement 5 and 10
FindTop(5)
FindTop(10)
FindTop(25)
which(1==1)
which(1==1 && 2==2)
which(x==1 && x==2)
x <- seq(1,10,1)
which(x==1 && x==2)
x==1
library(ggplot2)
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from Mar.
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
str(global_cases_ts)
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
forecast_15days
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
COVID_tbl2
tail(COVID_tbl2)
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
(500064-462259)/462259
(500064-462259)/462259*100
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 15
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# 1st day
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
tail(COVID_tbl2)
# Nov. 09:
# Predicted value: 500,064 (455,177, 549,378)
# Real value: 462,259
# Relative bias: 8.2%
model
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
13*13/60
2*24*3600*3/1000
2*24*3600*1/1000
43333*0.02
43333*0.02*2*1.2
43333*0.02*(1+2*1.2)
43333*1*(1+2*1.2)
43333*(1+2*1.2)
43333*0.5*(1+2*1.2)
43333*0.55*(1+2*1.2)
43333*1.01*0.5*(1+2*1.2)
43333*1.8
43333*1.8*1.01
43333*1.2*1.01
43333*1.01
52*1.01/12*1.8
52*1.01/12*1.8*10000
52*1.01/12*3*10000
436197.11+39600.30+118381.3
43,767*12
43767*12
13*13/60
15*13/60
14*13/60
205/375*700
205/375*700+349/750*300
205/375*700+399/750*300
205/375*700+499/750*300
205/375*700+599/750*300
205/375*700+550/750*300
255/375*700+399/750*300
245/375*700+399/750*300
235/375*700+399/750*300
240/375*700+399/750*300
700*375
300/750
700/375
(700/375/(300/750))
375*0.6
375*0.7
205/375*700+550/750*300
205/375*700+540/750*300
205/375*700+545/750*300
205/375*700+350/750*300
235/375*700+350/750*300
245/375*700+350/750*300
250/375*700+350/750*300
245/375*700+350/750*300
250/375*700+350/750*300
250/375*700+360/750*300
240/375*700+360/750*300
245/375*700+360/750*300
250/375*700+360/750*300
250/375*700+350/750*300
250/375*700+350/750*300
7665*12
7665*13
5509+489
setwd("D://ese335")
rmarkdown::render_site()
install.packages("moments")
x <- rnorm(100,0,1)
x
skewness(x)
library(moments)
skewness(x)
skewness(x+1)
kurtosis(x)
sample(seq(1,18),3)
setwd("D://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
sample(seq(1,19,by=1),4)
sample(seq(1,19,by=1),3)
sample(seq(1,19,by=1),3)
sample(seq(1,19,by=1),3)
x <- rnorm(n = 100, mean = 0, sd = 1)
x
mean(x)
sd(x)
hist(x)
library(moments)
skewness(x)
y <- exp(x+1)
hist(y)
skewness(y)
kurtosis(sample2)
## [1] 43.74294
kurtosis(x)
z <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(z)
skewness(z)
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 1000
Sample_mean <- c()
for(i in 1:Simulations){
# Sample from a distribution
average <- mean(runif(Samle_size, min = 0, max = 10))
Sample_mean <- c(Sample_mean, average)
}
hist(Sample_mean)
skewness(Sample_mean)
sd(Sample_mean)
Simulations <- 10000
Samle_size  <- 1000
Sample_mean <- c()
# We draw samples form a unifrom distribution
sample <- runif(Samle_size, min = 0, max = 10)
for(i in 1:Simulations){
# Sample from a distribution
sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
setwd("D://ese335")
rmarkdown::render_site()
sample1 <- c( rnorm(1000,0.8,0.2), rnorm(100,0,1) )
hist(sample1)
skewness(sample1)
x1 <- runif(1000)
x1
x1 <- runif(1000)
x2 <- c()
i <- 0
while( i <= 1000){
t <- mean( sample(x1,5)  )
x2 <- c(x2, t)
i <- i + 1
}
hist(x2)
skewness(x2)
x1 <- runif(1000)
x2 <- array(0, 1000)
for( i in 1:1000){
x2[i]  <- mean( sample(x1,20)  )
}
hist(x2)
skewness(x2)
x1 <- runif(1000)
x2 <- array(0, 1000)
for( i in 1:1000){
x2[i]  <- mean( sample(x1,20)  )
for( i in 1:1000){
x2[i]  <- mean( sample(x1,20)  )
}
for( i in 1:1000){
x2[i]  <- mean( sample(x1,20)  )
}
for( i in 1:1000){
x2[i]  <- mean( sample(x1,20)  )
ls
310/400*100*0.5+8+75*0.4
310/400*100*0.5+8+76*0.4
setwd("D://ese335")
rmarkdown::render_site()
46*0.3
46*0.5
