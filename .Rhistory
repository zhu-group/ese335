# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
mean(sample1)
sd(sample1)
median(sample1)
range(sample1)
libary(moments)
library(moments)
skewness(sample1)
kurtosis(sample1)
sample2 <- exp(sample1)
hist(sample2)
skewness(sample2)
kurtosis(sample2)
z <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(z)
median(sample4)
sample4 <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(sample4)
mean(sample4)
median(sample4)
sd(sample4)
skewness(sample4)
kurtosis(sample4)
# Set up
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(Sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
sample4 <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(sample4)
mean(sample4)
median(sample4)
sd(sample4)
skewness(sample4) # less than 0
kurtosis(sample4) # larger than 3
# Set up
Simulations <- 100
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)   # should be very close to 5.0
# Set up
Simulations <- 1000
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)   # should be very close to 5.0
# Set up
Simulations <- 10000
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)   # should be very close to 5.0
# Set up
Simulations <- 100
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Set up
Simulations <- 1000
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Set up
Simulations <- 10000
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Set up
Simulations <- 100
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)   # should be very close to 5.0
# Set up
Simulations <- 1000
Samle_size  <- 10
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from an uniform distribution with a mean of 5.0
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample mean
average <- mean(Sample)
# Store the sample means
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample means
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)   # should be very close to 5.0
1380/350
1380/350
350*3
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
Obs_all
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=2)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=1)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=3)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=3)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=3)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=2)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(0.1, 0.2, 0.3)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(0.1, 0.2, 0.3)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 1
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING studentâ€™s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on studentâ€™s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING studentâ€™s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on studentâ€™s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING studentâ€™s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on studentâ€™s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
install.packages("nortest")
install.packages("geoR")
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
