# Use name and population as the key information
namevar = ~ NAME, valuevar = ~ Pop,
# Pop up information
popup =  paste0(China_map_pop2$NAME, ": ", China_map_pop2$AREA),
# Colors
palette = "Reds",
# Add legend
legendTitle = "Population")
# Read the tiff file
Wind_Nov <- raster("D://wc2.1_10m_wind_11.tif")
# Look at the raster attributes
Wind_Nov
# Quick plot using plot()
plot(Wind_Nov, main="Wind speed in Nov.")
# Set color
col <- terrain.colors(30)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
terrain.colors(30)
# Set color
col <- terrain.colors(64)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
col <- terrain.colors(100)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
col <- terrain.colors(30)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
# Add contour lines
contour(Wind_Nov, add=T, col="red")
# Convert the raster to a date.frame
Wind_Nov_df <- as.data.frame(Wind_Nov, xy = TRUE)
# Check the data structure
str(Wind_Nov_df)
# Making plot
ggplot() +
geom_raster(data = Wind_Nov_df,
aes(x = x, y = y, fill = wc2.1_10m_wind_11)) +
# Change labels
labs(x="Latitude", y="Longitude") +
# Change theme
theme_bw() +
coord_equal() +
# Change legend
scale_fill_gradient( "Wind speed (m/s)", limits=c(0,20),
low = "white",
high = "red",
n.breaks = 10,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill") +
# Adjust the theme
theme(axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16, angle=90),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.key = element_blank()
) +
# Add a title
ggtitle("Wind Speed in Nov.")
?scale_fill_gradient
# Define the crop extent
Crop_box <- c(100,125,15,30)
# Crop the raster
Wind_Nov_crop <- crop(Wind_Nov, Crop_box)
# Plot cropped DEM
plot(Wind_Nov_crop, main="Wind speed in Nov.")
# Site information
Site_name <- c("SUSTech", "Longhua", "Xichong", "Baoan", "Kuichong")
Site_lon  <- c(114.06667, 114.02200, 114.56111, 113.89606, 114.42824)
Site_lat  <- c(22.61667, 22.72882, 22.48077, 22.53965, 22.63427)
Site_type <- c("Urban", "Urban", "Background", "Urban", "Rural")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
Site_data
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
Mapbox
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="terrain-background")
# Site information
Site_name <- c("SUSTech", "Longhua", "Xichong", "Baoan", "Kuichong")
Site_lon  <- c(114.06667, 114.02200, 114.56111, 113.89606, 114.42824)
Site_lat  <- c(22.61667, 22.72882, 22.48077, 22.53965, 22.63427)
Site_type <- c("Urban", "Urban", "Background", "Urban", "Rural")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
# Get the lat and lon range
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="terrain-background")
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="stamen")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=15, maptype="stamen")
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=12, maptype="stamen")
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="stamen")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Read the data
Mangkhut_data       <- read.table("D://Mangkhut.txt")
# Get path and max wind speed
Mangkhut_lat        <- Mangkhut_data$V4*0.1
Mangkhut_lon        <- Mangkhut_data$V5*0.1
Mangkhut_pressure   <- Mangkhut_data$V6
Mangkhut_max_speed  <- Mangkhut_data$V7*0.514
Mangkhut_data
# Get path and max wind speed
Mangkhut_lat        <- Mangkhut_data$V4*0.1
Mangkhut_lon        <- Mangkhut_data$V5*0.1
Mangkhut_pressure   <- Mangkhut_data$V6
Mangkhut_max_speed  <- Mangkhut_data$V7*0.514
# Make a data frame for ggplot
Mangkhut_data_new <- data.frame(lat=Mangkhut_lat,lon=Mangkhut_lon,
pressure=Mangkhut_pressure, speed=Mangkhut_max_speed)
Mangkhut_data_new
# Get the domain
Domain            <- make_bbox(lon = Mangkhut_data_new$lon,
lat = Mangkhut_data_new$lat, f = .1)
# Get the base map
Base_map          <- get_map(location=Domain, zoom=5,
maptype="terrain-background")
# Get the base map
Base_map          <- get_map(location=Domain, zoom=5,
maptype="stamen")
# Plot base map
Map1              <- ggmap(Base_map)
# Plot the path
Map1 +
# Plot the track
geom_path(data = Mangkhut_data_new,
aes(color=speed), size=1.5,
lineend = "round") +
# Set the color
scale_colour_gradient("Max Wind Speed (m/s)", low = "white", high = "red",
breaks = seq(10, 60, by = 10)) +
# Change labels
labs(x="Latitude", y="Longitude", title="Typhoon Mangkhut Track") + # label the axes
theme_bw()
7000*1.5*12
8000*1.5*12
680*0.3
x <- seq(0,10,0.001)
y <- exp(x)-x
g <- x-log(x)
plot(x,y,type="l")
plot(x,g,type="l")
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
a <- 1
plot(x,y,type="l")
lines(x,g,type="l")
a <- 1
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l")
a <- 1
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
x
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
x
y
x
length(x)
length(y)
exp(x)
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- e
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 2
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- -1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- exp(1)
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,10,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
45078/43767
45078*1.03
45078*1.03*12
52/12
38*2
6000*1.5
6000*1.5*12
7000*1.5*12
7500*1.5*12
8000*1.5*12
97.5*365
0.25*365
0.025*365
0.975*365
24*7/60
35*0.72
35*0.72
28.7/3
30*0.72
78*25
78*35
78*40
78*43
x = 1
1 + 1
1 + 2
1/2
1 -2
1 - 1
1    -   1
1-1
1 + 2 + 3
10 ^ 2
100 ^ 0.5
1e+6
1e+6^2
1e+6^3
1e+6^4
sin(1)
sin(3.14)
sin(pi)
cos(pi)
log(10)
log(100)
log10(100)
exp(1)
exp(0.5)
1 == 1
1 == 2
1 != 2
1 != 1
100 < 101
100 <= 101
100 >= 101
100 >= 100
x <- 1
print(x)
print(x)
print(y)
print("Hello World!")
Myname <- "SUSTech"
print(Myname)
y <- 2
print(y)
y <- 2
print(y)
y <- 2
print(y)
y <- 2
print(y)
y <- 2
print(y)
x <- y + 1
print(x)
print(Mylist)
Mylist <- 1:10
print(Mylist)
Mylist + 1
Mylist + 10
log(Mylist)
rm(x)
print(x)
AQI <- 69
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
}
AQI <- 49
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
}
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
# If this condition is FALSE
} else {
print("Air Quality is NOT Excellent")
}
AQI <- 69
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
# If this condition is FALSE
} else {
print("Air Quality is NOT Excellent")
}
Check_Air_Quality<- function(AQI) {
#  Excellent
if (AQI <= 50) {
print("Air Quality is Excellent")
}
# Good
if (AQI > 50 && AQI <= 100) {
print("Air Quality is Good")
}
# Polluted, Level I
if (AQI > 100 && AQI <= 150) {
print("Air pollution, level I")
}
# Polluted, Level II
if (AQI > 150 && AQI <= 200) {
print("Air pollution, level II")
}
# Polluted, Level III
if (AQI > 200 && AQI <= 300) {
print("Air pollution, level III")
}
# Polluted, Level IV
if (AQI > 300) {
print("Air pollution, level IV")
}
}
Check_Air_Quality(100)
Check_Air_Quality(120)
Check_Air_Quality(220)
Forecast_List <- c(28, 27, 28, 26, 27)
Forecast_List
for (Daily_T in Forecast_List) {
# If this condition is TRUE
# Do following
print(Daily_T)
}
list1 <- c(1, 2, 3)
list1
list2
list2 <- c(4 ,5 ,6)
list2
list3
list3 <- c(list1, list2)
list3
list3 <- c(list1, list2, 10)
list3
library(backports)
getwd()
getwd()
getwd()
setwd("D://ese335")
getwd()
?log
?exp
exp
X1  <- 50
X2  <- 120
X3  <- X2 * 2.0
X4  <- X1 - 20
X5  <- X1 > X2
print(X1)
print(x1)
X1  <- 50
X2  <- 120
X3  <- X2 * 2.0
X4  <- X1 - 20
X5  <- X1 > X2
print(X1)
print(x1)
print(X1)
print(x1)
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
