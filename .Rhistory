delta_T     <- T- T_ave
plot(delta_T, log(delta_HCHO))
abline(h=0)
abline(v=0)
reg <- lm(log(delta_HCHO) ~ delta_T)
summary(reg)
T    <- rnorm(100, 280, 5)
HCHO <- exp(2*T-4)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_HCHO <- HCHO/HCHO_ave
delta_T     <- T- T_ave
plot(delta_T, log(delta_HCHO))
abline(h=0)
abline(v=0)
reg <- lm(log(delta_HCHO) ~ delta_T)
summary(reg)
T    <- rnorm(100, 280, 5)
HCHO <- exp(0.8*T-4)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_HCHO <- HCHO/HCHO_ave
delta_T     <- T- T_ave
plot(delta_T, log(delta_HCHO))
abline(h=0)
abline(v=0)
reg <- lm(log(delta_HCHO) ~ delta_T)
summary(reg)
T    <- rnorm(100, 280, 5)
HCHO <- exp(0.02*T-4)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_log_HCHO <- log(HCHO)-mean(log(HCHO))
delta_T     <- T- T_ave
plot(delta_T, delta_log_HCHO)
abline(h=0)
abline(v=0)
reg <- lm(delta_log_HCHO ~ delta_T)
summary(reg)
T    <- rnorm(100, 280, 5)
HCHO <- exp(0.2*T-4)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_log_HCHO <- log(HCHO)-mean(log(HCHO))
delta_T     <- T- T_ave
plot(delta_T, delta_log_HCHO)
abline(h=0)
abline(v=0)
reg <- lm(delta_log_HCHO ~ delta_T)
summary(reg)
HCHO <- exp(0.2*T-4)*runif(100,0.9,1.2)
HCHO
T    <- rnorm(100, 280, 5)
HCHO <- exp(0.2*T-4)*runif(100,0.9,1.2)
plot(T, HCHO)
reg <- lm(log(HCHO) ~ T)
summary(reg)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_log_HCHO <- log(HCHO)-mean(log(HCHO))
delta_T     <- T- T_ave
plot(delta_T, delta_log_HCHO)
abline(h=0)
abline(v=0)
reg <- lm(delta_log_HCHO ~ delta_T)
summary(reg)
T    <- rnorm(100, 280, 5)
HCHO <- exp(0.2*T-4)*runif(100,0.8,1.3)
plot(T, HCHO)
reg <- lm(log(HCHO) ~ T)
summary(reg)
T    <- rnorm(100, 280, 5)
HCHO <- exp(0.02*T-4)*runif(100,0.8,1.3)
plot(T, HCHO)
reg <- lm(log(HCHO) ~ T)
summary(reg)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_log_HCHO <- log(HCHO)-mean(log(HCHO))
delta_T     <- T- T_ave
plot(delta_T, delta_log_HCHO)
abline(h=0)
abline(v=0)
reg <- lm(delta_log_HCHO ~ delta_T)
summary(reg)
plot(T, HCHO, type="p")
(283)^2.03*exp(636/283)/(413)^2.03*exp(636/413)
(283)^2.03*exp(636/283)/((413)^2.03*exp(636/413))
exp(0.11*303)/exp(0.11*302)
1/(283)^2.03*exp(636/283)/((413)^2.03*exp(636/413))
1/0.9418181
log(0.9)
T <- rnorm(100, 20, 30)
HCHO <- 1.5E16 + 9.0E14*T
plot(T, HCHO)
plot(T, log(HCHO))
HCHO
T
T <- runif(100, 20, 30)
HCHO <- 1.5E16 + 9.0E14*T
plot(T, HCHO)
plot(T, log(HCHO))
reg <- lm(log(HCHO) ~ T)
summary(reg)
1.88e-17*8.85e-12*1e-6^2*300e3
3*pi*6/8*8.85e-12*1e-12*300*1e3
3*pi*6/8*8.85e-2*1.0e-12*300*1e3
1/1.6022e-19
3*pi*6/8*8.85e-2*1.0e-12*300*1e3*1/1.6022e-19
3*pi*6/8*8.85e-12*1.0e-12*300*1e3*1/1.6022e-19
log(0.1)/log(0.01)
500*50*12/1e4
400*50*12/1e4
350*50*12/1e4
300*50*12/1e4
300*55*12/1e4
2500*2*4*2
300*60*12/1e4
300*750*12/1e4
300*70*12/1e4
2000*2*4*2
6/8*8.85e-12*10e-6*(300e3)^2*10e-6/1.8e-5
6/8*8.85e-12*10e-6*(300e3)^2/1.8e-5
1-exp(-1*400*0.033/10)
log(1-0.95)/log(1-0.73)
log10
log(10)
log(1-0.95)/log(1-0.73)*400
ln(1-0.99)/ln(1-0.90)
log(1-0.99)/log(1-0.90)
SUSTEch <- c(42.33,39.53,44.23,42.67,40.63,39.30,40.33,38.77)
Otehr <- c(45.33,42.40,44.37,42.70,41.80,39.87,41.07,42.73,39.40,42.13,
38.93,37.70,37.63,36.60,35.73,32.27)
t.test(SUSTEch,Otehr)
t.test(SUSTEch-7,Otehr-7)
52*1.04
55*1.04
52*1.04*1.04*1.04
52*1.04*1.04*1.04*1.04
55*1.04*1.04*1.04*1.04
sum(c(127,134,35,88,184,35,23))
43767*1.8
43767*1.2
43767*1.4
43767*1.5
43767*1.6
43767*1.8
43767*3.4
43767*3.4+39600
43767*3.4+39600+52
43767*3.4+39600+520000
43767*3.4+39600+520000+60000
43767*1.8
43767*1.8+40000
43767*1.8+40000+3200000
43767*1.8+40000+3200000+30000
43767*1.8+40000+320000+30000
40*20/60
height <- c(180,	305,	381,	488,	549,	640,	762,	883)
Temperature <- c(13.3,	12.2,	13.3,	10.0,	8.3,	9.4,	8.3,	7.2)
runs.test(height)
library(randtests)
runs.test(height)
runs.test(Temperature)
reg <- lm(Temperature ~ height)
summary(reg)
par(mfrow = c(2, 2))
plot(reg)
par(mfrow = c(2, 2))
plot(reg)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     0,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Convert integer to factor
#PM  <- as.factor(PM)
# Make a data frame
PM_data <- data.frame(Pop, PM)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop , data = PM_data, family = binomial)
# Print model detail
summary(logistic)
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
#-----------
# Section 18, ex1
#
library(InformationValue)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFadden’s R2
pscl::pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
library(pscl)
#-----------
# Section 18, ex1
#
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFadden’s R2
pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
#-----------
# Section 18, ex1
#
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFadden’s R2
pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
mtcars
str(mtcars)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     0,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM_data$PM ~ PM_data$Pop, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
logistic
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     0,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     0,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
#-----------
# Section 18, ex1
#
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFadden’s R2
pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data[PM_data$PM==0,]$PM <- "G"
PM_data[PM_data$PM==1,]$PM <- "E"
PM_data$PM <- as.factor(PM_data$PM )
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pscl::pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
InformationValue::optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
setwd("D://ese335")
rmarkdown::render_site()
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data[PM_data$PM==0,]$PM <- "G"
PM_data[PM_data$PM==1,]$PM <- "E"
PM_data$PM <- as.factor(PM_data$PM )
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pscl::pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
InformationValue::optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
PM_data
PM_data_tbl <- as_tibble(PM_data)
PM_data_tbl
# Change to factor type using tibble
PM_data_tbl <- as_tibble(PM_data) %>%
mutate(PM = factor(PM, ordered = TRUE))
PM_data_tbl
# Quick check
glimpse(PM_data_tbl)
# Plot data, scatter plots
plot(PM_data_tbl$Pop,PM_data_tbl$PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data_tbl, family = binomial)
logistic
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data_tbl, type="response")
InformationValue::optimalCutoff(PM_data_tbl$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
setwd("D://ese335")
rmarkdown::render_site()
