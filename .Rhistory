ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_void()
# Using the facets
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20))
# Using the facets
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent)
# Using the facets
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ country)
# Using the facets
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ country, nrows=2)
# Using the facets - 2 rows (2x1)
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=2)
# Using the facets - 2 rows (2x1)
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=1)
# Using the facets - 2 rows (2x1)
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=2)
?facet_wrap()
# Save a ggplot figure
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=2)
# Save a ggplot figure
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=2)
ggsave("myplot.png")  # save a stored ggplot
# Save a ggplot object
plot1 <- gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=2)
# And later save it to a stored figure
ggsave("myplot2.png", plot=plot1, width=20,
height=10, units="cm", dpi=400)
# And later save it to a stored figure
ggsave("myplot3.png", plot=plot1, width=20,
height=10, units="cm", dpi=10)
# And later save it to a stored figure
ggsave("myplot3.png", plot=plot1, width=20,
height=10, units="cm", dpi=1000)
P1 <- c(38,        29,        24,        28,        24,        37,
33,        33,        30,        26,        34)
P2 <- c(60,        48,        53,        60,        54,        54,
60,        52,        53,        55,        55)
P1 + P2
shapiro.test(P1)
shapiro.test(P2)
shapiro.test(P1+P2)
mean(P1+P2)
sd(P1+P2)
boxplot(P1+P2)
summary(P1+P2)
hist(P1+P2)
hist(P1)
hist(P2)
total <- P1 + P2
summary(total)
gapminder %>%
#  dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,2,2)=="o" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="italic"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name (Second letter is o)") +
facet_wrap( ~ continent, nrow=4)
#--------------------------------------------------
# Section 21, 05/16/2024
# Load libraries
library(rgdal)
library(ggplot2)
library(plyr)
library(dplyr)
library(ggsn)
library(raster)
library(ggmap)
library(mapproj)
# Below are some lines to install the packages
# maptools
# install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
# ggsn
# devtools::install_github('oswaldosantos/ggsn')
# rgdal
# install.packages("rgdal", repos = "https://packagemanager.posit.co/cran/2023-10-13")
#--------------------------------------------------
# Read Shape files
# Location of the .shp file
Local_path <- "China_map/"
# Read china map, a shape file
China_map <- rgdal::readOGR(paste0(Local_path, "bou2_4p.shp"))
# Check the attributes
class(China_map)
# Location of the .shp file
Local_path <- "China_map/"
# Read china map, a shape file
China_map <- rgdal::readOGR(paste0(Local_path, "bou2_4p.shp"))
Local_path
getwd()
# Location of the .shp file
Local_path <- "China_map/China_map/"
# Read china map, a shape file
China_map <- rgdal::readOGR(paste0(Local_path, "bou2_4p.shp"))
# Check the attributes
class(China_map)
# Show variable names
names(China_map)
# Check the attributes, use the operator @
map_data <- China_map@data
head(map_data)
# Convert characters to simple Chinese
China_map$NAME <- iconv(China_map$NAME, "GBK")
# Check the attributes, use the operator @
map_data <- China_map@data
head(map_data)
tail(map_data)
# Quick plot use ggplot
ggplot(China_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = 'lightblue') +
geom_path(color = "grey40")
# Assign each province with an ID
China_map2     <- data.frame(China_map, id=seq(0:924)-1)
# Join two data sets by NAME
China_map_new  <- join(fortify(China_map), China_map2, type = "full")
# Plot the new shape file
ggplot(China_map_new, aes(x = long, y = lat, group = id, fill = NAME)) +
# Plot the border
geom_path(color = 'grey40') +
geom_polygon() +
# Using different colors
scale_fill_manual(values = rainbow(33), guide = F) +
coord_map()
# Name in Chinese
# This is the same as the NAME in the original shape file
NAME    <- c("北京市"  , "天津市"   , "河北省"      , "山西省"   , "内蒙古自治区"    ,
"辽宁省"  , "吉林省"   , "黑龙江省"    , "上海市"   , "江苏省"          ,
"浙江省"  , "安徽省"   , "福建省"      , "江西省"   , "山东省"          ,
"河南省"  , "湖北省"   , "湖南省"      , "广东省"   , "广西壮族自治区"  ,
"海南省"  , "重庆市"   , "四川省"      , "贵州省"   , "云南省"          ,
"西藏自治区", "陕西省" , "甘肃省"      , "青海省"   , "宁夏回族自治区"  ,
"新疆维吾尔自治区"     , "台湾省"      , "香港特别行政区")
# Name in English accordingly
NAME_EN <- c("Beijing" , "Tianjin"  , "Hebei"       , "Shanxi"   , "Inner Mongolia"  ,
"Liaoning", "Jilin"    , "Heilongjiang", "Shanghai" , "Jiangsu"         ,
"Zhejiang", "Anhui"    , "Fujian"      , "Jiangxi"  , "Shandong"        ,
"Henan"   , "Hubei"    , "Hunan"       , "Guangdong", "Guangxi"         ,
"Hainan"  , "Chongqing", "Sichuan"     , "Guizhou"  , "Yunnan"          ,
"Tibet"   , "Shaanxi"  , "Gansu"       , "Qinghai"  , "Ningxia"         ,
"Xinjiang"             , "Taiwan"      , "Hong Kong"     )
# Population of each province, from the 2021 census
Pop     <- c(21893095  , 13866009   , 74610235      ,  34915616  ,  24049155         ,
42591407  , 24073453   , 31850088      ,  24870895  ,  84748016         ,
64567588  , 61027171   , 41540086      ,  45188635  , 101527453         ,
99365519  , 57752557   , 66444864      , 126012510  ,  50126804         ,
10081232  , 32054159   , 83674866      ,  38562148  ,  47209277         ,
3648100  , 39528999   , 25019831      ,   5923957  ,   7202654         ,
25852345               , 23561236      ,   7474200       )
# Make data frame
Popdata <- data.frame(NAME, NAME_EN, Pop)
# Joint the data by NAME
China_map_pop <- join(China_map_new, Popdata, type = "full")
# Plot
ggplot(China_map_pop, aes(x = long, y = lat, group = id, fill = Pop)) +
geom_polygon() +
geom_path(color = "white") +
coord_map()
# Making a better plot
ggplot(China_map_pop, aes(x = long, y = lat, group = group, fill=Pop)) +
labs(fill = "Population")+
geom_polygon()+
geom_path(color = "grey40")+
# Try a different color theme
scale_fill_gradientn(colours=rev(heat.colors(20)),na.value="grey90",
guide = guide_colourbar(barwidth = 0.8, barheight = 10)) +
# Projects a portion of the earth
coord_map() +
# Change theme
theme_classic() +
# Change labels
labs(fill = "Population", x = "Longitude", y = "Latitude") +
# Add map scale
ggsn::scalebar(data = China_map_pop, dist = 500, dist_unit = "km",
border.size = 0.4, st.size = 2,
box.fill = c('black','white'),
transform = TRUE, model = "WGS84")
# Extract Guangdong and Hong Kong from the data
GD_HK <- subset(China_map_pop, NAME == "广东省" | NAME == "香港特别行政区")
# Plot
ggplot(GD_HK,aes(x = long, y = lat, group = id)) +
# Polygon
geom_polygon(fill = "lightblue") +
# Border
geom_path(color = "lightblue") +
# Add one point: SUSTech (lat:22.59670, lon:113.98201)
geom_point(x = 113.98201, y = 22.59670, fill = NA) +
# Add label
annotate("text", x = 113.98201, y = 22.59670+0.25, label = "My Dear Campus") +
# Projects a portion of the earth
coord_map()
#-----------------
# Extract Guangdong and Hong Kong from the data
ZJ_HK <- subset(China_map_pop, NAME == "浙江省")
# Plot
ggplot(ZJ_HK,aes(x = long, y = lat, group = id)) +
# Polygon
geom_polygon(fill = "lightblue") +
# Border
geom_path(color = "lightblue") +
# Add one point: SUSTech (lat:22.59670, lon:113.98201)
#geom_point(x = 113.98201, y = 22.59670, fill = NA) +
# Add label
#annotate("text", x = 113.98201, y = 22.59670+0.25, label = "My Dear Campus") +
# Projects a portion of the earth
coord_map()
#--------------------------------------------------
# Read Raster files
# Read the tiff file
Wind_Nov <- raster("wc2.1_10m_wind_11.tif")
# Look at the raster attributes
Wind_Nov
# Quick plot using plot()
plot(Wind_Nov, main="Wind speed in Nov.")
# Set color
my_colors <- terrain.colors(30)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=my_colors)
# Add contour lines
contour(Wind_Nov, add=T, col="red")
# Convert the raster to a date.frame
Wind_Nov_df <- as.data.frame(Wind_Nov, xy = TRUE)
# Check the data structure
str(Wind_Nov_df)
# Making plot
ggplot() +
geom_raster(data = Wind_Nov_df,
aes(x = x, y = y, fill = wc2.1_10m_wind_11)) +
# Change labels
labs(x="Latitude", y="Longitude") +
# Change theme
theme_bw() +
coord_equal() +
# Change legend
scale_fill_gradient( "Wind speed (m/s)", limits=c(0,20),
low = "white",
high = "red",
n.breaks = 5,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill") +
# Adjust the theme
theme(axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16, angle=90),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.key = element_blank()
) +
# Add a title
ggtitle("Wind Speed in Nov.")
# Define the crop extent
Crop_box <- c(100,125,15,30)
# Crop the raster
Wind_Nov_crop <- crop(Wind_Nov, Crop_box)
# Plot cropped DEM
plot(Wind_Nov_crop, main="Wind speed in Nov.")
# Site information
Site_name <- c("SUSTech", "Longhua", "Xichong", "Baoan", "Kuiyong")
Site_lon  <- c(114.06667,114.02200,114.56111,113.89606,114.42824)
Site_lat  <- c(22.61667,22.72882,22.48077,22.53965,22.63427)
Site_type <- c("Urban", "Urban", "Background", "Urban", "Rural")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
# Get the lat and lon range
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
# Pull the base map
# The keyword zoom defines the map resolution
# Here we use base map from stadiamaps
# To obtain an API key and enable services,
# go to https://client.stadiamaps.com/signup/
# Then use register_stadiamaps(key = "YOUR-API-KEY") to set the API key
#register_stadiamaps(key = "xxxx")
Base_map  <- get_stadiamap(Mapbox, zoom = 10,
maptype = "stamen_terrain_background")
ggmap(Base_map)
# Pull the base map
# The keyword zoom defines the map resolution
# Here we use base map from stadiamaps
# To obtain an API key and enable services,
# go to https://client.stadiamaps.com/signup/
# Then use register_stadiamaps(key = "YOUR-API-KEY") to set the API key
#register_stadiamaps(key = "xxxx")
Base_map  <- get_stadiamap(Mapbox, zoom = 10,
maptype = "stamen_terrain_background")
ggmap(Base_map)
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Read the data
Mangkhut_data       <- read.table("Mangkhut.txt")
# Get path and max wind speed
Mangkhut_lat        <- Mangkhut_data$V4*0.1
Mangkhut_lon        <- Mangkhut_data$V5*0.1
Mangkhut_pressure   <- Mangkhut_data$V6
Mangkhut_max_speed  <- Mangkhut_data$V7*0.514
# Make a data frame for ggplot
Mangkhut_data_new <- data.frame(lat=Mangkhut_lat,lon=Mangkhut_lon,
pressure=Mangkhut_pressure, speed=Mangkhut_max_speed)
# Get the domain
Domain            <- make_bbox(lon = Mangkhut_data_new$lon,
lat = Mangkhut_data_new$lat, f = .1)
# Get the base map
Base_map  <- get_stadiamap(Domain, zoom = 5, maptype = "stamen_terrain")
# Plot base map
Map1              <- ggmap(Base_map)
# Plot the path
Map1 +
# Plot the track
geom_path(data = Mangkhut_data_new,
aes(color=speed), size=1.5,
lineend = "round") +
# Set the color
scale_colour_gradient("Max Wind Speed (m/s)", low = "white", high = "red",
breaks = seq(10, 60, by = 10)) +
# Change labels
labs(x="Latitude", y="Longitude", title="Typhoon Mangkhut Track") + # label the axes
theme_bw()
Lon  <- 115.782939
Lat  <- 33.869338
size <- 0.5
Site_lon  <- c(Lon, Lon-size, Lon+size)
Site_lat  <- c(Lat, Lat-size, Lat+size)
# Make a data frame
Site_data <- data.frame(lon=Site_lon, lat=Site_lat)
# Get the lat and lon range
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
# Pull the base map
# The keyword zoom defines the map resolution
# Here we use base map from stadiamaps
# To obtain an API key and enable services,
# go to https://client.stadiamaps.com/signup/
# Then use register_stadiamaps(key = "YOUR-API-KEY") to set the API key
#register_stadiamaps(key = "xxxx")
Base_map  <- get_stadiamap(Mapbox, zoom = 10,
maptype = "stamen_terrain")
Mymap <- ggmap(Base_map)
Mymap +
# Add one point: SUSTech (lat:22.59670, lon:113.98201)
geom_point(x = Lon, y = Lat, fill = NA) +
# Add label
annotate("text", x = Lon, y = Lat+0.25, label = "My Dear Hometown") +
# Projects a portion of the earth
coord_map()
setwd("D://repo/ese335")
rmarkdown::render_site()
