ls()
ls()
ls
1+1
# This is my 1st line of code
print("Hello World!")
# This is my 1st line of code
print("Hello World!")
print("Hello World!")
print("Hello World!")
1+1
x <- 1
x <- 1
print(x)
x
x + 2
x <- 3
1 + 1
1 + 2 *3
1+2*3
(1+2)*3
10 ^ 2
100 ^ 0.5
2 / 1000
2 e-4
2e-4
2E-04
5.2E+06 + 5.0E+5
sin(1)
sin(pi)
sin(0.5*pi)
cos(0.5*pi)
log(10)
log10(10)
exp(2)
?exp()
?print())
?print()
1 > 2
1 >= 2
1 >= 1
1 <= 1
1 == 1
y = 1
y
y <- 2
y < -2
y < - 2
y <- 2
y <- 2.0
MyName <- "SUSTech"
MyName + 1
1:10
2 ^ 1:10
z <- 1:10
2
z <- (1:10)
z
2 ^ z
list1 <- (1:10)
list2 <- (10:20)
list1
list2
list1 + list2
list1 <- (1:10)
list2 <- (10:20)
list1 <- (1:10)
list2 <- (11:20)
list1
list2
list1 + list2
sin(list1)
AQI <- 69
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
}
AQI <- 49
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
}
# If this condition is TRUE
if (AQI <= 50) {
#Do the following
print("Air Quality is Excellent")
}
AQI <- 69
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
# If this condition is FALSE
} else {
print("Air Quality is NOT Excellent")
}
AQI <- 69
# If this condition is TRUE
if (AQI <= 50) {
# Do the following
print("Air Quality is Excellent")
# If this condition is FALSE
} else {
print("Air Quality is NOT Excellent")
}
Check_Air_Quality<- function(AQI) {
#  Excellent
if (AQI <= 50) {
print("Air Quality is Excellent")
}
# Good
if (AQI > 50 && AQI <= 100) {
print("Air Quality is Good")
}
# Polluted, Level I
if (AQI > 100 && AQI <= 150) {
print("Air pollution, level I")
}
# Polluted, Level II
if (AQI > 150 && AQI <= 200) {
print("Air pollution, level II")
}
# Polluted, Level III
if (AQI > 200 && AQI <= 300) {
print("Air pollution, level III")
}
# Polluted, Level IV
if (AQI > 300) {
print("Air pollution, level IV")
}
}
Check_Air_Quality(10)
Check_Air_Quality(100)
Check_Air_Quality(300)
Check_Air_Quality(600)
Forecast_List <- c(28, 27, 28, 26, 27)
Forecast_List
Forecast_List
Forecast_List <- c(28, 27, 28, 26, 27)
for (Daily_T in Forecast_List) { # If this condition is TRUE
# Do following
print(Daily_T)
} # End of the for loop
for (i in Forecast_List) { # If this condition is TRUE
# Do following
print(i)
} # End of the for loop
for (Daily_T in Forecast_List) { # If this condition is TRUE
# Do following
print(Daily_T)
} # End of the for loop
for (Daily_T in Forecast_List) { # If this condition is TRUE
# Do following
print(Daily_T + 10)
} # End of the for loop
for (xxxxx in Forecast_List) { # If this condition is TRUE
# Do following
print(xxxxx + 10)
} # End of the for loop
for (Daily_T in Forecast_List) {
for (Hour in 1:24) {
Hourly_T <- rnorm(1,Daily_T,5)
print(paste(Daily_T,Hourly_T))
}
}
Output_Matrix    <- matrix(nrow=5, ncol=24)
for (Day in 1:5) {
Daily_T        <- Forecast_List[Day]
for (Hour in 1:24) {
Hourly_T     <- rnorm(1,Daily_T,5)
Temp_Value   <- paste(Daily_T,Hourly_T)
Output_Matrix[Day, Hour] <- Temp_Value
}
}
Output_Matrix2 <- as.vector(Output_Matrix)
Output_Matrix2
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
getwd()
setwd("D:/ese335")
getwd()
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
library(tidyr)
library(dplyr)
library(ggplot2)
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv", header = T)
colnames(Keeling_Data)
Keeling_Data
head(Keeling_Data)
tail(Keeling_Data)
Keeling_Data$co2
Keeling_Data$CO2
Keeling_Data$cO2
Keeling_Data$co2
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv", header = T)
head(Keeling_Data)
Keeling_Data_tbl <- as_tibble(Keeling_Data)
Keeling_Data_tbl
dplyr::select(Keeling_Data_tbl, year, co2, quality)
Keeling_Data_tbl %>%
dplyr::select(year, co2, quality)
Keeling_Data_tbl %>%
filter(year == 2000)
Keeling_Data_tbl %>%
dplyr::select(year, co2, quality) %>%
filter(quality == 1)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2))
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(monthly_mean)
Keeling_Data_tbl %>%
dplyr::select(year, month, co2, quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2), monthly_sd = sd(co2),
monthly_min = min(co2), monthly_max = max(co2),
monthly_se = sd(co2)/sqrt(n()))
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3, co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line() +
facet_wrap(~ month)
# Add a new column to the original tibble
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
# Notice we use pull() to get a vector from a tibble
Month_CO2 <- Keeling_Data_tbl %>%
pull(co2_new)
# plot hist
hist(Month_CO2)
boxplot(co2_new ~ month, data=Keeling_Data_tbl)
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 2,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "*",
cex = 2,
col = "red")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "*",
cex = 0.2,
col = "red")
library(gtools)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)*0.1
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
setwd("D://repo/ese335")
rmarkdown::render_site()
setwd("D://repo/ese335")
rmarkdown::render_site()
