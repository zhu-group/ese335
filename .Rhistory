dplyr::select(co2)
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month)
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2))
dplyr::select(year,co2,quality) %>%
filter(quality == 1) %>%
dplyr::select(co2)
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month)
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_sd = sd(co2))
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(monthly_mean)
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(desc(monthly_mean))
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2)) %>%
arrange(desc(monthly_mean))
Keeling_Data_tbl %>%
dplyr::select(year,month,co2,quality) %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean = mean(co2), monthly_sd = sd(co2),
monthly_min = min(co2), monthly_max = max(co2),
monthly_se = sd(co2)/sqrt(n()))
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv", header = T)
Keeling_Data_tbl <- as_tibble(Keeling_Data)
Keeling_Data_tbl
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl
Keeling_Data_tbl
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3, co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3)
Keeling_Data_tbl
Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3, co2_new = ifelse(quality==1, co2, NA) )
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_ppb = co2 * 1e3, co2_new = ifelse(quality==1, co2, NA) )
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, color=month)) +
geom_line() +
facet_wrap(~ month)
# Add a new column to the original tibble
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
# Notice we use pull() to get a vector from a tibble
Month_CO2 <- Keeling_Data_tbl %>%
pull(co2_new)
Month_CO2
# plot hist
hist(Month_CO2)
# plot hist
hist(Month_CO2)
hist(Month_CO2,
xlab = "Monthly CO2 mixing ratios (ppm)",
main = "Histogram of Monthly CO2",
breaks = 20,
col = "blue",
border = "red")
box(lwd=2,col="green")
hist(Month_CO2,
xlab = "Monthly CO2 mixing ratios (ppm)",
main = "Histogram of Monthly CO2",
breaks = 20,
col = "blue",
border = "red")
box(lwd=5,col="black")
boxplot(Month_CO2)
boxplot(co2_new ~ month, data=Keeling_Data_tbl)
plot(co2_new ~ year, data=Keeling_Data_tbl)
plot(year ~ co2_new, data=Keeling_Data_tbl)
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 2,
col = "navy")
boxplot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "o",
cex = 0.5,
col = "red")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "o",
cex = 0.1,
col = "red")
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
select(co2_new, year)
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
dyplr::select(co2_new, year) %>%
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
dyplr::select(co2_new, year) %>%
filter(year >= 1959)
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
dplyr::select(co2_new, year) %>%
filter(year >= 1959)
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
dplyr::select(co2_new, year) %>%
filter(year >= 1959) %>%
group_by(year) %>%
summarize(annual_mean = mean(co2_new))
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
dplyr::select(co2_new, year) %>%
filter(year >= 1959) %>%
group_by(year) %>%
summarize(annual_mean = mean(co2_new)) %>%
# Make the plot
ggplot(aes(x=year, y=annual_mean)) +
geom_line()
sample(c(1,2,3,4,5,6),2)
clear
sample(c(1,2,3,4,5,6,7), 3 )
sample(c(1,2,3,4,5,6,7), 3 )
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=10000, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=1000000, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
mean(sample1)
sd(sample1)
library(moments)
skewness(sample1)
kurtosis(sample1)
sample2 <- exp(sample1)
hist(sample2)
skewness(sample2)
kurtosis(sample2)
sample1
skewness(sample2)
kurtosis(sample2)
sample2
hist(sample2)
hist(log(sample2))
z <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(z)
mean(z)
sd(z)
skewness(z)
#-------------------------------------------------
# Ex 2
#-------------------------------------------------
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# We draw samples form a unifrom distribution
sample <- runif(Samle_size, min = 0, max = 10)
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# We draw samples form a unifrom distribution
#sample <- runif(Samle_size, min = 0, max = 10)
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
hist(z)
mean(z)
sd(z)
skewness(z)
#-------------------------------------------------
# Ex 2
#-------------------------------------------------
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(Sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 20
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(Sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 20
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- exp(runif(Samle_size, min = 0, max = 10))
# Compute the sample average
average <- mean(Sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- exp(runif(Samle_size, min = 0, max = 10))
# Compute the sample average
average <- mean(Sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
z <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(z)
# Set up
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# Sample for 10000 times
for(i in 1:Simulations){
# Sample from a distribution
Sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(Sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(1.0, 2.0, 3.0)
# Obs from group B
Obs_B   <- c(20.0, 30.0, 40.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
