# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=3)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=3)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=3)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=2)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(0.1, 0.2, 0.3)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(0.1, 0.2, 0.3)
# Obs from group B
Obs_B   <- c(2.0, 3.0, 4.0)
# Compute the difference
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=10, lty=2)
# Compute p-value
length( which(difference <= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 1
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING student’s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on student’s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING student’s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on student’s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
# Compute p-value
# This is one-sided p-value, since the question we want
# to test is:
# whether it is useful in INCREASING student’s scores
length( which(difference >= Obs_difference) )/length(difference)
#---------------------------------------
# Ex. 2
#---------------------------------------
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_difference <- mean(Obs_A) - mean(Obs_B)
print(Obs_difference)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all), length(Obs_A), Obs_all, F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
difference <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Store difference
difference <- c(difference, mean_A - mean_B)
}
# Show all possible differences
print(difference)
# Plot all possible differences
hist(difference)
# Add a vertical line
abline(v=Obs_difference, col="red", lwd=5, lty=2)
abline(v=Obs_difference*(-1), col="red", lwd=5, lty=2)
# Compute p-value
# This is two-sided p-value, since the question we want
# to test is:
# whether it HAS IMPACT on student’s scores
length( which(difference >= Obs_difference) )/length(difference) +
length( which(difference <= Obs_difference*(-1)) )/length(difference)
library(ggpubr)
library(nortest)
library(geoR)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
x
# Compute the density for each element in x
# Mean = 0, sd = 1
density1 <- dnorm(x, 0, 1)
density1
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Plot Density
plot(x, density1, col="red", xlab="X", ylab="Density1",
type="l", lwd=1, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Plot Density
plot(x, density1, col="red", xlab="X", ylab="Density1",
type="l", lwd=1, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Plot Density
plot(x, density1, col="black", xlab="X", ylab="Density1",
type="l", lwd=1, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0, 1)", col="black",   cex=2)
text(-4, 0.30, "N(1, 1)", col="blue",  cex=2)
text(-4, 0.25, "N(0, 9)", col="red", cex=2)
# Plot Density
plot(x, density1, col="black", xlab="X", ylab="Density1",
type="l", lwd=1, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0, 1)", col="black",   cex=2)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Mean = 0, sd = 1
density1 <- dnorm(x, 0, 1)
# Plot Density
plot(x, density1, col="black", xlab="X", ylab="Density1",
type="l", lwd=1, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0, 1)", col="black",   cex=2)
text(-4, 0.30, "N(1, 1)", col="blue",  cex=2)
text(-4, 0.25, "N(0, 9)", col="red", cex=2)
# Sample 1 is from a normal distribution
sample1  <- rnorm(200, 0, 1)
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
# Plot density function of sample 1
ggdensity(sample1, main = "Density plot of sample 1",
xlab = "x", color ="blue", lwd=1.5)
# Plot density function of sample 2
ggdensity(sample2, main = "Density plot of sample 2",
xlab = "x", color ="red", lwd=1.5)
# QQ plot of sample1
ggqqplot(sample1)
# QQ plot of sample2
ggqqplot(sample2)
# Sample 3 is from a normal distribution
sample3  <- sample1[1:25]
# Sample 4 is from a uniform distribution
sample4  <- sample2[1:25]
# Shapiro-Wilk test of sample 3
shapiro.test(sample3)
# Shapiro-Wilk test of sample 3
shapiro.test(sample4)
# Lilliefors test of sample 1
lillie.test(sample1)
# Lilliefors test of sample 2
lillie.test(sample2)
# Sample 5 is from a log-normal distribution
sample5  <- exp(rnorm(200, 0, 1))
# Plot density function of sample 5
ggdensity(sample5, main = "Density plot of sample 5",
xlab = "x", color ="blue", lwd=1.5)
sample5
# Sample 6 is taking log on sample 5 which is from a log-normal distribution
sample6  <- log(sample5)
# Plot density function of sample 6
ggdensity(sample6, main = "Density plot of sample 6",
xlab = "x", color ="blue", lwd=1.5)
# Lilliefors test of sample 6
lillie.test(sample6)
# Generate a sample
y <- exp(runif(40,0,1)+runif(40,0,1)+runif(40,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(y)$lambda
# BOX-COX transformation
y_new <- (y^lambda-1)/lambda
# Plot the density
ggdensity(y_new,main = "Density plot of sample", xlab = "x")
library(ggpubr)
library(nortest)
library(geoR)
# Ex 1
sample <- c(1202.6, 830.1, 372.4, 345.5,
321.2, 244.3, 163.0, 147.8, 95.0,
87.0, 81.2, 68.5, 47.3, 41.1,
36.6, 29.0, 28.6, 26.3, 26.0,
24.4,21.4, 17.3, 11.5, 4.9, 4.9,
1.0)
#sample_new <- log(sample)
# Generate a sample
#y <- c(rnorm(10,0,1), rnorm(10,10,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y)
# Test normality
shapiro.test(y)
# Ex 1
sample <- c(0.6, -1.0, -0.5, 0.9, -0.4,
0.9, 0.6, -0.2, 0.1, 0.7, 0.4,
-0.5, 1.2, 0.1, 0.6, -1.3,
0.9, 1.1, 0.2, 0.1)
#sample_new <- log(sample)
# Generate a sample
#y <- c(rnorm(10,0,1), rnorm(10,10,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
# Plot Q-Q plot
ggqqplot(y)
# Test normality
shapiro.test(y)
# Plot the density
ggdensity(sample,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample)
# Test normality
shapiro.test(sample)
# Ex 2
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8, 95.0, 87.0,
81.2, 68.5, 47.3, 41.1, 36.6, 29.0,
28.6, 26.3, 26.0, 24.4, 21.4, 17.3,
11.5, 4.9, 4.9, 1.0)
#sample_new <- log(sample)
# Plot the density
ggdensity(sample_e2, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e2)
# Test normality
shapiro.test(sample_e2)
# Generate a sample
sample_e4<- c(rnorm(10,0,1), rnorm(10,10,1))
ggdensity(sample_e4, main = "Density plot of sample", xlab = "x")
# Ex 1
sample_e1 <- c(0.6, -1.0, -0.5, 0.9, -0.4,
0.9, 0.6, -0.2, 0.1, 0.7, 0.4,
-0.5, 1.2, 0.1, 0.6, -1.3,
0.9, 1.1, 0.2, 0.1)
# Plot the density
ggdensity(sample_e1, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e1)
# Test normality
shapiro.test(sample_e1)
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8, 95.0, 87.0,
81.2, 68.5, 47.3, 41.1, 36.6, 29.0,
28.6, 26.3, 26.0, 24.4, 21.4, 17.3,
11.5, 4.9, 4.9, 1.0)
# Try this by yourself
#sample_new <- log(sample)
# Plot the density
ggdensity(sample_e2, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e2)
length(sample_e2)
# Test normality
shapiro.test(sample_e2)
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8
95.0, 87.0,
#----------
# Ex 4
# Generate a sample
sample_e4<- c(rnorm(10,0,1), rnorm(10,10,1))
ggdensity(sample_e4, main = "Density plot of sample", xlab = "x")
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
