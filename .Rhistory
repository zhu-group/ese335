HCHO <- exp(0.02*T-4)*runif(100,0.8,1.3)
plot(T, HCHO)
reg <- lm(log(HCHO) ~ T)
summary(reg)
plot(T, HCHO, type="p")
HCHO_ave <- mean(HCHO)
T_ave <- mean(T)
delta_log_HCHO <- log(HCHO)-mean(log(HCHO))
delta_T     <- T- T_ave
plot(delta_T, delta_log_HCHO)
abline(h=0)
abline(v=0)
reg <- lm(delta_log_HCHO ~ delta_T)
summary(reg)
plot(T, HCHO, type="p")
(283)^2.03*exp(636/283)/(413)^2.03*exp(636/413)
(283)^2.03*exp(636/283)/((413)^2.03*exp(636/413))
exp(0.11*303)/exp(0.11*302)
1/(283)^2.03*exp(636/283)/((413)^2.03*exp(636/413))
1/0.9418181
log(0.9)
T <- rnorm(100, 20, 30)
HCHO <- 1.5E16 + 9.0E14*T
plot(T, HCHO)
plot(T, log(HCHO))
HCHO
T
T <- runif(100, 20, 30)
HCHO <- 1.5E16 + 9.0E14*T
plot(T, HCHO)
plot(T, log(HCHO))
reg <- lm(log(HCHO) ~ T)
summary(reg)
1.88e-17*8.85e-12*1e-6^2*300e3
3*pi*6/8*8.85e-12*1e-12*300*1e3
3*pi*6/8*8.85e-2*1.0e-12*300*1e3
1/1.6022e-19
3*pi*6/8*8.85e-2*1.0e-12*300*1e3*1/1.6022e-19
3*pi*6/8*8.85e-12*1.0e-12*300*1e3*1/1.6022e-19
log(0.1)/log(0.01)
500*50*12/1e4
400*50*12/1e4
350*50*12/1e4
300*50*12/1e4
300*55*12/1e4
2500*2*4*2
300*60*12/1e4
300*750*12/1e4
300*70*12/1e4
2000*2*4*2
6/8*8.85e-12*10e-6*(300e3)^2*10e-6/1.8e-5
6/8*8.85e-12*10e-6*(300e3)^2/1.8e-5
1-exp(-1*400*0.033/10)
log(1-0.95)/log(1-0.73)
log10
log(10)
log(1-0.95)/log(1-0.73)*400
ln(1-0.99)/ln(1-0.90)
log(1-0.99)/log(1-0.90)
?aov()
?oneway.test()
rlnorm(10,0.8,0.2)
rlnorm(10,exp(0.8),0.2)
rlnorm(10,log(0.8),0.2)
rlnorm(10,log(0.8),log(0.2))
rlnorm(10,log(0.8),0.4
)
round(rlnorm(10,log(0.8),0.4,2)
)
round(rlnorm(10,log(0.8),0.4),2)
round(rlnorm(10,log(0.7),0.5),2)
round(rlnorm(10,log(0.8),0.3),2)
round(rlnorm(10,log(0.8),0.3),2)
round(rnorm(10,0.8,0.4),2)
round(rnorm(10,1.0,0.4),2)
round(rnorm(10,1.0,0.5),2)
round(rnorm(10,1.0,0.3),2)
round(rnorm(10,1.0,0.2),2)
round(rnorm(10,0.8,0.4),2)
round(rnorm(10,0.8,0.4),2)
round(rnorm(10,0.7,0.5),2)
round(rnorm(10,0.7,0.5),2)
round(rnorm(10,0.7,0.5),2)
round(rnorm(10,0.6,0.3),2)
# Samples
Control <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1      <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2      <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3      <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Make data frame
Cd_data <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3))
))
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
library(ggplot2)
# Samples
Control <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1      <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2      <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3      <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Make data frame
Cd_data <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3))
))
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Samples
Control <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1      <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2      <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3      <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Make data frame
Cd_data <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3))
))
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
x <- seq(0,5,by=0.01)
plot(x, df(x,2,10))
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(0, 6.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- dt(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(0, 6.0),
main="PDF of F distributions")
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- dt(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- dt(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- dt(x, df1=30, df2=30)
lines(x, density3, col="purple", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(0, 6.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(0, 6.0),
main="PDF of F distributions")
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- df(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- df(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- df(x, df1=30, df2=30)
lines(x, density3, col="purple", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(0, 6.0),
main="PDF of F distributions")
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- df(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- df(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- df(x, df1=30, df2=30)
lines(x, density4, col="purple", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(0, 6.0), ylim=c(0,2),
main="PDF of F distributions")
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- df(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- df(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- df(x, df1=30, df2=30)
lines(x, density4, col="purple", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(0, 6.0), ylim=c(0,1.2),
main="PDF of F distributions")
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- df(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- df(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Compute and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- df(x, df1=30, df2=30)
lines(x, density4, col="purple", xlab="", ylab="",
type="l", lwd=3, cex=2)
# Add legends
text(3, 0.95, "F (2,2)", col="black",   cex=2)
text(3, 0.90, "F (2,30)", col="blue",  cex=2)
text(3, 0.85, "F (30,2)", col="red", cex=2)
text(3, 0.80, "F (30,30)", col="purple", cex=2)
# Samples
Control <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1      <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2      <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3      <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Make data frame
Cd_data <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3))
))
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Get sample sizes and degrees of freedoms
n1  <- length(Control)
df1 <- n1 -1
n2  <- length(P1)
df2 <- n2 -1
n3  <- length(P2)
df3 <- n3 -1
n4  <- length(P3)
df4 <- n4 -1
# The overall sample
Sample <- c(Control,P1,P2,P3)
N      <- n1 + n2 + n3 + n4
# Number of levels, and dfM
M   <- 4
dfM <- M-1
# SST
SST <- sd(Sample)^2*(N-1)
# SSB
SSB <- n1*(mean(Control)-mean(Sample))^2 +
n2*(mean(P1)-mean(Sample))^2 +
n3*(mean(P2)-mean(Sample))^2 +
n4*(mean(P3)-mean(Sample))^2
# SSW
SSW <- sd(Control)^2*(n1-1) +
sd(P1)^2*(n2-1) +
sd(P2)^2*(n3-1) +
sd(P3)^2*(n4-1)
# Check SST = SSB + SSW
SST
SSB + SSW
# Get F-statistic
MSB <- SSB/df_B
# Number of levels
M    <- 4
# Degrees of freedoms of variability between groups
df_B <- M-1
# Get sample size and degrees of freedom for each sub-sample
n1  <- length(Control)
df1 <- n1 -1
n2  <- length(P1)
df2 <- n2 -1
n3  <- length(P2)
df3 <- n3 -1
n4  <- length(P3)
df4 <- n4 -1
# The overall sample and its size
Sample <- c(Control,P1,P2,P3)
N      <- n1 + n2 + n3 + n4
# Degrees of freedoms of variability within groups
df_W   <- N - M
# Compute SST
SST <- sd(Sample)^2*(N-1)
# Compute SSW
SSW <- sd(Control)^2*(n1-1) +
sd(P1)^2*(n2-1) +
sd(P2)^2*(n3-1) +
sd(P3)^2*(n4-1)
# Compute SSB
SSB <- n1*(mean(Control)-mean(Sample))^2 +
n2*(mean(P1)-mean(Sample))^2 +
n3*(mean(P2)-mean(Sample))^2 +
n4*(mean(P3)-mean(Sample))^2
# Check SST = SSB + SSW
SST -SSB - SSW
# Get F-statistic
MSB <- SSB/df_B
MSW <- SSW/df_W
F_ratio <- MSB/MSW
F_ratio
pf(F_ratio, df1=df_B, df2=df_W)
1 - pf(F_ratio, df1=df_B, df2=df_W)
Cd_data
oneway.test(Cd ~ group, data = Cd_data)
oneway.test(Cd ~ group, data = Cd_data,var.equal = T)
aov(Cd ~ group,data=Cd_data)
res_aov <- aov(Cd ~ group,data=Cd_data)
summary(res_aov)
SSB
SSW
MSB
MSW
F_ratio
oneway.test(Cd ~ group, data=Cd_data, var.equal = T)
res_aov <- aov(Cd ~ group,data=Cd_data)
summary(res_aov)
setwd("D://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# Make a vector from 0 to 5, with a step of 0.01
x        <- seq(0, 5.0, by=0.01)
# Get the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=2, cex=2,
xlim=c(0, 5.0), ylim=c(0,1.2),
main="PDF of F distributions")
# Make a vector from 0 to 5, with a step of 0.01
x        <- seq(0, 5.0, by=0.01)
# Get the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=2, cex=2,
xlim=c(0, 5.0), ylim=c(0,1.2),
main="PDF of F distributions")
# Make a vector from 0 to 5, with a step of 0.01
x        <- seq(0, 5.0, by=0.01)
# Get the density for each element in x
# Set the degrees of freedom to be (2,2)
density1 <- df(x, df1=2, df2=2)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=2, cex=2,
xlim=c(0, 5.0), ylim=c(0,1.2),
main="PDF of F distributions")
# Get and plot the density from another F distribution
# Set the degrees of freedom to be (2,30)
density2 <- df(x, df1=2, df2=30)
lines(x, density2, col="blue", xlab="", ylab="",
type="l", lwd=2, cex=2)
# Get and plot the density from another F distribution
# Set the degrees of freedom to be (30,2)
density3 <- df(x, df1=30, df2=2)
lines(x, density3, col="red", xlab="", ylab="",
type="l", lwd=2, cex=2)
# Get and plot the density from another F distribution
# Set the degrees of freedom to be (30,30)
density4 <- df(x, df1=30, df2=30)
lines(x, density4, col="purple", xlab="", ylab="",
type="l", lwd=2, cex=2)
# Add legends
text(3, 0.90, "F (2,2)",   col="black",  cex=1.5)
text(3, 0.80, "F (2,30)",  col="blue",   cex=1.5)
text(3, 0.70, "F (30,2)",  col="red",    cex=1.5)
text(3, 0.60, "F (30,30)", col="purple", cex=1.5)
# Sub-samples
Control  <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1       <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2       <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3       <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Number of levels
M        <- 4
# The overall sample and its size
Sample   <- c(Control,P1,P2,P3)
# Get sample size and degrees of freedom for each sub-sample
n1       <- length(Control)
df1      <- n1 -1
n2       <- length(P1)
df2      <- n2 -1
n3       <- length(P2)
df3      <- n3 -1
n4       <- length(P3)
df4      <- n4 -1
# The overall sample size
N        <- n1 + n2 + n3 + n4
# Make data frame
Cd_data  <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3)) ))
Cd_data
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Compute SST
SST      <- sd(Sample)^2*(N-1)
# Compute SSW
SSW      <- sd(Control)^2*(n1-1) +
sd(P1)^2*(n2-1) +
sd(P2)^2*(n3-1) +
sd(P3)^2*(n4-1)
# Compute SSB
SSB      <- n1*(mean(Control)-mean(Sample))^2 +
n2*(mean(P1)-mean(Sample))^2 +
n3*(mean(P2)-mean(Sample))^2 +
n4*(mean(P3)-mean(Sample))^2
SST -SSB - SSW
# Get F-statistic
MSB      <- SSB/df_B
MSW      <- SSW/df_W
F_ratio  <- MSB/MSW
F_ratio
# Find the p-value
# The pf() function gives the Cumulative Distribution Function (CDF)
# of the F distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here F_ratio).
# Here we that 1-pf to get the probability that the
# variable takes a value higher than the threshold (F_ratio).
P_value  <- 1 - pf(F_ratio, df1=df_B, df2=df_W)
P_value  <- 1 - pf(F_ratio, df1=df_B, df2=df_W)
print(P_value)
Cd_data
oneway.test(Cd ~ group, data=Cd_data, var.equal=T)
my_res <- aov(Cd ~ group, data=Cd_data)
summary(my_res)
oneway.test(Cd ~ group, data=Cd_data)
# EX1
City1 <-c(5.11, 5.01, 4.90, 5.14, 4.80, 5.24)
City2 <- c(4.87, 4.18, 4.40, 4.67, 4.89, 4.09)
City3 <- c(5.46, 6.29, 5.57, 5.15, 5.45, 5.30)
# Make data frame
AR_data  <- data.frame(PH=c(City1, City2, City3),
group=c(rep("City1", length(City1)),
rep("City2", length(City2)),
rep("City3", length(City3)) ))
# Compare boxplots
ggplot(AR_data, aes(x=group, y=PH, fill=group)) +
geom_boxplot() +
labs(title="PH in different cites",
x="City", y="") +
theme_classic()
oneway.test(PH ~ group, data=AR_data, var.equal=T)
my_res <- aov(PH ~ group, data=AR_data)
summary(my_res)
