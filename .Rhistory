library(leafletCN)
library(raster)
library(ggmap)
#--------------------------------------------------
# Read Shape files
# Location of the .shp file
Local_path <- "D://China_map/"
# Read china map, a shape file
China_map <- rgdal::readOGR(paste0(Local_path, "bou2_4p.shp"))
# Check the attributes
class(China_map)
# Show variable names
names(China_map)
# Check the attributes, use the operator @
map_data <- China_map@data
head(map_data)
tail(map_data)
# Quick plot use ggplot
ggplot(China_map, aes(x = long, y = lat, group = group)) +
geom_path(color = "grey40") +
geom_polygon(fill = 'lightblue')
# Assign each province with an ID
China_map2     <- data.frame(China_map, id=seq(0:924)-1)
# Join two data sets by NAME
China_map_new  <- join(fortify(China_map), China_map2, type = "full")
# Plot the new shape file
ggplot(China_map_new, aes(x = long, y = lat, group = id, fill = NAME)) +
# Plot the border
geom_path(color = 'grey40') +
geom_polygon() +
# Using different colors
scale_fill_manual(values = rainbow(33), guide = F) +
coord_map()
# Name in Chinese
# This is the same as the NAME in the original shape file
NAME    <- c("北京市"  , "天津市"   , "河北省"      , "山西省"   , "内蒙古自治区"    ,
"辽宁省"  , "吉林省"   , "黑龙江省"    , "上海市"   , "江苏省"          ,
"浙江省"  , "安徽省"   , "福建省"      , "江西省"   , "山东省"          ,
"河南省"  , "湖北省"   , "湖南省"      , "广东省"   , "广西壮族自治区"  ,
"海南省"  , "重庆市"   , "四川省"      , "贵州省"   , "云南省"          ,
"西藏自治区", "陕西省" , "甘肃省"      , "青海省"   , "宁夏回族自治区"  ,
"新疆维吾尔自治区"     , "台湾省"      , "香港特别行政区")
# Name in English accordingly
NAME_EN <- c("Beijing" , "Tianjin"  , "Hebei"       , "Shanxi"   , "Inner Mongolia"  ,
"Liaoning", "Jilin"    , "Heilongjiang", "Shanghai" , "Jiangsu"         ,
"Zhejiang", "Anhui"    , "Fujian"      , "Jiangxi"  , "Shandong"        ,
"Henan"   , "Hubei"    , "Hunan"       , "Guangdong", "Guangxi"         ,
"Hainan"  , "Chongqing", "Sichuan"     , "Guizhou"  , "Yunnan"          ,
"Tibet"   , "Shaanxi"  , "Gansu"       , "Qinghai"  , "Ningxia"         ,
"Xinjiang"             , "Taiwan"      , "Hong Kong"     )
# Population of each province, from the 2021 census
Pop     <- c(21893095  , 13866009   , 74610235      ,  34915616  ,  24049155         ,
42591407  , 24073453   , 31850088      ,  24870895  ,  84748016         ,
64567588  , 61027171   , 41540086      ,  45188635  , 101527453         ,
99365519  , 57752557   , 66444864      , 126012510  ,  50126804         ,
10081232  , 32054159   , 83674866      ,  38562148  ,  47209277         ,
3648100  , 39528999   , 25019831      ,   5923957  ,   7202654         ,
25852345               , 23561236      ,   7474200       )
# Make data frame
Popdata <- data.frame(NAME, NAME_EN, Pop)
# Joint the data by NAME
China_map_pop <- join(China_map_new, Popdata, type = "full")
China_map_pop
# Plot
ggplot(China_map_pop, aes(x = long, y = lat, group = id, fill = Pop)) +
geom_polygon() +
geom_path(color = "grey40") +
coord_map()
library(ggplot2)
library(plyr)
library(dplyr)
library(ggsn)
library(leafletCN)
library(raster)
library(ggmap)
#--------------------------------------------------
# Read Shape files
# Location of the .shp file
Local_path <- "D://China_map/"
# Read china map, a shape file
China_map <- rgdal::readOGR(paste0(Local_path, "bou2_4p.shp"))
# Check the attributes
class(China_map)
# Show variable names
names(China_map)
# Check the attributes, use the operator @
map_data <- China_map@data
map_data
# Quick plot use ggplot
ggplot(China_map, aes(x = long, y = lat, group = group)) +
geom_path(color = "grey40") +
geom_polygon(fill = 'lightblue')
# Assign each province with an ID
China_map2     <- data.frame(China_map, id=seq(0:924)-1)
# Assign each province with an ID
China_map2     <- data.frame(China_map, id=seq(0:924)-1)
# Join two data sets by NAME
China_map2
# Join two data sets by NAME
China_map_new  <- join(fortify(China_map), China_map2, type = "full")
China_map_new
fortify(China_map)
China_map
China_map
fortify(China_map)
tail(fortify(China_map))
China_map2
fortify(China_map)
## Extract Guangdong and Hong Kong from the data
GD_HK <- subset(China_map_pop, NAME == "广东省" | NAME == "香港特别行政区")
# Plot
ggplot(GD_HK,aes(x = long, y = lat, group = id)) +
# Polygon
geom_polygon(fill = "lightblue") +
# Border
geom_path(color = "lightblue") +
# Add one point: SUSTech (lat:22.59670, lon:113.98201)
geom_point(x = 113.98201, y = 22.59670, fill = NA) +
# Add label
annotate("text", x = 113.98201, y = 22.59670+0.25, label = "SUSTech") +
# Projects a portion of the earth
coord_map()
GD_HK <- subset(China_map_pop, NAME == "广东省" | NAME == "香港特别行政区")
# Plot
ggplot(GD_HK,aes(x = long, y = lat, group = id)) +
# Polygon
geom_polygon(fill = "lightblue") +
# Border
geom_path(color = "lightblue") +
# Add one point: SUSTech (lat:22.59670, lon:113.98201)
geom_point(x = 113.98201, y = 22.59670, fill = NA) +
# Add label
annotate("text", x = 113.98201, y = 22.59670+0.2, label = "My Hometown") +
# Projects a portion of the earth
coord_map()
# Change to a data frame, as required by the next step
China_map_pop2 <- as.data.frame(China_map_pop)
China_map_pop2
# Make a interactive map
geojsonMap(dat = China_map_pop2, mapName = "China",
# Use name and population as the key information
namevar = ~ NAME, valuevar = ~ Pop,
# Pop up information
popup =  paste0(China_map_pop2$NAME, ": ", China_map_pop2$Pop),
# Colors
palette = "Reds",
# Add legend
legendTitle = "Population")
China_map_pop2
# Make a interactive map
geojsonMap(dat = China_map_pop2, mapName = "China",
# Use name and population as the key information
namevar = ~ NAME, valuevar = ~ Pop,
# Pop up information
popup =  paste0(China_map_pop2$NAME, ": ", China_map_pop2$AREA),
# Colors
palette = "Reds",
# Add legend
legendTitle = "Population")
# Make a interactive map
geojsonMap(dat = China_map_pop, mapName = "China",
# Use name and population as the key information
namevar = ~ NAME, valuevar = ~ Pop,
# Pop up information
popup =  paste0(China_map_pop2$NAME, ": ", China_map_pop2$AREA),
# Colors
palette = "Reds",
# Add legend
legendTitle = "Population")
# Read the tiff file
Wind_Nov <- raster("D://wc2.1_10m_wind_11.tif")
# Look at the raster attributes
Wind_Nov
# Quick plot using plot()
plot(Wind_Nov, main="Wind speed in Nov.")
# Set color
col <- terrain.colors(30)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
terrain.colors(30)
# Set color
col <- terrain.colors(64)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
col <- terrain.colors(100)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
col <- terrain.colors(30)
# Quick using image()
image(Wind_Nov,  main="Wind speed in Nov.", col=col)
# Add contour lines
contour(Wind_Nov, add=T, col="red")
# Convert the raster to a date.frame
Wind_Nov_df <- as.data.frame(Wind_Nov, xy = TRUE)
# Check the data structure
str(Wind_Nov_df)
# Making plot
ggplot() +
geom_raster(data = Wind_Nov_df,
aes(x = x, y = y, fill = wc2.1_10m_wind_11)) +
# Change labels
labs(x="Latitude", y="Longitude") +
# Change theme
theme_bw() +
coord_equal() +
# Change legend
scale_fill_gradient( "Wind speed (m/s)", limits=c(0,20),
low = "white",
high = "red",
n.breaks = 10,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill") +
# Adjust the theme
theme(axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16, angle=90),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.key = element_blank()
) +
# Add a title
ggtitle("Wind Speed in Nov.")
?scale_fill_gradient
# Define the crop extent
Crop_box <- c(100,125,15,30)
# Crop the raster
Wind_Nov_crop <- crop(Wind_Nov, Crop_box)
# Plot cropped DEM
plot(Wind_Nov_crop, main="Wind speed in Nov.")
# Site information
Site_name <- c("SUSTech", "Longhua", "Xichong", "Baoan", "Kuichong")
Site_lon  <- c(114.06667, 114.02200, 114.56111, 113.89606, 114.42824)
Site_lat  <- c(22.61667, 22.72882, 22.48077, 22.53965, 22.63427)
Site_type <- c("Urban", "Urban", "Background", "Urban", "Rural")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
Site_data
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
Mapbox
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="terrain-background")
# Site information
Site_name <- c("SUSTech", "Longhua", "Xichong", "Baoan", "Kuichong")
Site_lon  <- c(114.06667, 114.02200, 114.56111, 113.89606, 114.42824)
Site_lat  <- c(22.61667, 22.72882, 22.48077, 22.53965, 22.63427)
Site_type <- c("Urban", "Urban", "Background", "Urban", "Rural")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
# Get the lat and lon range
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="terrain-background")
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="stamen")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=15, maptype="stamen")
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=12, maptype="stamen")
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=10, maptype="stamen")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Read the data
Mangkhut_data       <- read.table("D://Mangkhut.txt")
# Get path and max wind speed
Mangkhut_lat        <- Mangkhut_data$V4*0.1
Mangkhut_lon        <- Mangkhut_data$V5*0.1
Mangkhut_pressure   <- Mangkhut_data$V6
Mangkhut_max_speed  <- Mangkhut_data$V7*0.514
Mangkhut_data
# Get path and max wind speed
Mangkhut_lat        <- Mangkhut_data$V4*0.1
Mangkhut_lon        <- Mangkhut_data$V5*0.1
Mangkhut_pressure   <- Mangkhut_data$V6
Mangkhut_max_speed  <- Mangkhut_data$V7*0.514
# Make a data frame for ggplot
Mangkhut_data_new <- data.frame(lat=Mangkhut_lat,lon=Mangkhut_lon,
pressure=Mangkhut_pressure, speed=Mangkhut_max_speed)
Mangkhut_data_new
# Get the domain
Domain            <- make_bbox(lon = Mangkhut_data_new$lon,
lat = Mangkhut_data_new$lat, f = .1)
# Get the base map
Base_map          <- get_map(location=Domain, zoom=5,
maptype="terrain-background")
# Get the base map
Base_map          <- get_map(location=Domain, zoom=5,
maptype="stamen")
# Plot base map
Map1              <- ggmap(Base_map)
# Plot the path
Map1 +
# Plot the track
geom_path(data = Mangkhut_data_new,
aes(color=speed), size=1.5,
lineend = "round") +
# Set the color
scale_colour_gradient("Max Wind Speed (m/s)", low = "white", high = "red",
breaks = seq(10, 60, by = 10)) +
# Change labels
labs(x="Latitude", y="Longitude", title="Typhoon Mangkhut Track") + # label the axes
theme_bw()
7000*1.5*12
8000*1.5*12
680*0.3
x <- seq(0,10,0.001)
y <- exp(x)-x
g <- x-log(x)
plot(x,y,type="l")
plot(x,g,type="l")
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
a <- 1
plot(x,y,type="l")
lines(x,g,type="l")
a <- 1
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l")
a <- 1
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0,10,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
x
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-ax
g <- ax-log(x)
plot(x,y,type="l")
x
y
x
length(x)
length(y)
exp(x)
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- e
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 2
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- -1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- exp(1)
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,1,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,10,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
a <- 1
x <- seq(0.001,2,0.001)
y <- exp(x)-a*x
g <- a*x-log(x)
plot(x,y,type="l")
lines(x,g,type="l",col="red")
45078/43767
45078*1.03
45078*1.03*12
52/12
38*2
6000*1.5
6000*1.5*12
7000*1.5*12
7500*1.5*12
8000*1.5*12
97.5*365
0.25*365
0.025*365
0.975*365
24*7/60
35*0.72
35*0.72
28.7/3
30*0.72
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
getwd()
