Z      <- mean(Error)/5
# Find the one-side p-value
P_value <- 1- pnorm(Z, mean=0, sd=1)
print(P_value)
# Sample
Sample <- c(78, 83, 68, 72, 88)
# Error
Error  <- Sample - 70
# Get Z-ratio
Z      <- mean(Error)/1
# Find the one-side p-value
P_value <- 1- pnorm(Z, mean=0, sd=1)
print(P_value)
# Sample
Sample <- c(78, 83, 68, 72, 88)
# Error
Error  <- Sample - 70
# Get Z-ratio
Z      <- mean(Error)/10
# Find the one-side p-value
P_value <- 1- pnorm(Z, mean=0, sd=1)
print(P_value)
# Sample
Sample <- c(78, 83, 68, 72, 88)
# Error
Error  <- Sample - 70
# Get Z-ratio
Z      <- mean(Error)/5
# Find the one-side p-value
P_value <- 1- pnorm(Z, mean=0, sd=1)
print(P_value)
# Sample
Sample <- c(78, 83, 68, 72, 88)
# Error
Error  <- Sample - 70
# Get Z-ratio
Z      <- mean(Error)/2
# Find the one-side p-value
P_value <- 1- pnorm(Z, mean=0, sd=1)
print(P_value)
se(Error)
sd(Error)/sqrt(length(Error))
sd(Error)
# Get SE
SE      <- sd(Error)/sqrt(length(Error))
# Get sample size and df
n  <- length(Error)
df <- n - 1
# Get SE
SE      <- sd(Error)/sqrt(n)
# Get t-ratio
t      <- mean(Error)/SE
# Find the one-side p-value
P_value <- 1 - pt(t, df=df)
print(P_value)
# Get t-ratio
t      <- mean(Error)/SE
t
print(P_value)
Sample <- c(78, 83, 68, 72, 88)
# Error
Error  <- Sample - 70
# Get Z-ratio
Z      <- mean(Error)/2
Z
# Get Z-ratio
Z      <- mean(Error)/10
# Sample
Sample <- c(78, 83, 68, 72, 88)
# Error
Error  <- Sample - 70
# Get Z-ratio
Z      <- mean(Error)/10
# Find the one-side p-value
P_value <- 1- pnorm(Z, mean=0, sd=1)
print(P_value)
Z
# Get sample size and df
n  <- length(Error)
df <- n - 1
# Get SE
SE      <- sd(Error)/sqrt(n)
# Get t-ratio
t      <- mean(Error)/SE
t
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 10
density1 <- dt(x, df=10)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 20
density2  <- dt(x, df=20)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=30)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "df=10", col="black",   cex=2)
text(-4, 0.30, "df=20)", col="blue",  cex=2)
text(-4, 0.25, "df=30", col="red", cex=2)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 5
density1 <- dt(x, df=5)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 20
density2  <- dt(x, df=30)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "df=10", col="black",   cex=2)
text(-4, 0.30, "df=20)", col="blue",  cex=2)
text(-4, 0.25, "df=30", col="red", cex=2)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "df=30", col="black",   cex=2)
text(-4, 0.30, "df=5", col="blue",  cex=2)
text(-4, 0.25, "df=2", col="red", cex=2)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2, col="purple",
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from the normal distribution
density4  <- dnorm(x, mean = 0, sd = 1)
lines(x, density4, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "df=30", col="purple",   cex=2)
text(-4, 0.30, "df=5", col="blue",  cex=2)
text(-4, 0.25, "df=2", col="red", cex=2)
text(-4, 0.20, "N(0,1)", col="red", cex=2)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from the normal distribution
density4  <- dnorm(x, mean = 0, sd = 1)
lines(x, density4, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "df=30", col="purple",   cex=2)
text(-4, 0.30, "df=5", col="blue",  cex=2)
text(-4, 0.25, "df=2", col="red", cex=2)
text(-4, 0.20, "N(0,1)", col="red", cex=2)
t.test(c(78, 83, 68, 72, 88),mu = 70)
t.test(c(78, 83, 68, 72, 88),mu = 70,alternative ="greater")
Sample
qqplot(Sample)
qqnorm(Sample)
qqline(Sample)
qqline(c(4.28, 4.40, 4.42, 4.35, 4.37))
rnorm(20,201,3)
round(rnorm(20,201,3),0)
round(rnorm(25,203,3),0)
round(rnorm(25,202,3),0)
setwd("D://ese335")
rmarkdown::render_site()
# Plot
hist(Sample)
Sample <- c(78, 83, 68, 72, 88)
# Plot
hist(Sample)
# Plot
boxplot(Sample)
mean(Sample)
ggqqplot(Sample)
shapiro.test(Sample)
library(ggpubr)
library(nortest)
library(ggpubr)
library(nortest)
# Sample
Sample <- c(78, 83, 68, 72, 88)
#
ggqqplot(Sample)
shapiro.test(Sample)
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
library(ggpubr)
library(nortest)
# Sample
Sample <- c(78, 83, 68, 72, 88)
#
ggqqplot(Sample)
shapiro.test(Sample)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Instrument error SD
SD       <- 10
# Get Z-ratio
Z        <- mean(Error)/SD
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Get sample size and degrees of freedom
n        <- length(Error)
df       <- n - 1
# SE of the average
SE       <- sd(Error)/sqrt(n)
# Get t-ratio
t        <- mean(Error)/SE
t
P_value  <- 1 - pt(t, df)
print(P_value)
# Sample
Sample <- c(78, 83, 68, 72, 88)
#
ggqqplot(Sample)
shapiro.test(Sample)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Instrument error SD
SD       <- 10
# Get Z-ratio
Z        <- mean(Error)/SD
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
# Instrument error SD
SD       <- 1
# Get Z-ratio
Z        <- mean(Error)/SD
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(Sample, mu=70, alternative ="greater")
# Sample
Sample <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
t.test(Sample, mu=4.55)
Sample <- c(199, 202, 202, 198, 196, 197, 201, 203, 198, 204,
201, 203, 201, 203, 203, 202, 197, 200, 201, 197)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
Sample <- c(199, 202, 202, 198, 196, 197, 201, 203, 198, 204,
201, 203, 201, 203, 203, 202, 197, 200, 201, 197)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
Sample <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
t.test(Sample, mu=4.55)
Sample <- c(199, 202, 202, 198, 196, 197, 201, 203, 198, 204,
201, 203, 201, 203, 203, 202, 197, 200, 201, 197)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
shapiro.test(Sample)
# Sample
Sample <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=100, alternative ="greater")
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=300, alternative ="greater")
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
Sample
Sample <- c(199, 202, 202, 198, 196, 197, 201, 203, 198, 204,
201, 203, 201, 203, 203, 202, 197, 200, 201, 197)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
Sample
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=300, alternative ="greater")
Sample
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
Sample <- c(199, 202, 202, 198, 196, 197, 201, 203, 198, 204,
201, 203, 201, 203, 203, 202, 197, 200, 301, 397)
Sample
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
Sample <- round(rnorm(20,252,1))
Sample
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
Sample <- round(rnorm(20,252,1),1)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
Sample <- round(rnorm(20,252,2),1)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=250, alternative ="greater")
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=300, alternative ="greater")
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=250, alternative ="greater")
Sample <- c(199, 202, 202, 198, 196, 197, 201, 203, 198, 204,
201, 203, 201, 203, 203, 202, 197, 200, 201, 197)
# Check normal distribution?
ggqqplot(Sample)
shapiro.test(Sample)
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=250, alternative ="greater")
# p-value > 0.05, accept H0
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=200, alternative ="greater")
# N <30, unknown sigma, t-test
# Since the question is to test
# people consume more energy when
# temperature is higher
# We use one-side p-value
t.test(Sample, mu=195, alternative ="greater")
t.test(Sample, mu=200, alternative ="greater")
setwd("D://ese335")
rmarkdown::render_site()
