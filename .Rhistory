x <- seq(1,10,1)
which(x==1 && x==2)
x==1
library(ggplot2)
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from Mar.
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
str(global_cases_ts)
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
forecast_15days
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
COVID_tbl2
tail(COVID_tbl2)
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
(500064-462259)/462259
(500064-462259)/462259*100
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 15
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# 1st day
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
tail(COVID_tbl2)
# Nov. 09:
# Predicted value: 500,064 (455,177, 549,378)
# Real value: 462,259
# Relative bias: 8.2%
model
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
13*13/60
2*24*3600*3/1000
2*24*3600*1/1000
43333*0.02
43333*0.02*2*1.2
43333*0.02*(1+2*1.2)
43333*1*(1+2*1.2)
43333*(1+2*1.2)
43333*0.5*(1+2*1.2)
43333*0.55*(1+2*1.2)
43333*1.01*0.5*(1+2*1.2)
43333*1.8
43333*1.8*1.01
43333*1.2*1.01
43333*1.01
52*1.01/12*1.8
52*1.01/12*1.8*10000
52*1.01/12*3*10000
436197.11+39600.30+118381.3
43,767*12
43767*12
13*13/60
15*13/60
14*13/60
205/375*700
205/375*700+349/750*300
205/375*700+399/750*300
205/375*700+499/750*300
205/375*700+599/750*300
205/375*700+550/750*300
255/375*700+399/750*300
245/375*700+399/750*300
235/375*700+399/750*300
240/375*700+399/750*300
700*375
300/750
700/375
(700/375/(300/750))
375*0.6
375*0.7
205/375*700+550/750*300
205/375*700+540/750*300
205/375*700+545/750*300
205/375*700+350/750*300
235/375*700+350/750*300
245/375*700+350/750*300
250/375*700+350/750*300
245/375*700+350/750*300
250/375*700+350/750*300
250/375*700+360/750*300
240/375*700+360/750*300
245/375*700+360/750*300
250/375*700+360/750*300
250/375*700+350/750*300
250/375*700+350/750*300
7665*12
7665*13
5509+489
(44-72)/72
(167-139)/139
52*(1+3.8/12)+6+32
PM2.5_2019  <- c(52, 49, 47, 38, 81, 76, 94, 63, 56, 87)
# Guangzhou
PM2.5_2020  <- c(59, 53, 29, 27, 102, 50, 60, 44, 61, 65)
qqplot(PM2.5_2019)
shapiro.test(PM2.5_2019)
shapiro.test(PM2.5_2020)
t.test(PM2.5_2019, PM2.5_2020, paired = T)
mean(PM2.5_2019)
mean(PM2.5_2020)
PM2.5_2019  <- c(52, 49, 47, 38, 23, 76, 94, 63, 56, 87)
# Guangzhou
PM2.5_2020  <- c(59, 53, 29, 27, 23, 50, 60, 44, 61, 65)
shapiro.test(PM2.5_2019)
shapiro.test(PM2.5_2020)
mean(PM2.5_2019)
mean(PM2.5_2020)
t.test(PM2.5_2019, PM2.5_2020, paired = T)
library(ggpubr)
library(nortest)
library(ggplot2)
library(ggpubr)
library(nortest)
library(ggplot2)
PM2.5_2019  <- c(52, 49, 47, 38, 23, 76, 94, 63, 56, 87)
n1 <- length(PM2.5_2019)
# Guangzhou
PM2.5_2020  <- c(59, 53, 29, 27, 23, 50, 60, 44, 61, 65)
n2 <- length(PM2.5_2020)
shapiro.test(PM2.5_2019)
shapiro.test(PM2.5_2020)
mean(PM2.5_2019)
mean(PM2.5_2020)
t.test(PM2.5_2019, PM2.5_2020, paired = T)
# Sample difference
# Plot Box-plots side by side
# Make data frame
PM2.5_data <- data.frame(PM2.5 = c(PM2.5_2019, PM2.5_2020),
Year = c(rep("2019",n1),rep("2020",n2)))
PM2.5_data
# Compare boxplots
PM2.5_data %>%
ggplot(aes(x=as.character(Year), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by Year", x="Year", y="ug/m3")
t.test(PM2.5_2019, PM2.5_2020, paired = T,var.equal = T)
t.test(PM2.5_2019, PM2.5_2020, paired = T,var.equal = F)
t.test(PM2.5_2019, PM2.5_2020, paired = T)
library(ggpubr)
library(nortest)
library(ggplot2)
PM2.5_2019  <- c(53, 41, 26, 19, 26, 48, 64, 46, 42, 65, 53, 81, 51, 32, 44)
n1 <- length(PM2.5_2019)
# Guangzhou
PM2.5_2020  <- c(63, 33, 24, 19, 33, 49, 38, 28, 41, 36, 41, 43, 43, 23, 35)
n2 <- length(PM2.5_2020)
shapiro.test(PM2.5_2019)
shapiro.test(PM2.5_2020)
mean(PM2.5_2019)
mean(PM2.5_2020)
t.test(PM2.5_2019, PM2.5_2020, paired = T)
# Sample difference
# Plot Box-plots side by side
# Make data frame
PM2.5_data <- data.frame(PM2.5 = c(PM2.5_2019, PM2.5_2020),
Year = c(rep("2019",n1),rep("2020",n2)))
# Compare boxplots
PM2.5_data %>%
ggplot(aes(x=as.character(Year), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by Year", x="Year", y="ug/m3")
a <- c(51,48,52,62,64,51,55,60)
b <- c(46,45,53,48,57,55,42,50)
t.test(a,b,paired = T)
diff <- PM2.5_2020- PM2.5_2019
diff
mean(PM2.5_2020)
mean(PM2.5_2020)
mean(PM2.5_2019)
mean(diff)
sd(diff)/sqrt(n1)
9.5/3.5
# PM2.5 in 2019 Jan.
PM2.5_2019  <- c(53, 41, 26, 19, 26, 48, 64, 46, 42, 65, 53, 81, 51, 32, 44)
# PM2.5 in 2020 Jan.
PM2.5_2020  <- c(63, 33, 24, 19, 33, 49, 38, 28, 41, 36, 41, 43, 43, 23, 35)
# Sample difference
Diff        <- PM2.5_2020 - PM2.5_2019
# Get sample size, degrees of freedom, and sd
n           <- length(Diff)
df          <- n - 1
sd          <- sd(Diff)
# SE of the difference
SE          <- sd/sqrt(n)
# Get t-ratio
t           <- mean(Diff)/SE
# Find the one-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value     <- 1-pt(abs(t), df=df)
print(P_value)
t.test(PM2.5_2019,PM2.5_2020,paired = T)
Diff
mean(Diff)
t
P_value
t.test(PM2.5_2019,PM2.5_2020,paired = T,alternative = "l")
t.test(PM2.5_2020,PM2.5_2019,paired = T,alternative = "l")
SE
t
mean(Diff)
print(P_value)
a <-c(51, 48, 52, 62, 64, 51, 55, 60)
b <- c(46, 45, 53, 48, 57, 55, 42, 50)
t.test(b,a,paired = T,alternative = "l")
# PM2.5 in 2019 Feb.
PM2.5_2019  <- c(53, 41, 26, 19, 26, 48, 64, 46, 42, 65, 53, 81, 51, 32, 44)
# PM2.5 in 2020 Feb.
PM2.5_2020  <- c(63, 33, 24, 19, 33, 49, 38, 28, 41, 36, 41, 43, 43, 23, 35)
# Sample difference
Diff        <- PM2.5_2020 - PM2.5_2019
# Check normality Shapiro-Wilk test
shapiro.test(Diff)
# Get sample size, degrees of freedom, and sd
n           <- length(Diff)
df          <- n - 1
sd          <- sd(Diff)
# SE of the difference
SE          <- sd/sqrt(n)
# Get t-ratio
t           <- mean(Diff)/SE
# Find the two-sided p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value     <- (1-pt(abs(t), df=df))*2
print(P_value)
t
SE
mean(Diff)
t.test()
s <- c(88, 93, 89.6, 84.3, 83, 79.2, 68, 76.5, 90, 87, 95, 85, 87.5, 88, 84)
n <- c(2, 1, 2, 2, 3, 3, 3, 2, 3, 2, 2, 2, 2, 2, 2, 0)
length(s)
length(n)
n <- c(2, 1, 2, 2, 3, 3, 3, 2, 3, 2, 2, 2, 2, 2, 2)
4-3*(100-s)^2/1600
sum(4-3*(100-s)^2/1600)/sum(n)
sum(4-3*(100-s)^2/1600)
mean(4-3*(100-s)^2/1600)
mean( (4-3*(100-s)^2/1600))*n/sum(n))
(4-3*(100-s)^2/1600)*n/sum(n)
sum((4-3*(100-s)^2/1600)*n/sum(n))
sum(4-3*(100-s)^2/1600)/sum(n)
sum((4-3*(100-s)^2/1600)*n)/sum(n)
s
j <- c(3.73, 3.91, 3.77)
4-3*(100-s)^2/1600)
4-3*(100-s)^2/1600
#
# Z 每一门课的百分成绩
# n 每一门课的学分
Get_mean_GPA <- function(Z, n){
G <- round(4-3*(100-s)^2/1600,2)
mean_GPA <- sum(G*n)/sum(n)
return(mean_GPA)
}
Z <- c(88.0, 93.0, 89.6, 84.3, 83.0, 79.2, 68.0, 76.5, 90.0, 87.0,
95.0, 85.0, 87.5, 88.0, 84.0)
n <- c(2, 1, 2, 2, 3, 3, 3, 2, 3, 2, 2, 2, 2, 2, 2)
Get_mean_GPA(Z, n)
df
pt(0.025,df=14)
qt(0.025,df=14)
qt(0.975,df=14)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 14
density <- dt(x, df=14)
# Plot Density
plot(x, density, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 14
density <- dt(x, df=14)
# Plot Density
plot(x, density, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
-9.47-2.14*sd(diff)/15
-9.47+2.14*sd(diff)/15
-9.47+2.14*sd(diff)/sqrt(15)
-9.47-2.14*sd(diff)/sqrt(15)
ggplot(NULL, aes(x = c(-3, 3))) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-10, 0)) +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(0, 3)) +
xlim(-3, 3)
ggplot(NULL, aes(x = c(-3, 3))) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-10, 0))
setwd("D://ese335")
rmarkdown::render_site()
round( rnorm(10, 400, 20) )
round( rnorm(10, 400, 20) )
setwd("D://ese335")
rmarkdown::render_site()
a <- c(415, 385, 378, 398, 413, 359, 391, 410, 390, 402)
b <- c(412, 361, 401, 432, 413, 385, 378, 412, 420, 400)
t.test(a,b,alternative = "two.sided",paired = T)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
