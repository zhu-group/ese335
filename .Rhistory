Girls     <- c(6.11, 18.25, 13.18, 20.02)
Boys   <- c(31.94, 26.76, 34.86, 18.03, 8.05, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05,)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05,)
Boys   <- c(31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05,)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05)
Boys   <- c(31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Get sample size, degrees of freedom, and sd
n1        <- 126
df1       <- n1 - 1
sd1       <- 7.5
n2        <- 50
df2       <- n2 - 1
sd2       <- 5.8
# SE of the difference
SE_W      <- sqrt( sd1^2/n1 + sd2^2/n2 )
# d.f.W
df_W      <- SE_W^4/( (sd1/sqrt(n1))^4/(n1-1) + (sd2/sqrt(n2))^4/(n2-1) )
df_W
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df_W))*2
print(P_value)
# Get t-ratio
t         <- (29.2-18.2)/SE_W
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df_W))*2
print(P_value)
t
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df_W))
P_value
print(P_value)
#------------------------------------
data(rivers)
ls()
rivers
# Check
lillie.test(rivers)
library(ggpubr)
library(nortest)
library(geoR)
data(rivers)
rivers
# Check
lillie.test(rivers)
lillie.test(log(rivers))
# Plot density function of sample 1
ggdensity(rivers, main = "Density plot of sample 5",
xlab = "x", color ="blue", lwd=1.5)
# QQ plot
ggqqplot(rivers)
# Boxplot
boxplot(rivers)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(rivers)$lambda
# BOX-COX transformation
rivers_new <- (rivers^lambda-1)/lambda
# Plot the density
ggdensity(rivers_new,main = "Density plot ", xlab = "River length")
# Lilliefors test
lillie.test(rivers_new)
data(beavers)
beaver1
beaver2
# Check normality
lillie.test(beaver1$temp)
lillie.test(beaver2$temp)
# Perform Runs test
runs.test(beaver1$temp)
library(ggpubr)
library(nortest)
library(geoR)
library(ggplot2)
library(randtests)
library(moments)
library(outliers)
library(EnvStats)
library(nortest)
# Perform Runs test
runs.test(beaver1$temp)
runs.test(beaver2$temp)
beaver1
rosnerTest(beaver1$temp, k=2)
rosnerTest(beaver2$temp, k=2)
rosnerTest(beaver1$temp, k=2)
grubbs.test(beaver1$temp)
t.test(beaver1$temp, beaver2$temp, alternative = "two-sided", paired = F, var.equal = F)
t.test(beaver1$temp, beaver2$temp, alternative = "two.sided", paired = F, var.equal = F)
beaver1$temp[-37.53 ]
# without the
beaver1_temp_new <- beaver1$temp[-37.53]
rosnerTest(beaver1_temp_new, k=2)
rosnerTest(beaver1$temp, k=4)
# without the
beaver1_temp_new <- beaver1$temp[-80]
rosnerTest(beaver1_temp_new, k=2)
t.test(beaver1_temp_new, beaver2$temp, alternative = "two.sided", paired = F, var.equal = F)
# with the Outlier
t.test(beaver1$temp, beaver2$temp, alternative = "two.sided", paired = F, var.equal = F)
# Get sample size, degrees of freedom, and sd
n1        <- 126
df1       <- n1 - 1
sd1       <- 7.5
n2        <- 50
df2       <- n2 - 1
sd2       <- 5.8
# SE of the difference
SE_W      <- sqrt( sd1^2/n1 + sd2^2/n2 )
# d.f.W
df_W      <- SE_W^4/( (sd1/sqrt(n1))^4/(n1-1) + (sd2/sqrt(n2))^4/(n2-1) )
# Get t-ratio
t         <- (29.2-18.2)/SE_W
t
library(ggpubr)
library(nortest)
library(ggplot2)
# [RS] Page 53, Ex 15
# Downtown sample average, SD, population
CairoD_avg <- 29.2
CairoD_SD <- 7.5
CairoD_pop <- 126
# Abbasia sample average, SD, population
Abbasia_avg <- 18.2
Abbasia_SD <- 5.8
Abbasia_pop <- 50
# Sample difference
diff <- CairoD_avg - Abbasia_avg
print(diff)
# Rivers
data(rivers)
rivers.data <- data.frame(rivers = rivers,
Length = rep("rivers", length(rivers)))
# Density plot
rivers.data %>%
ggplot(aes(x=rivers, color=Length)) +
geom_density()
# QQ plot
rivers.data %>%
ggplot(aes(sample = rivers)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ Length)
# Box plot
rivers.data %>%
ggplot(aes(x=as.character(Length), y=rivers)) +
geom_boxplot(fill="steelblue") +
labs(title="Rivers by Length", x="Length", y="km")
# Check normality Shapiro-Wilk test
shapiro.test(rivers)
#--> Transform the data  <--#
lambda <- boxcoxfit(rivers)$lambda
# BOX-COX transformation
rivers_new <- (rivers^lambda-1)/lambda
# Plot the density
ggdensity(rivers_new,main = "Density plot ", xlab = "River length")
# Lilliefors test
lillie.test(rivers_new)
library(ggpubr)
library(nortest)
library(ggplot2)
library(geoR)
#===========================EX1===========================
mean1<- 29.2
mean2<-18.2
sd1<-7.5
sd2<-5.8
n1<- 126
n2<-50
df1<- n1-1
df2<- n2-1
SE<- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
t<- (mean1-mean2)/SE
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(SE)
print(t)
print(P_value)
#===========================EX2======================
#2.1
data(rivers)
ggdensity(rivers, main = "Density plot of rivers length",
xlab = "length", color ="red", lwd=1)
ggqqplot(rivers,main = "qq-plot of rivers length")
ggboxplot(rivers,main = "box-plot of rivers length",ylab= "length")
#2.2
lillie.test(rivers)
lnriver<- log(rivers)
ggdensity(lnriver)
lillie.test(lnriver)
lambda <- boxcoxfit(rivers)$lambda
river_new <- (rivers^lambda-1)/lambda
ggdensity(river_new)
lillie.test(river_new)
#===============================EX3=========================
#3.1
data(beavers)
beaver_data <- data.frame(temp = c(beaver1$temp, beaver2$temp),
beaver = c(rep("beaver1",length(beaver1$temp)),rep("beaver2",length(beaver2$temp))))
beaver_data%>%
ggplot(aes(x=as.character(beaver), y=temp)) +
geom_boxplot(fill="steelblue")
beaver_data%>%
ggplot(aes(x=temp, color=beaver)) +
geom_density()
beaver_data%>%
ggplot(aes(sample = temp)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ beaver)
#3.2
lillie.test(beaver1$temp)
lillie.test(beaver2$temp)
#3.4
t.test(beaver1$temp, beaver2$temp, alternative="two.sided", var.equal=T)
rosnerTest(beaver1$temp, k=2)
rosnerTest(beaver2$temp, k=2)
# without the outlier
beaver1_temp_new <- beaver1$temp[-80]
rosnerTest(beaver1_temp_new, k=2)
t.test(beaver1_temp_new, beaver2$temp, alternative = "two.sided", paired = F, var.equal = F)
# Both tests indicate the same result,
# so we report INCLUDE the outlier
#-------------------------------------------------------
# 1.Solving problems
# Import data
# Get sample size, degrees of freedom, and sd
n1        <- 126
df1       <- n1 - 1
sd1       <- 7.5
# Get sample size, degrees of freedom, and sd
n2        <- 50
df2       <- n2 - 1
sd2       <- 5.8
# SE of the sample difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (29.2 - 18.2)/SE
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(P_value)
#-------------------------------------------------------
# 1.Solving problems
# Import data
# Get sample size, degrees of freedom, and sd
n1        <- 126
df1       <- n1 - 1
sd1       <- 7.5
# Get sample size, degrees of freedom, and sd
n2        <- 50
df2       <- n2 - 1
sd2       <- 5.8
# SE of the sample difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (29.2 - 18.2)/SE
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(P_value)
#------------------------------------------------------
# 2. North America rivers
# Load libraries needed
library(gtools)
library(ggplot2)
library(ggpubr)
library(nortest)
library(geoR)
# Load data
data(rivers)
# Draw density plot
ggdensity(rivers, main = "Density plot of rivers",
xlab = "x", color ="red", lwd=1.5)
# Draw qq plot
ggqqplot(rivers)
# Draw box plot
river_data <- data.frame(River = rivers)
ggplot(river_data, aes(y=River)) +
geom_boxplot(fill="steelblue",outlier.colour="red", outlier.shape=18,outlier.size=4) +
labs(title="River length Distribution", x = "river", y = "Length")
# Check normality (choose lillie.test as number of sample > 30)
lillie.test(rivers)
# Noraml transformation
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(rivers)$lambda
# BOX-COX transformation
rivers_new <- (rivers^lambda-1)/lambda
#Check normality
lillie.test(rivers_new)
#------------------------------------------------------
# Beaver body temperatures
# Load data
data(beavers)
# Draw density plot
ggdensity(beaver1$temp, main = "Density plot of temperature of beaver1",
xlab = "x", color ="red", lwd=1.5)
ggdensity(beaver2$temp, main = "Density plot of temperature of beaver2",
xlab = "x", color ="red", lwd=1.5)
# Draw qq plot
ggqqplot(beaver1$temp)
ggqqplot(beaver2$temp)
# Box Plot
# Make data frame
temp1 <- beaver1$temp
temp2 <- beaver2$temp
temp_data <- data.frame(temp = c(temp1, temp2),
Beaver = c(rep("beaver1",114),rep("beaver2",100)))
# Compare boxplots
temp_data %>%
ggplot(aes(x=as.character(Beaver), y=temp)) +
geom_boxplot(fill="steelblue",outlier.colour="red", outlier.shape=18,outlier.size=4) +
labs(title="Temperature Distribution of beavers", x="Beaver", y="Celsius")
# Check normality (choose lillie.test as number of sample > 30)
lillie.test(beaver1$temp)
lillie.test(beaver2$temp)
# T test
# Shenzhen sample
t.test(beaver1$temp, beaver2$temp, alternative="two.sided", var.equal=T)
t.test(beaver1$temp, beaver2$temp, alternative="two.sided", var.equal=F)
library(ggpubr)
library(nortest)
library(ggplot2)
# Cairo sample
Ca_mean <- 29.2
Ca_n    <- 126
Ca_SD   <- 7.5
Ca_df   <- Ca_n - 1
# Abbasia sample、
Ab_mean <-18.2
Ab_n    <- 50
Ab_SD   <- 5.8
Ab_df   <- Ab_n - 1
# Sample difference
Ca_mean - Ab_mean
SE        <- sqrt( (Ca_df*Ca_SD^2 + Ab_df*Ab_SD^2)/(Ca_df+Ab_df) * (Ca_n+Ab_n)/(Ca_n*Ab_n) )
t         <- (Ca_mean - Ab_mean)/SE
print(t)
P_value  <- (1-pt(abs(t), df=Ca_df+Ab_df))*2
print(P_value)
library(ggpubr)
library(nortest)
library(geoR)
library(ggplot2)
library(gtools)
data(rivers)
#density plot
ggdensity(rivers, main = "Density plot of rivers in North America",
xlab = "x", color ="blue", lwd=1.5)
#Q-Q plot
ggqqplot(rivers)
#box plot
rivers_date <- data.frame(rivers)
ggplot(data = rivers_date, aes(y=rivers)) +
geom_boxplot(fill="steelblue") +
labs(title="length of rivers in North America", x="river", y="length")
#Normality Test
lillie.test(rivers)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(rivers)$lambda
# BOX-COX transformation
rivers_new <- (rivers^lambda-1)/lambda
# Plot the density
ggdensity(rivers_new,main = "Density plot of new rivers length", xlab = "x")
lillie.test(rivers_new)
library(ggpubr)
library(nortest)
library(geoR)
library(ggplot2)
library(gtools)
data(beavers)
n1 <- length(beaver1$temp)
n2 <- length(beaver2$temp)
temp_data <- data.frame(Temperature= c(beaver1$temp,beaver2$temp),
Beavers = c(rep("beaver1",n1),rep("beaver2",n2)))
#box plot
temp_data %>%
ggplot(aes(x=as.character(Beavers), y=Temperature)) +
geom_boxplot(fill="steelblue") +
labs(title="temperature of two kinds of beavers", x="beavers", y="°C")
#density plot
#ggdensity( temp_data, x = "Temperature",color = "Beavers")
temp_data %>%
ggplot(aes(x=Temperature, color = Beavers)) +
geom_density()+
labs(title="temperature of two kinds of beavers")
#Q-Q plot
temp_data %>%
ggplot(aes(sample = Temperature)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ Beavers)
#Normality Test
lillie.test(beaver1$temp)
lillie.test(beaver2$temp)
t.test(beaver1$temp, beaver2$temp, alternative="two.sided", var.equal=T)
#ex1
library(nortest)
M1 <- 29.2
sd1 <- 7.5
n1 <- 126
df1 <- n1-1
M2 <- 18.2
sd2 <-5.8
n2 <- 50
df2 <- n2-1
SE <- sqrt((df1*sd1^2 + df2*sd2^2)/(df1+df2)*(n1+n2)/(n1*n2))
t <- (M1 - M2)/SE
P_value <- (1-pt(abs(t),df=df1+df2))*2
# P_value = 0,so we have no probability getting a statistic(t),
# Police officers in the Cairo metropolitan area overall had higher levels
# of lead in their blood.
P_value
#----------------------------------------------
#ex2
library(ggplot2)
library(geoR)
data("rivers")
print(rivers)
# density plot
ggdensity(rivers, main = "Density plot of rivers",
xlab = "x", color = "blue",lwd=1.5)
ggqqplot(rivers)
ggboxplot(rivers,main = "boxplot of rivers",
xlab = "x",fill = "steelblue")
shapiro.test(rivers) # p_value < 2.2e-16
# normal transformation
lambda <- boxcoxfit(rivers)$lambda #lambda = -0.55212
new_rivers <- (rivers^lambda-1)/lambda
ggdensity(new_rivers, main="Density plot of normal transformation")
shapiro.test(new_rivers)
#----------------------------------------------
#ex3
library(ggplot2)
data("beavers")
print(beaver1 )
l1 <- length(beaver1$temp)
l2 <- length(beaver2$temp)
Beaver_temp <- data.frame(temp = c(beaver1$temp,beaver2$temp),
Beaver = c(rep("beaver1",l1),rep("beaver2",l2)))
# Visualize body temperature of the two beavers in multiple ways
Beaver_temp %>%
ggplot(aes(x=as.character(Beaver),y=temp)) +
geom_boxplot(fill="steelblue") +
labs(title="Temperature's boxplot of two beavers")
Beaver_temp %>%
ggplot(aes(x=temp,color=Beaver)) +
geom_density() +
labs(title="Temperature density plot of two beavers")
Beaver_temp %>%
ggplot(aes(sample = temp)) +
geom_qq_line() + geom_qq() +
facet_wrap(~Beaver)
#  Check the normality of the two samples
shapiro.test(beaver1$temp) # p_value = 0.01226
shapiro.test(beaver2$temp) # p_value = 7.764e-05
# H0:The temperatures of two beavers are the same
# H1:The temperatures of two beavers are different.
# H0 and H1 can not be changed.
#now we use t_test to test our hypothesis, because SDs of temperatures are generally
#unknown.
df1 <- l1-1
sd1 <- sd(beaver1$temp)
df2 <- l2-1
sd2 <- sd(beaver2$temp)
SE = sqrt((df1*sd1^2+df2*sd2^2)/(df1+df2)*(l1+l2)/(l1*l2))
t <- (mean(beaver1$temp) - mean(beaver2$temp))/SE
P_value <- (1-pt(abs(t),df = df1+df2))*2
print(P_value)
# P_value = 0, so we can not accept H0, the body temperatures of beaver2 are higher
# then beaver1.
t.test(beaver1$temp,beaver2$temp,alternative = "two.sided", var.equal = F)
# P_value < 2.2e-16
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
