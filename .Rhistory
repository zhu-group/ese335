scale_fill_manual(values = c("red", "red", "red"),
labels=c("Background", "Rural","Urban"), name=NULL)
# Site information
Site_name <- c("1车公庙", "2岗厦", "3石厦", "4笔架山南", "5中航工业区","6梅林","7新洲大楼")
Site_lon  <- c(114.00622646620597,114.06783414617605,114.05630308784956,
114.08441742189852,113.99230543497998,114.02628221926523,114.04905562526959)
Site_lat  <- c(22.527941445751953,22.532899476769725,22.52495088014,
22.560143541828648,22.543204469430147,22.55898503194384,22.526812602729873)
Site_type <- c("Low", "High", "High", "Middle", "High","High","Middle")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
# Get the lat and lon range
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=15, maptype="terrain-background")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("red", "red", "red"),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Background", "Rural","Urban"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Site information
Site_name <- c("1车公庙", "2岗厦", "3石厦", "4笔架山南", "5中航工业区","6梅林","7新洲大楼")
Site_lon  <- c(114.00622646620597,114.06783414617605,114.05630308784956,
114.08441742189852,113.99230543497998,114.02628221926523,114.04905562526959)
Site_lat  <- c(22.527941445751953,22.532899476769725,22.52495088014,
22.560143541828648,22.543204469430147,22.55898503194384,22.526812602729873)
Site_type <- c("Low", "High", "High", "Middle", "High","High","Middle")
# Make a data frame
Site_data <- data.frame(name=Site_name, lon=Site_lon, lat=Site_lat, type=Site_type)
# Get the lat and lon range
Mapbox    <- make_bbox(lon = Site_data$lon, lat = Site_data$lat, f = .1)
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=15, maptype="terrain-background")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("red", "red", "red"),
labels=c("Low", "Middle","High"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Low", "Middle","High"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("green", "blue", "red"),
labels=c("Low", "Middle","High"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("Low", "Middle","High"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("red", "blue", "green"),
labels=c("High", "Low","Middle"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("High", "Low","Middle"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
# Pull the base map, ***you may need a VPN to download the base map ***
# The keyword zoom defines the map resolution
Base_map  <- get_map(location=Mapbox, zoom=14, maptype="terrain-background")
# Plot
ggmap(Base_map) +
# Add sites
geom_point(data=Site_data, aes(x=lon, y=lat, fill=type, shape=type),
color="white", cex=5.5) + # plot the points
# Change color
scale_fill_manual(values = c("red", "blue", "green"),
labels=c("High", "Low","Middle"), name=NULL) +
# Change shape
scale_shape_manual(values = c(21,22,24),
labels=c("High", "Low","Middle"), name=NULL) +
# Change labels and title
labs(x="Latitude", y="Longitude", title="Monitoring sites") + # label the axes
# Change theme
theme_bw() +
theme(legend.position="bottom",
legend.key  = element_rect(colour = "white"),
axis.text   = element_text(size = rel(0.75)),
axis.text.x = element_text(angle=45, vjust=0.5))
sc <- c(79,86,72,95,87,85,84,91,92,68,87,90,93,87,90)
shapiro.test(sc)
hist(sc)
sc <- c(79,86,72,95,87,85,84,91,92,87,90,93,87,90)
shapiro.test(sc)
280*7
280*7*100
280*100
280*100/10000
280*100/10000*7
20000/7
20000/7/100
1600/20000
1600/20000
(205/375)*700+(400/750)*300
(220/375)*700+(400/750)*300
(220/375)*700+(350/750)*300
(220/375)*700+(300/750)*300
(220/375)*700
(220/375)*700+(300/750)*300
(220/375)*700+(350/750)*300
(280/375)*700+(350/750)*300
(280/375)*700
(220/375)*700
519-(220/375)*700
(519-(220/375)*700)/300*750
(280/375)*700+(389/750)*300
(220/375)*700+(389/750)*300
(250/375)*700+(389/750)*300
(220/375)*700+(389/750)*300
(220/375)*700+(450/750)*300
(220/375)*700+(500/750)*300
(280/375)*700+(500/750)*300
(280/375)*700+(400/750)*300
(250/375)*700+(400/750)*300
(250/375)*700+(390/750)*300
(220/375)*700+(500/750)*300
(220/375)*700+(550/750)*300
(220/375)*700+(389/750)*300
(250/375)*700+(389/750)*300
(260/375)*700+(389/750)*300
(206/375)*700+(320/750)*300
4522/93000
4522/34766
6/28
5/28
43767*12
43767*12*1.04
43767*12*1.04/12
43767*12*1.04*1.04/12
43767*12*1.04*1.04
43767*12*1.04*1.04*1.04
43767*12*1.04*1.04*1.04*1.05
340*330/1.6/3600
340*330/1024
340*330/1024/1.6
340*330/1.6
340*330/1.6/3600
13*334
37.5-9-6.5-21
9+6.5+21
49.5/4
20*3.6
20*3.6*10
52*1.01*1.04
52*1.01*1.04*1.04
60/12
60/12*4.2
60/12*4.2+60
60/12*4.2+60+12
52/12*4.2+52
2000*100
43767*1.04
43333*1.01
45517*1.04
45517*1.04^2
45517*1.04^3
43767*1.04
43767*1.03
43767*1.02
43767*1.03
43767*1.025
43767*1.03
43767*1.04
45078*12
2622/43767
43767*0.04
43767*1.04
43767+2662
43767*1.04-45078
45078/43767
45079/43767
45079-43767
45078-43767
43333+866
43333+433
546376+5490*12
546376+5490*12+6
546376+5490*12+60000
546376+5490*12+60000+8000
546376+5490*12+60000+8000+190000
546376+5490*12+60000+8000+43767*4.2
45078-43767
1311*12
1311*12*1.4
688*0.6
52/12*4+52
35*1.4
40*1.4
40*1.4*3
40/12
sample(seq(1,7))
load("~/My.RData")
2661*0.6
55*1.08
84/3/4
30/2/3
442/9*15
2600*0.5
1266/2700
700/2700
100*2000
100*2000/1e4
239800+222935
install.packages("reticulate")
devtools::install_github("rstudio/reticulate")
library(reticulate)
install_miniconda()
library(reticulate)
install_miniconda()
install_miniconda()
install_miniconda()
library(reticulate)
8336.4*12
8336+5000+4000
8336+5000+4500
400/600
1e-6*0.028*0.08205*298
1e-6*0.028*0.08205*298*12e-9*6.02e23
150e-9*6.02e23*1e-4/24
150e-9*6.02e23*1e-4/24*0.6*2
2500*0.25
1200/2600
2600*0.25
1e-3*1e23*1e-4*2*16/12/6/24
15*12/60
15*11/60
23+25+19+23
23+20+25+22
25+22+23+22
22+24+23+23
23+24+25+22
20+22+22+23
23+22+25+24
25+22+20+21
24+22+23+23
23+18+24+21
16+602+284+503+134+15+450+283+139+734+149+7+616+314+623+629+154+5+478+313+5+473+308
7300*12
x + y
ls
select(seq(1,9),3)
sample(seq(1,9),3)
c(7, 7, NA)
sample(seq(1,9),4)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=100, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
# Drawing a sample (n=100) from a normal distribution
sample1 <- rnorm(n=10000, mean=0, sd=1)
# OK, let's take a quick look at the data
hist(sample1)
library(moments)
skewness(sample1)
kurtosis(sample1)
z <- c( rnorm(10,0,1), runif(50, 1, 2) )
hist(z)
mean(z)
sd(z)
skewness(z)
sample <- c()
for(i in 1:10){
sample <- c(sample, i)
}
print(sample)
sample <- c()
for(i in 1:10){
sample <- c(sample, i)
print(sample)
}
# Central Limit Theorem
Simulations <- 100000
Samle_size  <- 100
Sample_mean <- c()
# We draw samples form a unifrom distribution
sample <- runif(Samle_size, min = 0, max = 10)
for(i in 1:Simulations){
# Sample from a distribution
sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Central Limit Theorem
Simulations <- 10000
Samle_size  <- 100
Sample_mean <- c()
# We draw samples form a unifrom distribution
sample <- runif(Samle_size, min = 0, max = 10)
for(i in 1:Simulations){
# Sample from a distribution
sample <- runif(Samle_size, min = 0, max = 10)
# Compute the sample average
average <- mean(sample)
# Store the sample average
Sample_mean <- c(Sample_mean, average)
}
# Plot hist of sample averages
hist(Sample_mean)
# Check mean, sd, and skewness
mean(Sample_mean)
sd(Sample_mean)
skewness(Sample_mean)
# Ex 1
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_diff <- mean(Obs_A) - mean(Obs_B)
print(Obs_diff)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all),length(Obs_A),Obs_all,F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
diff <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Difference
diff <- c(diff, mean_A - mean_B)
}
# Show all possible differences
print(diff)
# Plot all possible differences
hist(diff)
# Add a vertical line
abline(v=Obs_diff, col="red", lwd=5, lty=2)
# Add a vertical line
abline(v=Obs_diff*-1, col="red", lwd=5, lty=2)
# So the p-value is:
length(which(diff<=Obs_diff))/length(diff)
# So the p-value is:
length(which(diff>=Obs_diff))/length(diff)
diff
Obs_diff
# Ex 1
# Need `gtools` package
library(gtools)
# Obs from group A
Obs_A   <- c(2.0, 3.0, 4.0, 5.0, 6.0)
# Obs from group B
Obs_B   <- c(1.0, 2.0, 3.0, 4.0)
# Compute the difference, d
Obs_diff <- mean(Obs_A) - mean(Obs_B)
print(Obs_diff)
# Given H0 is true, we assume that A and B are from the same population
# So the total possible groupings for A is C(6,3)
Obs_all     <- c(Obs_A, Obs_B)
Groupings_A <- combinations(length(Obs_all),length(Obs_A),Obs_all,F)
# Show all possible groupings of A
print(Groupings_A)
# Make an empty list
diff <- c()
# Loop all possible grouping methods for A
for(i in 1:dim(Groupings_A)[1]){
# Mean of group A
mean_A <- mean(Groupings_A[i,])
# Mean of group B
mean_B <- (sum(Obs_all)-sum(Groupings_A[i,]))/length(Obs_B)
# Difference
diff <- c(diff, mean_A - mean_B)
}
# Show all possible differences
print(diff)
# Plot all possible differences
hist(diff)
# Ex1, H0 states "greater"
abline(v=Obs_diff, col="red", lwd=5, lty=2)
# So the p-value is:
length(which(diff>=Obs_diff))/length(diff)
# So the p-value is:
length(which(diff<=Obs_diff))/length(diff)
# So the p-value is:
length(which(diff>Obs_diff))/length(diff)
# Ex2, H0 states "has impact"
hist(diff)
abline(v=Obs_diff, col="blue", lwd=5, lty=2)
abline(v=Obs_diff*-1, col="blue", lwd=5, lty=2)
# So the p-value is:
length(which(diff>=Obs_diff))/length(diff) + length(which(diff<=Obs_diff*-1))/length(diff)
library(BSDA)
library(ggplot2)
library(FSA)
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 18.03)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 20.02, 8.05, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
Girls     <- c(6.11, 18.25, 13.18, 18.03)
Boys   <- c(100.14, 31.94, 26.76, 34.86, 20.02, 8.05, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 18.03)
Boys   <- c(31.94, 26.76, 34.86, 20.02, 8.05, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 8.05, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02)
Boys   <- c(31.94, 26.76, 34.86, 18.03, 8.05, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05,)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05,)
Boys   <- c(31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05,)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05)
Boys   <- c(31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
# Make up samples
Girls     <- c(6.11, 18.25, 13.18, 20.02,8.05)
Boys   <- c(1.14, 31.94, 26.76, 34.86, 18.03, 21.66 )
# Perform the Mann Whitney U test
wilcox.test(Girls, Boys, paired=F, alternative="two.sided")
load(rivers)
data(rivers)
ls()
rivers
data(beaver1)
ls()
data(beavers)
ls()
setwd("C://ese335")
rmarkdown::render_site()
ls()
beaver1
setwd("C://ese335")
rmarkdown::render_site()
