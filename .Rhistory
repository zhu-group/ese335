1 + 1
1
2 * 2
(1 + 2) * 2
x <- all.equal(1, 1+1e-5)
x
print(x)
if(x){print(1)}
installed.packages(dplyr)
installed.packages(tidyr)
# Define the function FindTop()
FindTop        <- function(N){
MoviePage  <- readLines('https://movie.douban.com/top250', encoding='UTF-8')
Pattarn    <- '<span class=\"title\">&nbsp;/&nbsp;([^<]*)</span>'
Lines      <- grep(Pattarn, MoviePage, value=TRUE)
Lines      <- sub(Pattarn,  '\\1', Lines )
Names      <- sub('^ *', '', Lines)
Names      <- sub('&#39;', "'", Names)
print(Names[1:N])
}
# Call the function with arguement 5 and 10
FindTop(5)
FindTop(10)
FindTop(25)
which(1==1)
which(1==1 && 2==2)
which(x==1 && x==2)
x <- seq(1,10,1)
which(x==1 && x==2)
x==1
library(ggplot2)
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from Mar.
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
str(global_cases_ts)
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
forecast_15days
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
COVID_tbl2
tail(COVID_tbl2)
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
(500064-462259)/462259
(500064-462259)/462259*100
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 15
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# 1st day
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
tail(COVID_tbl2)
# Nov. 09:
# Predicted value: 500,064 (455,177, 549,378)
# Real value: 462,259
# Relative bias: 8.2%
model
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
13*13/60
2*24*3600*3/1000
2*24*3600*1/1000
43333*0.02
43333*0.02*2*1.2
43333*0.02*(1+2*1.2)
43333*1*(1+2*1.2)
43333*(1+2*1.2)
43333*0.5*(1+2*1.2)
43333*0.55*(1+2*1.2)
43333*1.01*0.5*(1+2*1.2)
43333*1.8
43333*1.8*1.01
43333*1.2*1.01
43333*1.01
52*1.01/12*1.8
52*1.01/12*1.8*10000
52*1.01/12*3*10000
436197.11+39600.30+118381.3
43,767*12
43767*12
13*13/60
15*13/60
14*13/60
205/375*700
205/375*700+349/750*300
205/375*700+399/750*300
205/375*700+499/750*300
205/375*700+599/750*300
205/375*700+550/750*300
255/375*700+399/750*300
245/375*700+399/750*300
235/375*700+399/750*300
240/375*700+399/750*300
700*375
300/750
700/375
(700/375/(300/750))
375*0.6
375*0.7
205/375*700+550/750*300
205/375*700+540/750*300
205/375*700+545/750*300
205/375*700+350/750*300
235/375*700+350/750*300
245/375*700+350/750*300
250/375*700+350/750*300
245/375*700+350/750*300
250/375*700+350/750*300
250/375*700+360/750*300
240/375*700+360/750*300
245/375*700+360/750*300
250/375*700+360/750*300
250/375*700+350/750*300
250/375*700+350/750*300
7665*12
7665*13
5509+489
(44-72)/72
(167-139)/139
52*(1+3.8/12)+6+32
library(tidyr)
library(dplyr)
library(gplot2)
library(ggplot2)
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv", header = T)
head(Keeling_Data)
setwd("D://ese335")
Keeling_Data <- read.csv(file = "co2_mm_mlo.csv", header = T)
head(Keeling_Data)
as_tibble(Keeling_Data)
Keeling_Data_tbl <- as_tibble(Keeling_Data)
Keeling_Data_tbl
View(Keeling_Data_tbl)
select(Keeling_Data_tbl,co2)
select(Keeling_Data_tbl,co2,year)
select(Keeling_Data_tbl,co2,year)
select(Keeling_Data_tbl,co2)
Keeling_Data_tbl %>%
select(co2)
filter(Keeling_Data_tbl,year>200)
Keeling_Data_tbl %>%
select(co2) %>%
filter(year >=1990 )
Keeling_Data_tbl %>%
select(co2,year) %>%
filter(year >=1990 )
Keeling_Data_tbl %>%
select(co2,year) %>%
filter(year >= 1990 )
Keeling_Data_tbl %>%
select(co2,year) %>%
filter(year >= 1990 ) %>%
filter(co2 > 400)
Keeling_Data_tbl %>%
filter(quality == 1)
Keeling_Data_tbl
Keeling_Data_tbl %>%
filter(quality == 1)
Keeling_Data_tbl %>%
filter(quality == 1) %>%
select(month)
Keeling_Data_tbl %>%
filter(quality == 1) %>%
group_by(month)
Keeling_Data_tbl %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(month_mean=mean(co2))
Keeling_Data_tbl %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean=mean(co2))
Keeling_Data_tbl %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize(monthly_mean=mean(co2)) %>%
arrange(monthly_mean)
Keeling_Data_tbl %>%
filter(quality == 1) %>%
group_by(month) %>%
summarize( monthly_mean=mean(co2), monthly_min=min(co2),
monthly_max=max(co2), monthly_sd=sd(co2) )
Keeling_Data_tbl %>%
mutate(co2_new = co2*1000 )
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA) )
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, col=month)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA)) %>%
# Make the plot
ggplot(aes(x=decimal_date, y=co2_new, col=month)) +
geom_line() +
facet_wrap(~ month)
New_tib <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
New_tib
# Notice we use pull() to get a vector from a tibble
Month_CO2 <- Keeling_Data_tbl %>%
pull(co2_new)
# Add a new column to the original tibble
Keeling_Data_tbl <- Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA))
# Notice we use pull() to get a vector from a tibble
Month_CO2 <- Keeling_Data_tbl %>%
pull(co2_new)
# Notice we use pull() to get a vector from a tibble
Month_CO2 <- Keeling_Data_tbl %>%
pull(co2_new)
Month_CO2
# plot hist
hist(Month_CO2)
# plot hist
hist(Month_CO2)
hist(Month_CO2,
xlab = "Monthly CO2 mixing ratios (ppm)",
main = "Histogram of Monthly CO2",
breaks = 20,
col = "blue",
border = "red")
box(lwd=2,col="green")
boxplot(Month_CO2)
boxplot(co2_new ~ month, data=Keeling_Data_tbl)
plot(co2_new ~ year, data=Keeling_Data_tbl)
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 2,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 0.2,
col = "navy")
plot(co2_new ~ year, data=Keeling_Data_tbl,
xlab = "Year",
ylab = "CO2 (ppm)",
main = "CO2 vs Year",
pch = "+",
cex = 1,
col = "navy")
obs <- c(1, 1, 6, 13, 13, 14, 14,
14, 16, 17, 18, 18, 19, 19,
20, 21, 22)
summary(obs)
boxplot(obs)
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA) ) %>%
group_by(year) %>%
summarize(annual_co2=mean(co2)) %>%
ggplot(aes(x=decimal_date, y=annual_co2)) +
geom_line()
Keeling_Data_tbl
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA) )
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA) ) %>%
group_by(year) %>%
summarize(annual_co2=mean(co2)) %>%
ggplot(aes(x=year, y=annual_co2)) +
geom_line()
Keeling_Data_tbl %>%
mutate(co2_new = ifelse(quality==1, co2, NA) ) %>%
group_by(year) %>%
summarize(annual_co2=mean(co2_new)) %>%
ggplot(aes(x=year, y=annual_co2)) +
geom_line()
Keeling_Data_tbl %>%
filter(quality == 1) %>%
group_by(year) %>%
summarize(annual_co2=mean(co2)) %>%
ggplot(aes(x=year, y=annual_co2)) +
geom_line()
Keeling_Data_tbl %>%
filter(quality==1, year>=1959)
Keeling_Data_tbl %>%
filter(quality==1, year>=1959) %>%
group_by(year) %>%
summarize(annual_mean=mean(co2)) %>%
ggplot(aes(x=year, y=annual_mean)) +
geom_line()
