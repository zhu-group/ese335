xlab = "x", color ="blue", lwd=1.5)
# Sample 5 is from a log-normal distribution
sample6  <- log(sample5)
# Plot density function of sample 1
ggdensity(sample6, main = "Density plot of sample 6",
xlab = "x", color ="blue", lwd=1.5)
# Generate a sample
y <- exp(runif(30,0,1)+runif(30,0,1)+runif(30,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y)
# Lilliefors test
lillie.test(y)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(y)$lambda
# BOX-COX transformation
y_new <- (y^lambda-1)/lambda
# Plot the density
ggdensity(y_new,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y_new)
# Lilliefors test
lillie.test(y_new)
#---------------------------
# In class exe.
# Ex 1
sample_e1 <- c(0.6, -1.0, -0.5, 0.9, -0.4,
0.9, 0.6, -0.2, 0.1, 0.7, 0.4,
-0.5, 1.2, 0.1, 0.6, -1.3,
0.9, 1.1, 0.2, 0.1)
# Plot the density
ggdensity(sample_e1, main = "Density plot of sample", xlab = "x")
library(ggpubr)
library(nortest)
library(geoR)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
density1 <- dnorm(x, 0, 1)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0,1)", col="black",   cex=2)
text(-4, 0.30, "N(1,1)", col="blue",  cex=2)
text(-4, 0.25, "N(0,9)", col="red", cex=2)
# Sample 1 is from a normal distribution
sample1  <- rnorm(200, 0, 1)
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
# Plot density function of sample 1
ggdensity(sample1, main = "Density plot of sample 1",
xlab = "x", color ="blue", lwd=1.5)
# Plot density function of sample 2
ggdensity(sample2, main = "Density plot of sample 2",
xlab = "x", color ="red", lwd=1.5)
# QQ plot of sample1
ggqqplot(sample1)
# QQ plot of sample2
ggqqplot(sample2)
# Sample 3 is from a normal distribution
sample3  <- sample1[1:25]
# Sample 4 is from a uniform distribution
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
sample4  <- sample2[1:25]
# Shapiro-Wilk test of sample 3
shapiro.test(sample3)
# Shapiro-Wilk test of sample 4
sample2  <- runif(200, 0, 1)
sample4  <- sample2[1:25]
shapiro.test(sample4)
# Lilliefors test of sample 1
lillie.test(sample1)
# Lilliefors test of sample 2
lillie.test(sample2)
# Sample 5 is from a log-normal distribution
sample5  <- exp(rnorm(200, 0, 1))
# Plot density function of sample 1
ggdensity(sample5, main = "Density plot of sample 5",
xlab = "x", color ="blue", lwd=1.5)
# Sample 5 is from a log-normal distribution
sample6  <- log(sample5)
# Plot density function of sample 1
ggdensity(sample6, main = "Density plot of sample 6",
xlab = "x", color ="blue", lwd=1.5)
# Generate a sample
y <- exp(runif(30,0,1)+runif(30,0,1)+runif(30,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y)
# Lilliefors test
lillie.test(y)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(y)$lambda
# BOX-COX transformation
y_new <- (y^lambda-1)/lambda
# Plot the density
ggdensity(y_new,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y_new)
# Lilliefors test
lillie.test(y_new)
#---------------------------
# In class exe.
# Ex 1
sample_e1 <- c(0.6, -1.0, -0.5, 0.9, -0.4,
0.9, 0.6, -0.2, 0.1, 0.7, 0.4,
-0.5, 1.2, 0.1, 0.6, -1.3,
0.9, 1.1, 0.2, 0.1)
# Plot the density
ggdensity(sample_e1, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e1)
# Test normality
shapiro.test(sample_e1)
#--------------
# Ex 2
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8,
95.0, 87.0,
81.2, 68.5, 47.3, 41.1, 36.6, 29.0,
28.6, 26.3, 26.0, 24.4,
21.4, 17.3,
11.5, 4.9, 4.9, 1.0)
length(sample_e2)
# Try this by yourself
#sample_new <- log(sample)
# Plot the density
ggdensity(sample_e2, main = "Density plot of sample", xlab = "x")
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8,
95.0, 87.0,
81.2, 68.5, 47.3, 41.1, 36.6, 29.0,
28.6, 26.3, 26.0, 24.4,
21.4, 17.3,
11.5, 4.9, 4.9, 1.0)
length(sample_e2)
ggdensity(sample_e2, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e2)
# Test normality
shapiro.test(sample_e2)
# Try this by yourself
sample_new <- log(sample)
sample
# Try this by yourself
sample_new <- log(sample_e2)
# Plot the density
ggdensity(sample_new, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_new)
# Test normality
shapiro.test(sample_new)
#----------
# Ex 4
# Generate a sample
sample_e4<- c(rnorm(10,0,1), rnorm(10,10,1))
ggdensity(sample_e4, main = "Density plot of sample", xlab = "x")
# in ug/m3
con <- c(22, 65, 25, 7)
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
con*sens/sum(sens*con)
# in ug/m3
con <- c(22, 65, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens)*0.00940-1
impact
# Contribution
impact <- exp(con*sens*0.00940)-1
impact
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 80, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# 20% 24% 50% 6%
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 165, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 120, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 160, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# 20% 24% 50% 6%
impact*100*10/86.18349
sum(impact*100*10/86.18349)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Sample size
n        <- length(Sample)
n
# Spectrophotometer error SD
SD       <- 10
# Get Z-ratio
Z        <- (mean(Sample) - Baseline) / (SD/sqrt(n))
Z
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we use 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
print(P_value)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Sample size
n        <- length(Sample)
# Spectrophotometer error SD
SD       <- 20
# Get Z-ratio
Z        <- (mean(Sample) - Baseline) / (SD/sqrt(n))
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we use 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "t (df=5)", col="blue",  cex=2)
text(-4, 0.25, "t (df=2)", col="red", cex=2)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t and standard normal distributions")
# Compute and plot the density from the normal distribution
density4  <- dnorm(x, mean = 0, sd = 1)
lines(x, density4, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "N(0,1)", col="red", cex=2)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Get sample size and degrees of freedom
n        <- length(Sample)
df       <- n - 1
# SE of the sample mean
SE       <- sd(Sample)/sqrt(n)
SE
# Get t-ratio
t        <- (mean(Sample) - Baseline ) / SE
t
# Find the one-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here t).
# Here we that 1-pt to get the probability that the
# variable takes a value higher than the threshold (t).
P_value  <- 1 - pt(t, df=df)
print(P_value)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Call t.test function
# Here we compare the sample mean with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(Sample, mu=70, alternative ="greater")
?t.test()
library(ggpubr)
library(nortest)
#--------------------------------------
# EX 1
library(ggpubr)
library(nortest)
library(geoR)
# Sample
Sample   <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample) # p-value > 0.05, normal
# SD of Population is unknown, so use t-test
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=4.55)
sample(seq(1,11),1)
library(ggpubr)
library(nortest)
library(geoR)
# Sample
Sample   <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample) # p-value > 0.05, normal
# SD of Population is unknown, so use t-test
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=4.55)
# Sample
Sample   <- c(199, 202, 202, 198, 196, 197, 201,
203, 198, 204, 201, 203, 201, 203,
203, 202, 197, 200, 201, 197)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample)
# p-value > 0.05, normal, good to do t-test
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=200, alternative = 'greater')
library(ggpubr)
library(nortest)
library(ggplot2)
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
# Shenzhen population sigma
SZ_sigma  <- 2.0
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
GZ_n      <- length(GZ_PM2.5)
# Guangzhou population sigma
GZ_sigma  <- 3.0
# Make data frame, create a data table
PM2.5_data <- data.frame(PM2.5 = c(SZ_PM2.5, GZ_PM2.5),
City = c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n)))
# Compare boxplots
# %>% means pipe
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
# Check normality - density plot
PM2.5_data %>%
ggplot(aes(x=PM2.5, color=City)) +
geom_density()
# Check normality - qqplot
PM2.5_data %>%
ggplot(aes(sample = PM2.5)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ City)
# Check normality Shapiro-Wilk test
shapiro.test(SZ_PM2.5)
# Check normality Shapiro-Wilk test
shapiro.test(GZ_PM2.5)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
# Find the two-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |Z|).
P_value   <- (1-pnorm(abs(Z), mean=0, sd=1))*2
print(P_value)
#---------------------------------------------------
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the sample difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(P_value)
#------------------------------------------
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Call t.test function
# Since H1 states a different PM2.5 value in Shenzhen,
# we need to compute the two-sided p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided", var.equal=T)
#-----------------------------------------------------
# EX 1
# Observations from Lab1
Lab1  <- c(14.7, 14.8, 15.2, 15.6)
# Observations from Lab2
Lab2  <- c(14.6, 15.0, 15.2)
# Call t.test function
# Since H1 states different readings from two labs,
# we need to compute the two-sided p-value
t.test(Lab1, Lab2, alternative="two.sided", var.equal=T)
# COD from river A
COD_A  <- c(915.4, 789.3, 828.2, 811.4, 832.4, 841.7, 871.6,
830.8, 884.5, 847.5, 841.4, 936.7, 977.0, 825.2, 707.9)
# COD from river B
COD_B  <- c(804.0, 779.8, 749.3, 877.4, 753.8, 778.6, 807.5,
913.3, 784.8, 659.7)
# Make data frame, create a data table
COD_data <- data.frame(COD = c(COD_A, COD_B),
River = c(rep("River A",length(COD_A)),
rep("River B",length(COD_B))))
# Compare boxplots
COD_data %>%
ggplot(aes(x=as.character(River), y=COD)) +
geom_boxplot(fill="steelblue") +
labs(title="COD Distribution by River", x="River", y="")
# Check normality - density plot
COD_data %>%
ggplot(aes(x=COD, color=River)) +
geom_density()
# Check normality - qqplot
COD_data %>%
ggplot(aes(sample = COD)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ River)
# Check normality Shapiro-Wilk test
shapiro.test(COD_A)
# Check normality Shapiro-Wilk test
shapiro.test(COD_B)
# Go with t test!
t.test(COD_A, COD_B, alternative="two.sided", var.equal=T)
setwd("D")
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
