# Add legends
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "t (df=5)", col="blue",  cex=2)
text(-4, 0.25, "t (df=2)", col="red", cex=2)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t and standard normal distributions")
# Compute and plot the density from the normal distribution
density4  <- dnorm(x, mean = 0, sd = 1)
lines(x, density4, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "N(0,1)", col="red", cex=2)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Get sample size and degrees of freedom
n        <- length(Error)
df       <- n - 1
# SE of the average
SE       <- sd(Error)/sqrt(n)
# Get t-ratio
t        <- mean(Error)/SE
# Find the one-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here t).
# Here we that 1-pt to get the probability that the
# variable takes a value higher than the threshold (t).
P_value  <- 1 - pt(t, df=df)
print(P_value)
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(Sample, mu=70, alternative ="greater")
library(ggpubr)
library(nortest)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
Error
# Get Z-ratio
Z        <- mean(Error)/(SD/sqrt(length(Error)))
# Spectrophotometer error SD
SD       <- 10
# Get Z-ratio
Z        <- mean(Error)/(SD/sqrt(length(Error)))
Z
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we use 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
print(P_value)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "t (df=5)", col="blue",  cex=2)
text(-4, 0.25, "t (df=2)", col="red", cex=2)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t and standard normal distributions")
# Compute and plot the density from the normal distribution
density4  <- dnorm(x, mean = 0, sd = 1)
lines(x, density4, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "N(0,1)", col="red", cex=2)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Get sample size and degrees of freedom
n        <- length(Error)
df       <- n - 1
# SE of the average
SE       <- sd(Error)/sqrt(n)
# Get t-ratio
t        <- mean(Error)/SE
P_value  <- 1 - pt(t, df=df)
print(P_value)
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(Sample, mu=70, alternative ="greater")
Sample   <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample)
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=4.55)
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=4.55)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample) # p-value > 0.05, normal
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=200, alternative = 'less')
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=200, alternative = 'greater')
# Check normality with Shapiro-Wilk test
shapiro.test(Sample)
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=200, alternative = 'greater')
sd(Sample)
# Sample
Sample   <- c(199, 202, 202, 198, 196, 197, 201,
203, 198, 204, 201, 203, 201, 203,
203, 202, 197, 200, 201, 1970)
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=200, alternative = 'greater')
library(ggpubr)
library(nortest)
library(ggplot2)
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
# Shenzhen population sigma
SZ_sigma  <- 2.0
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
GZ_n      <- length(GZ_PM2.5)
# Guangzhou population sigma
GZ_sigma  <- 3.0
# Make data frame, create a data table
PM2.5_data <- data.frame(PM2.5 = c(SZ_PM2.5, GZ_PM2.5),
City = c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n)))
PM2.5_data
# Compare boxplots
# %>% means pipe
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
PM2.5_data %>%
ggplot(aes(x=PM2.5, color=City)) +
geom_density()
# Check normality - qqplot
PM2.5_data %>%
ggplot(aes(sample = PM2.5)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ City)
# Check normality Shapiro-Wilk test
shapiro.test(SZ_PM2.5)
shapiro.test(GZ_PM2.5)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
# Find the two-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |Z|).
P_value   <- (1-pnorm(abs(Z), mean=0, sd=1))*2
print(P_value)
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the sample difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(P_value)
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Call t.test function
# Since H1 states a different PM2.5 value in Shenzhen,
# we need to compute the two-sided p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided", var.equal=T)
library(ggpubr)
library(nortest)
library(ggplot2)
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
# Shenzhen population sigma
SZ_sigma  <- 2.0
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
GZ_n      <- length(GZ_PM2.5)
# Guangzhou population sigma
GZ_sigma  <- 3.0
# Make data frame, create a data table
PM2.5_data <- data.frame(PM2.5 = c(SZ_PM2.5, GZ_PM2.5),
City = c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n)))
PM2.5_data
rep("Shenzhen",SZ_n)
# Compare boxplots
# %>% means pipe
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
# Check normality - density plot
PM2.5_data %>%
ggplot(aes(x=PM2.5, color=City)) +
geom_density()
# Check normality - qqplot
PM2.5_data %>%
ggplot(aes(sample = PM2.5)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ City)
# Check normality Shapiro-Wilk test
shapiro.test(SZ_PM2.5)
# Check normality Shapiro-Wilk test
shapiro.test(GZ_PM2.5)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
# Find the two-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |Z|).
P_value   <- (1-pnorm(abs(Z), mean=0, sd=1))*2
print(P_value)
print(P_value)
# Shenzhen sample
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou sample
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the sample difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(P_value)
# Call t.test function
# Since H1 states a different PM2.5 value in Shenzhen,
# we need to compute the two-sided p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided", var.equal=T)
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided")
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided", var.euqal=T)
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided", var.equal=T)
# Observations from Lab1
Lab1  <- c(14.7, 14.8, 15.2, 15.6)
# Observations from Lab2
Lab2  <- c(14.6, 15.0, 15.2)
# Call t.test function
# Since H1 states different readings from two labs,
# we need to compute the two-sided p-value
t.test(Lab1, Lab2, alternative="two.sided", var.equal=T)
#-----------------------------------------------------
# EX 2
# COD from river A
COD_A  <- c(915.4, 789.3, 828.2, 811.4, 832.4, 841.7, 871.6,
830.8, 884.5, 847.5, 841.4, 936.7, 977.0, 825.2, 707.9)
# COD from river B
COD_B  <- c(804.0, 779.8, 749.3, 877.4, 753.8, 778.6, 807.5,
913.3, 784.8, 659.7)
# Make data frame, create a data table
COD_data <- data.frame(COD = c(COD_A, COD_B),
River = c(rep("River A",length(COD_A)),
rep("River B",length(COD_B))))
COD_data
# Compare boxplots
COD_data %>%
ggplot(aes(x=as.character(River), y=COD)) +
geom_boxplot(fill="steelblue") +
labs(title="COD Distribution by River", x="River", y="")
# Check normality - density plot
COD_data %>%
ggplot(aes(x=COD, color=River)) +
geom_density()
# Check normality - qqplot
COD_data %>%
ggplot(aes(sample = COD)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ River)
# Check normality Shapiro-Wilk test
shapiro.test(COD_A)
# Check normality Shapiro-Wilk test
shapiro.test(COD_B)
t.test(COD_A, COD_B, alternative="two.sided", var.equal=T)
mean(COD_A-COD_B)
mean(COD_A) - mean(COD_B)
# Observations from Lab1
Lab1  <- c(14.7, 14.8, 15.2, 15.6)
# Observations from Lab2
Lab2  <- c(14.6, 15.0, 15.2)
# Call t.test function
# Since H1 states different readings from two labs,
# we need to compute the two-sided p-value
t.test(Lab1, Lab2, alternative="two.sided", var.equal=T)
# Go with t test!
t.test(COD_A, COD_B, alternative="two.sided", var.equal=T)
# Findings:
# COD of River A (849.40) is statistically significant (5%)
# different from that of River B (790.82) by 58.58
library(ggpubr)
library(nortest)
library(ggplot2)
library(ggpubr)
library(nortest)
library(ggplot2)
# PM2.5 in 2019 Feb.
PM2.5_2019  <- c(53, 41, 26, 19, 26, 48, 64, 46, 42, 65, 53, 81, 51, 32, 44)
# PM2.5 in 2020 Feb.
PM2.5_2020  <- c(63, 33, 24, 19, 33, 49, 38, 28, 41, 36, 41, 43, 43, 23, 35)
# Sample difference
Diff        <- PM2.5_2020 - PM2.5_2019
# Get sample size, degrees of freedom, and sd
n           <- length(Diff)
df          <- n - 1
sd          <- sd(Diff)
# Make data frame
PM2.5_data <- data.frame(PM2.5 = c(PM2.5_2019, PM2.5_2020),
Year = c(rep("2019-02",n),rep("2020-02",n)))
# Compare boxplots
PM2.5_data %>%
ggplot(aes(x=as.character(Year), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by Year", x="Year", y="ug/m3")
# Check normality, Shapiro-Wilk test
shapiro.test(Diff)
# SE of the difference
SE          <- sd/sqrt(n)
# Get t-ratio
t           <- mean(Diff)/SE
# Find the two-sided p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value     <- (1-pt(abs(t), df=df))*2
print(P_value)
# PM2.5 in 2019 Feb.
PM2.5_2019  <- c(53, 41, 26, 19, 26, 48, 64, 46, 42, 65, 53, 81, 51, 32, 44)
# PM2.5 in 2020 Feb.
PM2.5_2020  <- c(63, 33, 24, 19, 33, 49, 38, 28, 41, 36, 41, 43, 43, 23, 35)
# Call t.test function
# Here we compare the sample average with a known mean (0)
# Since H1 states a different PM2.5 level in 2020,
# we use two-sided p-value
# Pay attention the order of two samples
t.test(PM2.5_2020, PM2.5_2019, alternative="two.sided", paired=T)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 14
density <- dt(x, df=14)
# Plot Density
plot(x, density, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t (d.f. = 14) distribution")
# Get the 2.5th percentile
p_2.5th  <- qt(0.025,df=14)
# Get the 97.5th percentile
p_97.5th <- qt(0.975,df=14)
# Add vertical lines
abline(v=p_2.5th,  col="red", lwd=2, lty=2)
text(p_2.5th-1, 0.1, as.character(round(p_2.5th,2)), col="red", cex=1.5)
abline(v=p_97.5th, col="red", lwd=2, lty=2)
text(p_97.5th+1, 0.1, as.character(round(p_97.5th,2)), col="red", cex=1.5)
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
# PM2.5 in 2019 Feb.
PM2.5_2019  <- c(53, 41, 26, 19, 26, 48, 64, 46, 42, 65, 53, 81, 51, 32, 44)
# PM2.5 in 2020 Feb.
PM2.5_2020  <- c(63, 33, 24, 19, 33, 49, 38, 28, 41, 36, 41, 43, 43, 23, 35)
# Sample difference
Diff        <- PM2.5_2020 - PM2.5_2019
# Get sample size, degrees of freedom, and sd
n           <- length(Diff)
df          <- n - 1
# Get sample size, degrees of freedom, and sd
n           <- length(Diff)
df          <- n - 1
sd          <- sd(Diff)
# Make data frame
PM2.5_data <- data.frame(PM2.5 = c(PM2.5_2019, PM2.5_2020),
Year = c(rep("2019-02",n),rep("2020-02",n)))
# Compare boxplots
PM2.5_data %>%
ggplot(aes(x=as.character(Year), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by Year", x="Year", y="ug/m3")
# Check normality, qqplot
ggqqplot(Diff)
# Check normality, Shapiro-Wilk test
shapiro.test(Diff)
# SE of the difference
SE          <- sd/sqrt(n)
# Get t-ratio
t           <- mean(Diff)/SE
# Find the two-sided p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value     <- (1-pt(abs(t), df=df))*2
print(P_value)
# Call t.test function
# Here we compare the sample average with a known mean (0)
# Since H1 states a different PM2.5 level in 2020,
# we use two-sided p-value
# Pay attention the order of two samples
t.test(PM2.5_2020, PM2.5_2019, alternative="two.sided", paired=T)
Before <-c(51, 48, 52, 62, 64, 51, 55, 60)
After <- c(46, 45, 53, 48, 57, 55, 42, 50)
t.test(Before, After, alternative="less", paired=T)
t.test(After, Before, alternative="less", paired=T)
In_situ <- c(415, 385, 378, 398, 413, 359, 391, 410, 390, 402)
Remote_sensing <- c(412, 361, 401, 432, 413, 385, 378, 412, 420, 400)
t.test(In_situ, Remote_sensing, alternative="two-sided", paired=T)
t.test(In_situ, Remote_sensing, alternative="two.sided", paired=T)
t.test(After, Before, alternative="less", paired=T)
t.test(Before, After, alternative="less", paired=T)
t.test(Before, After, alternative="greater", paired=T)
t.test(After, Before, alternative="less", paired=T)
t.test(In_situ, Remote_sensing, alternative="two.sided", paired=T)
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("C://esse335")
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
