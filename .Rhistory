#-------------------------------------
# Quick plots
# Boxplot - Chemical
ggplot(cd_data_tbl, aes(x = Chemical, y = Cd, fill = Chemical)) +
geom_boxplot() +
theme_classic()
# Boxplot - Plant
ggplot(cd_data_tbl, aes(x = Plant, y = Cd, fill = Plant)) +
geom_boxplot() +
theme_classic()
# Check independence of the dependent variable
runs.test(cd_data_tbl$Cd)
# Check normality
# Sample size > 30, use the Lilliefors test
lillie.test(cd_data_tbl$Cd)
# Check outliers
# After examining the data, we decide to keep this value
grubbs.test(cd_data_tbl$Cd)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Chemical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Chemical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
TukeyHSD(two_way_additive)
plot(TukeyHSD(two_way_additive))
# Boxplot - Physical
ggplot(cd_data_tbl, aes(x = Chemical, y = Cd, fill = Physical )) +
geom_boxplot() +
theme_classic()
# Boxplot - Physical
ggplot(cd_data_tbl, aes(x = Physical, y = Cd, fill = Physical )) +
geom_boxplot() +
theme_classic()
# Boxplot - Plant
ggplot(cd_data_tbl, aes(x = Plant, y = Cd, fill = Plant)) +
geom_boxplot() +
theme_classic()
# Check independence of the dependent variable
runs.test(cd_data_tbl$Cd)
# Check normality
# Sample size > 30, use the Lilliefors test
lillie.test(cd_data_tbl$Cd)
# Check outliers
# After examining the data, we decide to keep this value
grubbs.test(cd_data_tbl$Cd)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Physical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
TukeyHSD(two_way_additive)
plot(TukeyHSD(two_way_additive))
cd_data_tbl
cd_data_tbl$Cd[cd_data_tbl$Physical==1]
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==1])
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==1],
eq.var=T)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
eq.var=T)
summary(two_way_additive)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
eq.var=T)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
eq.var=F)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
eq.var=T)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
var.equal=T)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
var.equal = T)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
var.equal = F)
TukeyHSD(two_way_additive)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Physical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
TukeyHSD(two_way_additive)
t.test(cd_data_tbl$Cd[cd_data_tbl$Physical==1],
cd_data_tbl$Cd[cd_data_tbl$Physical==2],
var.equal = T)
summary(two_way_additive)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
# Compute covariance
cov(x,y)
# Compute covariance
cov(x,y)
cov(2x,2y)
cov(2*x,2*y)
cov(2*x,2*y)/cov(x,y)
cov(3*x,3*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
par(mfrow=c(1,1))
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
runs.test(y)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# Check outliers
grubbs.test(x)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
runs.test(y)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# Check outliers
grubbs.test(x)
grubbs.test(y)
cor.test(x, y, method="pearson",
alternative="two.sided", conf.level=0.95)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
par(mfrow=c(1,1))
# Compute covariance
cov(x,y)
cov(2*x,2*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
runs.test(y)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# Check outliers
grubbs.test(x)
grubbs.test(y)
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
#-----------------------------
# EX 1
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
# Compute Pearson Correlation Coefficient with the outlier
cor(x, y)
# Uncomment the following lines to remove the outlier
x <- x[- 11]
y <- y[- 11]
# Compute Pearson Correlation Coefficient without the outlier
cor(x, y)
# EX 1
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
plot(x, y)
#-----------------------------
# EX 2
# Make up samples
x1 <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y1 <- 2*x1+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
x2 <- x1-5.0
y2 <- -1.0*y1
x <- c(x1,x2)
y <- c(y1,y2)
plot(x,y,col="black")
points(x1,y1,col="red",cex=2)
points(x2,y2,col="blue",cex=2)
# Compute the Pearson correlation coefficient between x1 and y1.
cor(x1, y1)
# Compute the Pearson correlation coefficient between x2 and y2.
cor(x2, y2)
# Compute the Pearson correlation coefficient between x and y
cor(x, y)
#-----------------------------
# EX 3
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30, 1.00,
3.20, 0.80, 2.20, 3.20, 2.10)
UV  <- c(0.144, 0.152, 0.113, 0.025, 0.227, 0.149,
0.014, 0.158, 0.042, 0.154, 0.173, 0.095)
# Scatter plot, check linearity
plot(TOC, UV)
# Check independence of the dependent variable
runs.test(TOC)
runs.test(UV)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(TOC)
shapiro.test(UV)
# Check potential outliers
grubbs.test(TOC)
grubbs.test(UV)
# Two-sided p-value
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# TOC SHOULD be positively correlated with UV
# because of Lamber-Beers Law
cor.test(TOC, UV, method="pearson",
alternative="greater", conf.level=0.95)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,1))
# Plot original data
plot(x,y)
# Two-sided p-value
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# Scatter plot, check linearity
plot(TOC, UV)
sample(seq(1,16),1)
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
plot(x, y)
# Compute Pearson Correlation Coefficient with the outlier
cor(x, y)
# Uncomment the following lines to remove the outlier
x <- x[- 11]
y <- y[- 11]
# Compute Pearson Correlation Coefficient without the outlier
cor(x, y)
sample(seq(1,16),1)
# Make up samples
x1 <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y1 <- 2*x1+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
x2 <- x1-5.0
y2 <- -1.0*y1
x <- c(x1,x2)
y <- c(y1,y2)
plot(x,y,col="black")
points(x1,y1,col="red",cex=2)
points(x2,y2,col="blue",cex=2)
# Compute the Pearson correlation coefficient between x1 and y1.
cor(x1, y1)
# Compute the Pearson correlation coefficient between x2 and y2.
cor(x2, y2)
# Compute the Pearson correlation coefficient between x and y
cor(x, y)
# Scatter plot, check linearity
plot(TOC, UV)
# Two-sided p-value
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# TOC SHOULD be positively correlated with UV
# because of Lamber-Beers Law
cor.test(TOC, UV, method="pearson",
alternative="greater", conf.level=0.95)
# EX 3
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30, 1.00,
3.20, 0.80, 2.20, 3.20, 2.10)
UV  <- c(0.144, 0.152, 0.113, 0.025, 0.227, 0.149,
0.014, 0.158, 0.042, 0.154, 0.173, 0.095)
# Scatter plot, check linearity
plot(TOC, UV)
# Check independence of the dependent variable
runs.test(TOC)
runs.test(UV)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(TOC)
shapiro.test(UV)
# Check potential outliers
grubbs.test(TOC)
grubbs.test(UV)
# Two-sided p-value
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# TOC SHOULD be positively correlated with UV
# because of Lamber-Beers Law
cor.test(TOC, UV, method="pearson",
alternative="greater", conf.level=0.95)
library(BSDA)
library(ggplot2)
library(FSA)
# Make up samples
Treat     <- c(3, 5, 1, 4, 3, 5)
Control   <- c(4, 8, 6, 2, 1, 9)
# Perform the Mann Whitney U test
wilcox.test(Treat, Control, paired=F, alternative="two.sided")
# Perform the Mann Whitney U test
wilcox.test(Treat, Control, paired=T, alternative="two.sided")
SIGN.test(Treat, Control, alternative = "two.sided", conf.level = 0.95)
# Load data
require(graphics)
airquality
# Boxplots
ggplot(airquality, aes(x=Month, y=Ozone,
group=Month, fill=Month)) +
geom_boxplot() +
labs(title="Monthly ozone",
x="Month", y="Ozone [ppb]") +
theme_classic()
# Perform the Kruskal–Wallis test
kruskal.test(Ozone ~ Month, data = airquality)
dunnTest(Ozone ~ Month, data=airquality, method="bh")
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Perform the Spearman correlation test
cor.test(x, y, method="spearman",
alternative="two.sided", conf.level=0.95)
# Perform the Spearman correlation test
cor.test(x, y, method="kendall",
alternative="two.sided", conf.level=0.95)
# Perform the Spearman correlation test
cor.test(x, y, method="pearson",
alternative="two.sided", conf.level=0.95)
library(BSDA)
library(ggplot2)
library(FSA)
library(tidyr)
library(dplyr)
# Make up samples
Treat     <- c(3, 5, 1, 4, 3, 5)
Control   <- c(4, 8, 6, 2, 1, 9)
# Perform the Mann Whitney U test
wilcox.test(Treat, Control, paired=F, alternative="two.sided")
# Make up samples
Treat     <- c(3, 5, 1, 4, 3, 5)
Control   <- c(4, 8, 6, 2, 1, 9)
# Perform the Wilcoxon signed rank test
wilcox.test(Treat, Control, paired=T, alternative="two.sided")
SIGN.test(Treat, Control, alternative = "two.sided", conf.level = 0.95)
# Load data
require(graphics)
# Boxplots
ggplot(airquality, aes(x=Month, y=Ozone, group=Month, fill=Month)) +
geom_boxplot() +
labs(title="Monthly ozone",
x="Month", y="Ozone [ppb]") +
theme_classic()
# Perform the Kruskal–Wallis test
kruskal.test(Ozone ~ Month, data = airquality)
dunnTest(Ozone ~ Month, data=airquality, method="bh")
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Perform the Spearman correlation test
cor.test(x, y, method="spearman", alternative="two.sided", conf.level=0.95)
# Perform the Kendall correlation test
cor.test(x, y, method="kendall", alternative="two.sided", conf.level=0.95)
#------------------------------------
# EX. 1
# Soil organic matter from fileds A-H
SOM_A <- c(2.0, 2.8, 3.3, 3.2, 4.4, 3.6, 1.9, 3.3, 2.8, 1.1)
SOM_B <- c(3.5, 2.8, 3.2, 3.5, 2.3, 2.4, 2.0, 1.6)
SOM_C <- c(3.3, 3.6, 2.6, 3.1, 3.2, 3.3, 2.9, 3.4, 3.2, 3.2)
SOM_D <- c(3.2, 3.3, 3.2, 2.9, 3.3, 2.5, 2.6, 2.8)
SOM_E <- c(2.6, 2.6, 2.9, 2.0, 2.0, 2.1)
SOM_F <- c(3.1, 2.9, 3.1, 2.5)
SOM_G <- c(2.6, 2.2, 2.2, 2.5, 1.2, 1.2)
SOM_H <- c(2.5, 2.4, 3.0, 1.5)
# Make a dataframe
SOM_data  <- data.frame(SOM=c(SOM_A, SOM_B, SOM_C, SOM_D,
SOM_E, SOM_F, SOM_G, SOM_H),
Field=c(rep("Field A", length(SOM_A)),
rep("Field B", length(SOM_B)),
rep("Field C", length(SOM_C)),
rep("Field D", length(SOM_D)),
rep("Field E", length(SOM_E)),
rep("Field F", length(SOM_F)),
rep("Field G", length(SOM_G)),
rep("Field H", length(SOM_H)) ) )
# Plot boxplots
SOM_data %>%
ggplot(aes(x=Field, y=SOM, group=Field, fill=Field)) +
geom_boxplot() +
labs(title="Soil organic matter ",
x="Field", y="SOM [%]") +
theme_classic()
# Perform the Kruskal–Wallis test
kruskal.test(SOM ~ Field, data = SOM_data)
# Perform the post-hoc test to do pairwise comparison
dunnTest(SOM ~ Field, data=SOM_data, method="bh")
# Perform the Kruskal–Wallis test
kruskal.test(SOM ~ Field, data = SOM_data)
# Perform the post-hoc test to do pairwise comparison
dunnTest(SOM ~ Field, data=SOM_data, method="bh")
# Observations
Soil_conc      <- c(10, 50, 20, 30, 80, 60, 70, 40)
Uptaken_amount <- c(0.18, 1.05, 0.50, 0.61, 1.58, 1.10, 1.36, 0.77)
# Plot the scatter plot
plot(Soil_conc,Uptaken_amount)
# Compute the Pearson correlation coefficient
r              <- cor(Soil_conc, Uptaken_amount)
print(r)
# Get estimator of beta1 and beta0 manually
Beta1_hat      <- cov(Soil_conc, Uptaken_amount)/sd(Soil_conc)^2
Beta0_hat      <- mean(Uptaken_amount) - Beta1_hat*mean(Soil_conc)
Beta1_hat
Beta0_hat
# Predictions based on the linear model
Prediction     <- Beta0_hat + Soil_conc*Beta1_hat
Prediction
Uptaken_amount
# Variance analysis
SST            <- sum( (Uptaken_amount - mean(Uptaken_amount))^2 )
SSR            <- sum( (Prediction - mean(Uptaken_amount))^2   )
SSE            <- sum( (Uptaken_amount- Prediction)^2 )
# Check SST = SSR + SSE
SST - SSR - SSE
# Compute R2
R2             <- SSR/SST
# Check R2 = r2
print(R2)
r^2
# Fit a simple linear regression model between
# dependent variable (Uptaken_amount) and
# independent variable (Soil_conc)
reg            <- lm( Uptaken_amount ~ Soil_conc )
# Print details of the linear model
summary(reg)
# Print details of the linear model
summary(reg)
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30,
1.00, 3.20, 0.80, 2.20, 3.20, 2.10)
UV <- c(0.144, 0.152, 0.113, 0.025, 0.227,
0.149, 0.014, 0.158, 0.042, 0.154, 0.173,
0.095)
# Fit a simple linear regression model
reg            <- lm( UV ~ TOC )
# Print details of the linear model
summary(reg)
setwd("D://repo/ese335")
rmarkdown::render_site()
rmarkdown::render_site()
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30,
1.00, 3.20, 0.80, 2.20, 3.20, 2.10)
UV <- c(0.144, 0.152, 0.113, 0.025, 0.227,
0.149, 0.014, 0.158, 0.042, 0.154, 0.173,
0.095)
# Fit a simple linear regression model
reg            <- lm( UV ~ TOC )
# Print details of the linear model
summary(reg)
sample(seq(1,16),1)
