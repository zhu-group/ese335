Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-09-30")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
JD_end     <- yday(Date_end)
JD_start
JD_end
JD_start   <- yday(Date_start)
JD_end     <- yday(Date_end)
Number_days <- JD_end-JD_start+1
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases[1:Number_days], start=c(2020,JD_start), frequency=365)
global_cases_ts
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts, type="l")
#--------------------------------------------
# 1.7
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts_log,type="l")
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
#--------------------------------------------
# 1.8
# Take the diff, d=1
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
# Plot time series
plot(global_cases_ts_log_d1,type="l")
# Check acf and pacf
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
#--------------------------------------------
# 1.9
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
model
#--------------------------------------------
# 1.10
# Make predictions
days_forecast  <- 30
days_in_plot   <- 20
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
# Oct 01
day_forward <- yday(as.Date("2020-10-01")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Oct 31
day_forward <- yday(as.Date("2020-10-31")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# 1.10
# Make predictions
days_forecast  <- 50
days_in_plot   <- 20
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
#--------------------------------------------
# 1.11
# Get predicted values
# Oct 01
day_forward <- yday(as.Date("2020-10-01")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Oct 31
day_forward <- yday(as.Date("2020-10-31")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Read data
COVID_data2 <- read.csv(file = "COVID_2020_data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Real values at Nov 01 and 30
tail(COVID_tbl2)
# Real values at Nov 01 and 30
tail(COVID_tbl2, 30)
# Real values at Nov 01 and 30
tail(COVID_tbl2,n = 10)
# Real values at Nov 01 and 30
tail(COVID_tbl2,n = 35)
day_forward <- yday(as.Date("2020-10-01")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Real values at Nov 01 and 30
tail(COVID_tbl2, n = 35)
# Real values at Nov 01 and 30
tail(COVID_tbl2, n = 10)
#--------------------------------------------
# 1.6
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-09")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
JD_end     <- yday(Date_end)
Number_days <- JD_end-JD_start+1
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases[1:Number_days], start=c(2020,JD_start), frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts, type="l")
#--------------------------------------------
# 1.7
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts_log,type="l")
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
#--------------------------------------------
# 1.8
# Take the diff, d=1
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
# Plot time series
plot(global_cases_ts_log_d1,type="l")
# Check acf and pacf
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
#--------------------------------------------
# 1.9
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
model
#--------------------------------------------
# 1.10
# Make predictions
days_forecast  <- 50
days_in_plot   <- 20
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
#--------------------------------------------
# 1.10
# Make predictions
days_forecast  <- 350
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
#--------------------------------------------
# 1.10
# Make predictions
days_forecast  <- 35
days_in_plot   <- 20
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
# Nov 10
day_forward <- yday(as.Date("2020-11-10")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 10
day_forward <- yday(as.Date("2020-11-10")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# 1.12
# Verify the predictions
# Read data
COVID_data2 <- read.csv(file = "COVID_2020_data_new.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Real values at Nov 01 and 30
tail(COVID_tbl2, n = 10)
COVID_tbl2
# Nov 10
day_forward <- yday(as.Date("2020-11-10")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Real values at Nov 01 and 30
COVID_tbl2$dateRep=="2020-11-01"
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-01"]
# Real values at Nov 01 and 30
COVID_tbl2[which(COVID_tbl2$dateRep=="2020-11-01"),]
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-01", ]
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-10", ]
(500063.9-502287)/502287
(500063.9-502287)/502287*100
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-30", ]
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
(613331.2-516616)/516616*100
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
# Section 19
# COVID-19 daily cases
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
#1. Load the daily new cases data
COVID_data <- read.csv(file = "COVID_2020_data.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
COVID_tbl
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
COVID_tbl
COVID_tbl
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l", xlab="Date", ylab="Global cases")
# Filter the data, only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
COVID_tbl
#-------------------------------------------------------------------------------
# 4. Filter the data
#-------------------------------------------------------------------------------
# Filter the data, only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Show data
COVID_tbl
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-09")
# Get the Julian Day of the start and end date
JD_start   <- yday(Date_start)
JD_end     <- yday(Date_end)
N_days     <- JD_end - JD_start + 1
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases[1:N_days], start=c(2020,JD_start), frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by="day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds, global_cases_ts, type="l")
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
# Plot time series
plot(inds, global_cases_ts_log, type="l")
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
# Take the diff, d=1
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
# Plot time series
plot(global_cases_ts_log_d1,type="l")
# Check acf and pacf
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
# Show details of the ARIMA model
model
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 30
# Make predictions using the forecast() function
forecast_30days <- forecast(model, days_forecast)
# Plot
plot(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Plot
plot.ts(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 30
# Make predictions using the forecast() function
forecast_30days <- forecast(model, days_forecast)
# Plot
plot.ts(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 30
# Make predictions using the forecast() function
forecast_30days <- forecast(model, days_forecast)
# Plot
plot(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
forecast(model, days_forecast)
forecast(best_model, days_forecast)
# Automated forecasting using an ARIMA model
best_model <- auto.arima(global_cases_ts_log)
# Show details of the ARIMA model
best_model
#-------------------------------------------------------------------------------
# 9. Make predictions
#-------------------------------------------------------------------------------
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 30
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="l", lwd=2)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
days_in_plot
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
forecast_30days
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast_30days, include=days_in_plot, xaxt = "n",
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
axis(1, forecast_30days$Point, format(forecast_30days$Point, "%b %d"), cex.axis = .7)
forecast_30days$Point
forecast_30days
dim(forecast_30days)
str(forecast_30days)
forecast_30days$x
# Plot
plot(forecast_30days, include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Plot
plot(forecast_30days, include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
forecast_30days$x
forecast_30days$x*365
start=c(2020,JD_start)
format(forecast_30days$x*365)
as.Date(forecast_30days$x*365)
forecast_30days$x*365
4096.429/365
1/365
4109.874-4096.429
forecast_30days
forecast_30days$x
seq(Date_start,Date_end)
seq(Date_start,Date_end,by=1)
forecast_30days$x
str(seq(Date_start,Date_end,by=1))
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 30
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast_30days, include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
0.05*365
# Plot
plot(forecast_30days,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Plot
plot(forecast_30days,
xlab="Time", ylab="log(global cases)", type="l", lwd=2)
# Plot
plot(forecast_30days, x= seq(Date_start,Date_end,by=1),
xlab="Time", ylab="log(global cases)", type="l", lwd=2)
forecast_30days
#-------------------------------------------------------------------------------
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Number of days to predict
days_forecast  <- 10
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
# Get predicted values on Nov 10, 2020
day_forward <- yday(as.Date("2020-11-10")) - yday(Date_end)
exp(forecast_30days$mean[day_forward])
exp(forecast_30days$lower[day_forward,1])
exp(forecast_30days$upper[day_forward,1])
Date_end
day_forward
# Get predicted values on Nov 30, 2020
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_30days$mean[day_forward])
exp(forecast_30days$lower[day_forward,1])
exp(forecast_30days$upper[day_forward,1])
# Number of days to predict
days_forecast  <- 30
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_30days <- forecast(best_model, days_forecast)
# Plot
plot(forecast(best_model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)", type="o", lwd=2)
#-------------------------------------------------------------------------------
# 10. Get predicted values
#-------------------------------------------------------------------------------
# Get predicted values on Nov 10, 2020
day_forward <- yday(as.Date("2020-11-10")) - yday(Date_end)
exp(forecast_30days$mean[day_forward])
exp(forecast_30days$lower[day_forward,1])
exp(forecast_30days$upper[day_forward,1])
# Get predicted values on Nov 30, 2020
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_30days$mean[day_forward])
exp(forecast_30days$lower[day_forward,1])
exp(forecast_30days$upper[day_forward,1])
# Verify the predictions
# Read data
COVID_data2 <- read.csv(file = "COVID_2020_data_new.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Verify the predictions
# Read data
COVID_data2 <- read.csv(file = "COVID_2020_data_new.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-10", ]
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-30", ]
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep==c("2020-11-10","2020-11-30"), ]
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep==c("2020-11-10","2020-11-30"), ]
# Real values at Nov 01 and 30
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-10", ]
COVID_tbl2[COVID_tbl2$dateRep=="2020-11-30", ]
day_forward <- yday(as.Date("2020-11-10")) - yday(Date_end)
exp(forecast_30days$mean[day_forward])
exp(forecast_30days$lower[day_forward,1])
exp(forecast_30days$upper[day_forward,1])
# Get predicted values on Nov 30, 2020
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_30days$mean[day_forward])
exp(forecast_30days$lower[day_forward,1])
exp(forecast_30days$upper[day_forward,1])
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
