# Get Pearson correlation coefficient and relative mean bias
cor_temp <- cor(pred[,1],cpus_validation$perf)
# Get relative mean bias
mean_bias          <- mean(pred[,1]) - mean(cpus_validation$perf)
relative_bias_temp <- mean_bias/mean(cpus_validation$perf)*100
# Store
correlation_all   <- c(correlation_all, cor_temp)
relative_bias_all <- c(relative_bias_all, relative_bias_temp)
}
# Mean Pearson correlation coefficient
hist(correlation_all)
abline(v=mean(correlation_all), col="red")
mean(correlation_all) # ~ 0.90, not bad
# Mean relative mean bias
hist(relative_bias_all)
abline(v=mean(relative_bias_all), col="blue")
mean(relative_bias_all) # 1-2%, very good!
# Mean relative mean bias
hist(relative_bias_all)
abline(v=mean(relative_bias_all), col="blue")
mean(relative_bias_all) # 1-2%, very good!
# Mean relative mean bias
hist(relative_bias_all)
abline(v=mean(relative_bias_all), col="blue")
mean(relative_bias_all) # 1-2%, very good!
library(ggplot2)
library(GGally)
library(olsrr)
# Read ozone and meteorological data
Ozone_data <- read.csv(file = "ozone_data.csv", header=T)
# Check the data
str(Ozone_data)
# Plot scatter plots
ggpairs(Ozone_data, columns=1:5)
#----------------------------------------------------------------------
# Fit the full model, where all independent variables are included
full_model  <- lm(Ozone ~ Solar.Rad + Wind.Speed + Temperature + Pressure, data = Ozone_data)
full_model
summary(full_model)
output      <- ols_step_all_possible(full_model)
# Print results from all possible subsets
output
output      <- ols_step_all_possible(full_model)
# Print results from all possible subsets
output
# Plot results from all possible subsets
plot(output)
# Plot results from all possible subsets
plot(output)
#----------------------------------------------------------------------
ols_step_best_subset(full_model)
ols_step_backward_aic(full_model, details=T)
ols_step_forward_aic(full_model, details=F)
ols_step_forward_aic(full_model, details=T)
ols_step_both_aic(full_model, details=F)
reg <- lm(Ozone ~ Solar.Rad + Wind.Speed + Temperature , data = Ozone_data)
summary(reg)
par(mfrow = c(2, 2))
plot(reg)
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(reg)
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(reg)
par(mfrow = c(1, 1))
# Make confidence band
predict(reg, interval="confidence", level=0.95)
# Make prediction band
predict(reg, interval="prediction", level=0.95)
q1 <- c(100, 50, 100, 100, 90, 98, 100, 100)
mean(q1)
sd(q1)
q2 <- c(85, 80, 100, 100, 75, 90, 100, 100)
mean(q2)
sd(q2)
q3 <- c(100, 90, 50, 80, 80, 80, 100, 100)
mean(q3)
sd(q3)
q4 <- c(100, 20, 20, 70, 70, 80, 90, 80)
mean(q4)
sd(q4)
install.packages("InformationValue")
install.packages("Rtools")
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,   0,
1,     0,    1,   1,   1,
1,     0,    0,   0,   1,
0,     0,    1,   0,   1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Fit the regression model
logistic <- glm( PM ~ Pop, data = PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
library(pscl)
pR2(logistic)["McFadden"]
# Find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
library(pscl)
library(InformationValue)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Fit the regression model
logistic <- glm( PM ~ Pop, data = PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
# Find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
# Add 5 cities to the Section Example
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232,
1988, 4000, 607, 5001, 7890)
# PM exceeding
PM  <- c( 0,     1,    0,   0,   0,
1,     0,    1,   1,   1,
1,     0,    0,   0,   1,
0,     0,    1,   0,   1,
0,     1,    0,   1,   1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Fit the regression model
logistic <- glm( PM ~ Pop, data = PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
# Find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(300, 1500, 30000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(dplyr)
library(ggplot2)
library(gapminder)
gapminder
# Make a simple scatter plot
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" )
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" )
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap) )
# Make a simple scatter plot
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap) ) +
geom_point()
# Add an aesthetic - color
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point()
# Add an aesthetic - color
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, size=country) ) +
geom_point()
# Add an aesthetic - color
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, shape=country) ) +
geom_point()
# Add an aesthetic - color
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, shape=country, color=country) ) +
geom_point()
# Add an aesthetic - color
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, shape=country, color=country,
size=country) ) +
geom_point()
# Add an aesthetic - color
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, shape=country, color=continent) ) +
geom_point()
# Use two geoms - point + smooth line
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point()
# Use two geoms - point + smooth line
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth()
# Change labels
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia")
# Change labels
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia ",
x="Year", y="GDP per captia in each country")
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia")
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia")
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_classic()
# Change the theme
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_gray()
# Change the theme
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_bw()
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_dark()
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_bw()
# Change the theme
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_bw()
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007",
x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name")
# Using the facets
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name")
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ country, ncol =4)
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ country, nrow =4)
gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ country, nrow =2)
# And later save it to a stored figure
ggsave("myplot.png", width=30,
height=10, units="cm", dpi=400)
getwd()
# And later save it to a stored figure
ggsave("myplot.png", width=20,
height=20, units="cm", dpi=10)
# And later save it to a stored figure
ggsave("myplot.png", width=20,
height=20, units="cm", dpi=100)
# And later save it to a stored figure
ggsave("myplot.png", width=20,
height=20, units="cm", dpi=300)
# Save a ggplot object
plot1 <- gapminder %>%
dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,1,1)=="C" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name") +
facet_wrap( ~ continent, nrow=2)
# And later save it to a stored figure
ggsave("myplot2.png", plot=plot1, width=20,
height=10, units="cm", dpi=400)
?element_text
plot2 <- gapminder %>%
#  dplyr::filter( continent=="Asia" | continent=="Europe" ) %>%
dplyr::filter( substr(country,2,2)=="o" ) %>%
ggplot( aes(x=year, y=gdpPercap, color=country) ) +
geom_point() +
geom_smooth() +
labs(title="GDP per captia from 1957 to 2007", x="Year", y="GDP per captia") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold.italic"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20)) +
scale_color_discrete(name="Country Name (Second letter is o)") +
facet_wrap( ~ continent, nrow=4)
# And later save it to a stored figure
ggsave("myfirstplot.png", plot=plot2, width=25,
height=20, units="cm", dpi=400)
getwd()
# Load libraries
library(randtests)
library(EnvStats)
library(outliers)
library(FSA)
library(ggplot2)
library(GGally)
library(olsrr)
library(dplyr)
library(lubridate)
library(forecast)
#/////////////////////////////////////////////////////////////////////
# 3.1
#/////////////////////////////////////////////////////////////////////
before <- c(6.26, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	6.17, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	8.97, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	 4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
new <- after - before
shapiro.test(new)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# Remove the outliners
before_new <- c(6.26, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after_new <-  c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	  4.46, 	5.52, 	5.35,
5.19, 	5.91, 	6.57,	  6.74, 	5.18, 	5.98, 	5.61)
# Check again
shapiro.test(before_new)
rosnerTest(before_new)
shapiro.test(after_new)
rosnerTest(after_new)
# Use pair t-test
# Use one-sided p-value
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
summary(total)
#//////////////////////////////////////////////////////////////////////
P1 <- c(29,35,27,32,21,36)
P2 <- c(46,55,59,60,38,55)
P1 + P2
shapiro.test(P1)
shapiro.test(P2)
shapiro.test(P1+P2)
mean(P1+P2)
sd(P1+P2)
boxplot(P1+P2)
summary(P1+P2)
hist(P1+P2)
hist(P1)
hist(P2)
total <- P1 + P2
summary(total)
hist(total)
setwd("C://ese335")
rmarkdown::render_site()
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
