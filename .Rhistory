# Section 18, ex1
#
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFaddenâ€™s R2
pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
setwd("D://ese335")
rmarkdown::render_site()
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( F,     T,    F,   F,     F,
T,     T,    T,   T,     T,
T,     F,    F,   F,     T,
F,     F,    T,   F,     T)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Make a data frame
PM <- as.factor(PM)
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( F,     T,    F,   F,     F,
T,     T,    T,   T,     T,
T,     F,    F,   F,     T,
F,     F,    T,   F,     T)
# Make a data frame
PM <- factor(PM)
PM_data <- data.frame(Pop, PM)
str(PM_data)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as.factor(PM_data$PM)
str(PM_data)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as.factor(as.logical(PM_data$PM))
str(PM_data)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as.factor(as.character(PM_data$PM))
str(PM_data)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as.factor(as.character(PM_data$PM))
str(PM_data)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as_factor(PM_data$PM)
str(PM_data)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1) + 1
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as.factor(PM_data$PM)
str(PM_data)
PM_data
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( F,     T,    F,   F,     F,
T,     T,    T,   T,     T,
T,     F,    F,   F,     T,
F,     F,    T,   F,     T)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( F,     T,    F,   F,     F,
T,     T,    T,   T,     T,
T,     F,    F,   F,     T,
F,     F,    T,   F,     T)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
#plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( F,     T,    F,   F,     F,
T,     T,    T,   T,     T,
T,     F,    F,   F,     T,
F,     F,    T,   F,     T)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- as.factor(PM_data$PM)
str(PM_data)
# Plot data, scatter plots
#plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- ifelse(PM_data$PM==0, "Not_exceeding", "Exceeding")
PM_data
PM_data$PM <- as.factor(PM_data$PM )
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Plot data, scatter plots
plot(Pop, PM+1)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data$PM <- ifelse(PM_data$PM==0, "Not_exceeding", "Exceeding")
PM_data$PM <- as.factor(PM_data$PM )
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
PM_data
# Make a data frame
PM_data <- cbind(Pop, PM)
str(PM_data)
data.frame
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
str(PM_data)
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data[PM_data$PM==0,]$PM <- "G"
PM_data[PM_data$PM==1,]$PM <- "E"
PM_data
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     1,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
PM_data[PM_data$PM==0,]$PM <- "G"
PM_data[PM_data$PM==1,]$PM <- "E"
PM_data$PM <- as.factor(PM_data$PM )
PM_data
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
logistic
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
predicted_value
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
#-------------------------------
# Section 18, ex1
#-------------------------------
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFaddenâ€™s R2
pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
#-------------------------------
# Section 18, ex1
#-------------------------------
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic1 <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic1)
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic2 <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic2)
# Compute McFaddenâ€™s R2
pR2(logistic2)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value2 <- predict(logistic2, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value2)[1]
# Make predictions for new cars
new_cars2 <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic2, new_cars2, type="response")
#-------------------------------
# Section 18, ex1
#-------------------------------
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic1 <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic1)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic2 <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic2)
# Compute McFaddenâ€™s R2
pR2(logistic2)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value2 <- predict(logistic2, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value2)[1]
# Make predictions for new cars
new_cars2 <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic2, new_cars2, type="response")
