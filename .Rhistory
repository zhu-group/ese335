density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0, 1)", col="black",   cex=2)
text(-4, 0.30, "N(1, 1)", col="blue",  cex=2)
text(-4, 0.25, "N(0, 9)", col="red", cex=2)
# Sample 1 is from a normal distribution
sample1  <- rnorm(200, 0, 1)
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
# Plot density function of sample 1
ggdensity(sample1, main = "Density plot of sample 1",
xlab = "x", color ="blue", lwd=1.5)
# Plot density function of sample 2
ggdensity(sample2, main = "Density plot of sample 2",
xlab = "x", color ="red", lwd=1.5)
# QQ plot of sample1
ggqqplot(sample1)
# QQ plot of sample2
ggqqplot(sample2)
# Sample 3 is from a normal distribution
sample3  <- sample1[1:25]
# Sample 4 is from a uniform distribution
sample4  <- sample2[1:25]
# Shapiro-Wilk test of sample 3
shapiro.test(sample3)
# Shapiro-Wilk test of sample 4
shapiro.test(sample4)
# Lilliefors test of sample 1
lillie.test(sample1)
# Lilliefors test of sample 2
lillie.test(sample2)
# Sample 5 is from a log-normal distribution
sample5  <- exp(rnorm(200, 0, 1))
# Plot density function of sample 5
ggdensity(sample5, main = "Density plot of sample 5",
xlab = "x", color ="blue", lwd=1.5)
# Sample 6 is taking log on sample 5 which is from a log-normal distribution
sample6  <- log(sample5)
# Plot density function of sample 6
ggdensity(sample6, main = "Density plot of sample 6",
xlab = "x", color ="blue", lwd=1.5)
# Lilliefors test of sample 6
lillie.test(sample6)
# Generate a sample
y <- exp(runif(40,0,1)+runif(40,0,1)+runif(40,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Generate a sample
y <- exp(runif(40,0,1)+runif(40,0,1)+runif(40,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(y)$lambda
# BOX-COX transformation
y_new <- (y^lambda-1)/lambda
ggdensity(y_new,main = "Density plot of sample", xlab = "x")
# Lilliefors test
lillie.test(y_new)
library(ggpubr)
library(nortest)
library(geoR)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
density1 <- dnorm(x, 0, 1)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0,1)", col="black",   cex=2)
text(-4, 0.30, "N(1,1)", col="blue",  cex=2)
text(-4, 0.25, "N(0,9)", col="red", cex=2)
# Sample 1 is from a normal distribution
sample1  <- rnorm(200, 0, 1)
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
# Plot density function of sample 1
ggdensity(sample1, main = "Density plot of sample 1",
xlab = "x", color ="blue", lwd=1.5)
# Plot density function of sample 2
ggdensity(sample2, main = "Density plot of sample 2",
xlab = "x", color ="red", lwd=1.5)
# QQ plot of sample1
ggqqplot(sample1)
# QQ plot of sample2
ggqqplot(sample2)
# Sample 3 is from a normal distribution
sample3  <- sample1[1:25]
# Sample 4 is from a uniform distribution
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
sample4  <- sample2[1:25]
# Shapiro-Wilk test of sample 3
shapiro.test(sample3)
# Shapiro-Wilk test of sample 4
sample2  <- runif(200, 0, 1)
sample4  <- sample2[1:25]
shapiro.test(sample4)
# Lilliefors test of sample 1
lillie.test(sample1)
# Lilliefors test of sample 2
lillie.test(sample2)
# Sample 5 is from a log-normal distribution
sample5  <- exp(rnorm(200, 0, 1))
# Plot density function of sample 1
ggdensity(sample5, main = "Density plot of sample 5",
xlab = "x", color ="blue", lwd=1.5)
# Sample 5 is from a log-normal distribution
sample6  <- log(sample5)
# Plot density function of sample 1
ggdensity(sample6, main = "Density plot of sample 6",
xlab = "x", color ="blue", lwd=1.5)
# Generate a sample
y <- exp(runif(30,0,1)+runif(30,0,1)+runif(30,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y)
# Lilliefors test
lillie.test(y)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(y)$lambda
# BOX-COX transformation
y_new <- (y^lambda-1)/lambda
# Plot the density
ggdensity(y_new,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y_new)
# Lilliefors test
lillie.test(y_new)
#---------------------------
# In class exe.
# Ex 1
sample_e1 <- c(0.6, -1.0, -0.5, 0.9, -0.4,
0.9, 0.6, -0.2, 0.1, 0.7, 0.4,
-0.5, 1.2, 0.1, 0.6, -1.3,
0.9, 1.1, 0.2, 0.1)
# Plot the density
ggdensity(sample_e1, main = "Density plot of sample", xlab = "x")
library(ggpubr)
library(nortest)
library(geoR)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
density1 <- dnorm(x, 0, 1)
# Plot Density
plot(x, density1, col="black", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of normal distributions")
# Compute and plot the density from another normal
density2  <- dnorm(x, 1, 1)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another normal
density3  <- dnorm(x, 0, 3)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "N(0,1)", col="black",   cex=2)
text(-4, 0.30, "N(1,1)", col="blue",  cex=2)
text(-4, 0.25, "N(0,9)", col="red", cex=2)
# Sample 1 is from a normal distribution
sample1  <- rnorm(200, 0, 1)
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
# Plot density function of sample 1
ggdensity(sample1, main = "Density plot of sample 1",
xlab = "x", color ="blue", lwd=1.5)
# Plot density function of sample 2
ggdensity(sample2, main = "Density plot of sample 2",
xlab = "x", color ="red", lwd=1.5)
# QQ plot of sample1
ggqqplot(sample1)
# QQ plot of sample2
ggqqplot(sample2)
# Sample 3 is from a normal distribution
sample3  <- sample1[1:25]
# Sample 4 is from a uniform distribution
# Sample 2 is from a uniform distribution
sample2  <- runif(200, 0, 1)
sample4  <- sample2[1:25]
# Shapiro-Wilk test of sample 3
shapiro.test(sample3)
# Shapiro-Wilk test of sample 4
sample2  <- runif(200, 0, 1)
sample4  <- sample2[1:25]
shapiro.test(sample4)
# Lilliefors test of sample 1
lillie.test(sample1)
# Lilliefors test of sample 2
lillie.test(sample2)
# Sample 5 is from a log-normal distribution
sample5  <- exp(rnorm(200, 0, 1))
# Plot density function of sample 1
ggdensity(sample5, main = "Density plot of sample 5",
xlab = "x", color ="blue", lwd=1.5)
# Sample 5 is from a log-normal distribution
sample6  <- log(sample5)
# Plot density function of sample 1
ggdensity(sample6, main = "Density plot of sample 6",
xlab = "x", color ="blue", lwd=1.5)
# Generate a sample
y <- exp(runif(30,0,1)+runif(30,0,1)+runif(30,0,1))
# Plot the density
ggdensity(y,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y)
# Lilliefors test
lillie.test(y)
# BOX-COX transformation, get lambda
lambda <- boxcoxfit(y)$lambda
# BOX-COX transformation
y_new <- (y^lambda-1)/lambda
# Plot the density
ggdensity(y_new,main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(y_new)
# Lilliefors test
lillie.test(y_new)
#---------------------------
# In class exe.
# Ex 1
sample_e1 <- c(0.6, -1.0, -0.5, 0.9, -0.4,
0.9, 0.6, -0.2, 0.1, 0.7, 0.4,
-0.5, 1.2, 0.1, 0.6, -1.3,
0.9, 1.1, 0.2, 0.1)
# Plot the density
ggdensity(sample_e1, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e1)
# Test normality
shapiro.test(sample_e1)
#--------------
# Ex 2
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8,
95.0, 87.0,
81.2, 68.5, 47.3, 41.1, 36.6, 29.0,
28.6, 26.3, 26.0, 24.4,
21.4, 17.3,
11.5, 4.9, 4.9, 1.0)
length(sample_e2)
# Try this by yourself
#sample_new <- log(sample)
# Plot the density
ggdensity(sample_e2, main = "Density plot of sample", xlab = "x")
sample_e2 <- c(1202.6, 830.1, 372.4, 345.5, 321.2,
244.3, 163.0, 147.8,
95.0, 87.0,
81.2, 68.5, 47.3, 41.1, 36.6, 29.0,
28.6, 26.3, 26.0, 24.4,
21.4, 17.3,
11.5, 4.9, 4.9, 1.0)
length(sample_e2)
ggdensity(sample_e2, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_e2)
# Test normality
shapiro.test(sample_e2)
# Try this by yourself
sample_new <- log(sample)
sample
# Try this by yourself
sample_new <- log(sample_e2)
# Plot the density
ggdensity(sample_new, main = "Density plot of sample", xlab = "x")
# Plot Q-Q plot
ggqqplot(sample_new)
# Test normality
shapiro.test(sample_new)
#----------
# Ex 4
# Generate a sample
sample_e4<- c(rnorm(10,0,1), rnorm(10,10,1))
ggdensity(sample_e4, main = "Density plot of sample", xlab = "x")
# in ug/m3
con <- c(22, 65, 25, 7)
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
con*sens/sum(sens*con)
# in ug/m3
con <- c(22, 65, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens)*0.00940-1
impact
# Contribution
impact <- exp(con*sens*0.00940)-1
impact
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 80, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# 20% 24% 50% 6%
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 165, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 120, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# PM2.5, O3, NO2, SO2
# in ug/m3
con <- c(22, 160, 25, 7)
# Health impact
sens <- c(0.22749, 0.08953, 0.47015, 0.21282)
# Contribution
impact <- exp(con*sens*0.00940)-1
impact/sum(impact)
# 20% 24% 50% 6%
impact*100*10/86.18349
sum(impact*100*10/86.18349)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Sample size
n        <- length(Sample)
n
# Spectrophotometer error SD
SD       <- 10
# Get Z-ratio
Z        <- (mean(Sample) - Baseline) / (SD/sqrt(n))
Z
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we use 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
print(P_value)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Sample size
n        <- length(Sample)
# Spectrophotometer error SD
SD       <- 20
# Get Z-ratio
Z        <- (mean(Sample) - Baseline) / (SD/sqrt(n))
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we use 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Make a vector from -5 to 5, with a step of 0.01
x        <- seq(-5.0, 5.0, by=0.01)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute the density for each element in x
# Set the degrees of freedom to be 30
density1 <- dt(x, df=30)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t distributions")
# Compute and plot the density from another t distribution
# Set the degrees of freedom to be 5
density2  <- dt(x, df=5)
lines(x, density2, col="blue", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Compute and plot the density from another t distribution
density3  <- dt(x, df=2)
lines(x, density3, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
# Add legends
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "t (df=5)", col="blue",  cex=2)
text(-4, 0.25, "t (df=2)", col="red", cex=2)
# Plot Density
plot(x, density1, col="purple", xlab="", ylab="Density",
type="l", lwd=3, cex=2,
xlim=c(-5.0, 5.0),
main="PDF of t and standard normal distributions")
# Compute and plot the density from the normal distribution
density4  <- dnorm(x, mean = 0, sd = 1)
lines(x, density4, col="red", xlab="", ylab="Density",
type="l", lwd=3, cex=2)
text(-4, 0.35, "t (df=30)", col="purple",   cex=2)
text(-4, 0.30, "N(0,1)", col="red", cex=2)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Get sample size and degrees of freedom
n        <- length(Sample)
df       <- n - 1
# SE of the sample mean
SE       <- sd(Sample)/sqrt(n)
SE
# Get t-ratio
t        <- (mean(Sample) - Baseline ) / SE
t
# Find the one-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here t).
# Here we that 1-pt to get the probability that the
# variable takes a value higher than the threshold (t).
P_value  <- 1 - pt(t, df=df)
print(P_value)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Call t.test function
# Here we compare the sample mean with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(Sample, mu=70, alternative ="greater")
?t.test()
library(ggpubr)
library(nortest)
#--------------------------------------
# EX 1
library(ggpubr)
library(nortest)
library(geoR)
# Sample
Sample   <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample) # p-value > 0.05, normal
# SD of Population is unknown, so use t-test
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=4.55)
sample(seq(1,11),1)
library(ggpubr)
library(nortest)
library(geoR)
# Sample
Sample   <- c(4.28, 4.40, 4.42, 4.35, 4.37)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample) # p-value > 0.05, normal
# SD of Population is unknown, so use t-test
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=4.55)
# Sample
Sample   <- c(199, 202, 202, 198, 196, 197, 201,
203, 198, 204, 201, 203, 201, 203,
203, 202, 197, 200, 201, 197)
# Check normality with Shapiro-Wilk test
shapiro.test(Sample)
# p-value > 0.05, normal, good to do t-test
# Call t.test function
# Here we compare the sample average with a known mean (4.55)
# Since H1 states biased or not,
# we need to compute the two-sided p-value
t.test(Sample, mu=200, alternative = 'greater')
setwd("D://repo/ese335")
rmarkdown::render_site()
