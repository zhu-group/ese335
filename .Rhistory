rep("City 2", length(City2)),
rep("City 3", length(Cit3))))
# Make data frame
Rain_data  <- data.frame(Acidity = c(City1, City2, City3),
City=c(rep("City 1", length(City1)),
rep("City 2", length(City2)),
rep("City 3", length(City3))
)
)
Rain_data
# Compare boxplots
ggplot(Rain_data, aes(x=City, y=Acidity, fill=City)) +
geom_boxplot() +
labs(title="Rain acidity in different cities",
x="City", y="Acidity") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Acidity ~ City, data=Rain_data)
summary(res_aov)
# EX. 2
# Sub-samples
Condition1       <- c(19.4, 32.6, 27.0, 32.1, 33.0)
Condition2       <- c(17.7, 24.8, 27.9, 25.2, 24.3)
Condition3       <- c(20.7, 21.0, 20.5, 18.8, 18.6)
Condition4       <- c(17.3, 19.4, 19.1, 16.9, 20.8)
Condition5       <- c(17.0, 19.4, 9.1, 11.9, 15.8)
Condition6       <- c(4.3, 14.4, 11.8, 11.6, 14.2)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition5, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Ratio ~ Condition, data=Decomposition_data)
summary(res_aov)
# One-way ANOVA
res_aov <- aov(Acidity ~ City, data=Rain_data)
summary(res_aov)
#--------------------------
# EX. 1
# Sub-samples
City1       <- c(5.11, 5.01, 4.90, 5.14, 4.80, 5.24)
City2       <- c(4.87, 4.18, 4.40, 4.67, 4.89, 4.09)
City3       <- c(5.46, 6.29, 5.57, 5.15, 5.45, 5.30)
# Make data frame
Rain_data  <- data.frame(Acidity = c(City1, City2, City3),
City=c(rep("City 1", length(City1)),
rep("City 2", length(City2)),
rep("City 3", length(City3))))
# Compare boxplots
ggplot(Rain_data, aes(x=City, y=Acidity, fill=City)) +
geom_boxplot() +
labs(title="Rain acidity in different cities",
x="City", y="Acidity") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Acidity ~ City, data=Rain_data)
summary(res_aov)
#--------------------------
# EX. 2
# Sub-samples
Condition1       <- c(19.4, 32.6, 27.0, 32.1, 33.0)
Condition2       <- c(17.7, 24.8, 27.9, 25.2, 24.3)
Condition3       <- c(20.7, 21.0, 20.5, 18.8, 18.6)
Condition4       <- c(17.3, 19.4, 19.1, 16.9, 20.8)
Condition5       <- c(17.0, 19.4, 9.1, 11.9, 15.8)
Condition6       <- c(4.3, 14.4, 11.8, 11.6, 14.2)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition5, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Ratio ~ Condition, data=Decomposition_data)
summary(res_aov)
# Sub-samples
Condition1       <- c(19.4, 32.6, 27.0, 32.1, 33.0)
Condition2       <- c(17.7, 24.8, 27.9, 25.2, 24.3)
Condition3       <- c(20.7, 21.0, 20.5, 18.8, 18.6)
Condition4       <- c(17.3, 19.4, 19.1, 16.9, 20.8)
Condition5       <- c(17.0, 19.4, 9.1, 11.9, 15.8)
Condition6       <- c(14.3, 14.4, 11.8, 11.6, 14.2)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition5, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Ratio ~ Condition, data=Decomposition_data)
summary(res_aov)
# EX. 2
# Sub-samples
Condition1       <- c(19.4, 32.6, 27.0, 32.1, 33.0)
Condition2       <- c(17.7, 24.8, 27.9, 25.2, 24.3)
Condition3       <- c(20.7, 21.0, 20.5, 18.8, 18.6)
Condition4       <- c(17.3, 19.4, 19.1, 16.9, 20.8)
Condition5       <- c(17.0, 19.4, 9.1, 11.9, 15.8)
Condition6       <- c(14.3, 14.4, 11.8, 11.6, 14.2)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition5, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Ratio ~ Condition, data=Decomposition_data)
summary(res_aov)
# Make data frame
Decomposition_data  <- data.frame(Ratio = c(Condition1, Condition2, Condition3,
Condition4, Condition5, Condition6),
Condition=c(rep("Condition 1", length(Condition1)),
rep("Condition 2", length(Condition2)),
rep("Condition 3", length(Condition3)),
rep("Condition 4", length(Condition4)),
rep("Condition 5", length(Condition5)),
rep("Condition 6", length(Condition6))))
# Compare boxplots
ggplot(Decomposition_data, aes(x=Condition, y=Ratio, fill=Condition)) +
geom_boxplot() +
labs(title="Decomposition ratio under different conditions",
x="Condition", y="Ratio [%]") +
theme_classic()
# One-way ANOVA
res_aov <- aov(Ratio ~ Condition, data=Decomposition_data)
summary(res_aov)
library(tidyr)
library(dplyr)
library(ggplot2)
library(randtests)
library(moments)
library(outliers)
library(nortest)
# Sub-samples
Control  <- c(0.64, 0.91, 0.84, 0.41, 1.58, 0.48, 0.88, 0.74, 1.09, 1.28)
P1       <- c(1.20, 1.17, 0.76, 0.92, 0.65, 1.14, 1.05, 1.28, 0.89, 1.06)
P2       <- c(0.25, 1.31, 0.43, 1.18, 1.02, 0.83, 1.02, 0.66, 0.70, 0.83)
P3       <- c(0.63, 0.30, 0.49, 0.01, 0.63, 0.69, 0.68, 0.34, 1.09, 0.42)
# Make data frame
Cd_data  <- data.frame(Cd=c(Control, P1, P2, P3),
group=c(rep("Control", length(Control)),
rep("Plant 1", length(P1)),
rep("Plant 2", length(P2)),
rep("Plant 3", length(P3)) ))
# Compare boxplots
ggplot(Cd_data, aes(x=group, y=Cd, fill=group)) +
geom_boxplot() +
labs(title="Soil Cd concentrations under different conditions",
x="Group", y="Cd concentration [mg/kg]") +
theme_classic()
# Perform the one-way ANOVA
res_aov <- aov(Cd ~ group, data=Cd_data)
summary(res_aov)
# Post-hoc test with the Hukey test
TukeyHSD(res_aov)
# Plot the 95% (default) CI of the difference
plot(TukeyHSD(res_aov))
# Read csv
cd_data <- read.csv("cd_data.csv", header=T)
# Read csv
cd_data <- read.csv("cd_data.csv", header=T)
# Change to factor type using tibble
cd_data_tbl <- as_tibble(cd_data) %>%
mutate(Chemical = factor(Chemical, ordered = TRUE)) %>%
mutate(Physical = factor(Physical, ordered = TRUE)) %>%
mutate(Plant    = factor(Plant   , ordered = TRUE))
cd_data_tbl
# Boxplot - Physical
ggplot(cd_data_tbl, aes(x = Physical, y = Cd, fill = Physical)) +
geom_boxplot() +
theme_classic()
# Boxplot - Chemical
ggplot(cd_data_tbl, aes(x = Chemical, y = Cd, fill = Chemical)) +
geom_boxplot() +
theme_classic()
# Boxplot - Plant
ggplot(cd_data_tbl, aes(x = Plant, y = Cd, fill = Plant)) +
geom_boxplot() +
theme_classic()
# Test the interaction term
two_way_interaction <- aov(Cd ~ Chemical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Chemical + Plant, data = cd_data_tbl)
summary(two_way_additive)
TukeyHSD(two_way_additive)
# Test the interaction term
two_way_interaction <- aov(Cd ~ Chemical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Chemical + Plant, data = cd_data_tbl)
summary(two_way_additive)
# Boxplot - Chemical
ggplot(cd_data_tbl, aes(x = Chemical, y = Cd, fill = Pyhsical)) +
geom_boxplot() +
theme_classic()
cd_data_tbl
# Boxplot - Chemical
ggplot(cd_data_tbl, aes(x = Chemical, y = Cd, fill = Physical )) +
geom_boxplot() +
theme_classic()
# Test the interaction term
two_way_interaction <- aov(Cd ~ Physical * Plant, data = cd_data_tbl)
summary(two_way_interaction)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
# Additive two-way ANOVA
two_way_additive <- aov(Cd ~ Physical + Plant, data = cd_data_tbl)
summary(two_way_additive)
par(mfrow=c(2,2))
plot(two_way_additive)
par(mfrow=c(1,1))
TukeyHSD(two_way_additive)
plot(TukeyHSD(two_way_additive))
TukeyHSD(two_way_additive)
summary(two_way_additive)
TukeyHSD(two_way_additive)
plot(TukeyHSD(two_way_additive))
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
# Compute covariance
cov(x,y)
cov(2*x,2*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
# Compute covariance
cov(x,y)
cov(2*x,2*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
par(mfrow=c(1,1))
# Compute covariance
cov(x,y)
cov(2*x,2*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# Check outliers
grubbs.test(x)
grubbs.test(y)
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
library(randtests)
library(outliers)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Make up some random values
x <- rnorm(10,0,1)
y <- 10*x+rnorm(10,0.2,0.5)
# Plot
# 1 row 2 cols plot
par(mfrow=c(1,2))
# Plot original data
plot(x,y)
# Double x and y
plot(2*x,2*y)
par(mfrow=c(1,1))
cov(x,y)
cov(2*x,2*y)
# Make up some random values
x <- rnorm(20,0,1)
y <- 2*x+rnorm(20,0,0.5)
# Scatter plot
plot(x,y)
# Check independence of the dependent variable
runs.test(x)
runs.test(y)
# Check outliers
grubbs.test(x)
grubbs.test(y)
grubbs.test(y)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
# Check outliers
grubbs.test(x)
grubbs.test(y)
cor.test(x, y, method="pearson", alternative="two.sided", conf.level=0.95)
# Compute Pearson Correlation Coefficient
cor(x, y)
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
# Compute Pearson Correlation Coefficient
cor(x, y)
# Uncomment the following lines to remove the outlier
x <- x[- 11]
y <- y[- 11]
# Compute Pearson Correlation Coefficient without the outlier
cor(x, y)
plot(x,y)
# Make up two samples
x <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y <- 2*x+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
# Add one outlier
x <- c(x, -20)
y <- c(y, 30)
plot(x,y)
# Make up samples
x1 <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y1 <- 2*x1+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
x2 <- x1-5.0
y2 <- -1.0*y1
x <- c(x1,x2)
y <- c(y1,y2)
# Compute the Pearson correlation coefficient between x1 and y1.
cor(x1, y1)
# Compute the Pearson correlation coefficient between x2 and y2.
cor(x2, y2)
# Compute the Pearson correlation coefficient between x and y
cor(x, y)
# Scatter plot, check linearity
plot(TOC, UV)
TOC <- c(1.59, 1.79, 1.00, 0.45, 3.84, 2.30, 1.00,
3.20, 0.80, 2.20, 3.20, 2.10)
UV  <- c(0.144, 0.152, 0.113, 0.025, 0.227, 0.149,
0.014, 0.158, 0.042, 0.154, 0.173, 0.095)
# Scatter plot, check linearity
plot(TOC, UV)
# Check independence of the dependent variable
runs.test(TOC)
runs.test(UV)
# Check normality
# Sample size < 30, use the Shapiro-Wilk test
shapiro.test(TOC)
shapiro.test(UV)
# Check outliers
grubbs.test(TOC)
grubbs.test(UV)
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# TOC SHOULD be positively correlated with UV
# because of Lamber-Beers Law
cor.test(TOC, UV, method="pearson",
alternative="greater", conf.level=0.95)
# Two-sided p-value
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# Make up samples
x1 <- c(0.1, -1.6, -2.3,  0.1,  0.1,  0.5, -0.3, -0.3, 1.4,  0.3)
y1 <- 2*x1+c(-0.4, -0.4, -0.4,  0.2, -1.6,  0.2,  0.2,  0.6,  0.2, 1.1)
x2 <- x1-5.0
y2 <- -1.0*y1
x <- c(x1,x2)
y <- c(y1,y2)
plot(x1,y1,col="red")
points(x2,y2,col="green")
plot(x,y,col="black")
points(x1,y1,col="red")
points(x2,y2,col="green")
plot(x,y,col="black")
points(x1,y1,col="red",cex=2)
points(x2,y2,col="blue",cex=2)
plot(x,y,col="black")
plot(x,y,col="black")
points(x1,y1,col="red",cex=2)
points(x2,y2,col="blue",cex=2)
# Compute the Pearson correlation coefficient between x1 and y1.
cor(x1, y1)
# Compute the Pearson correlation coefficient between x2 and y2.
cor(x2, y2)
# Compute the Pearson correlation coefficient between x and y
cor(x, y)
# Scatter plot, check linearity
plot(TOC, UV)
# Two-sided p-value
cor.test(TOC, UV, method="pearson",
alternative="two.sided", conf.level=0.95)
# TOC SHOULD be positively correlated with UV
# because of Lamber-Beers Law
cor.test(TOC, UV, method="pearson",
alternative="greater", conf.level=0.95)
setwd("C://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
