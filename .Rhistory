}
hist(Sample)
hist(Sample-1)
sd(Sample)
2/sqrt(1000)
hist((Sample-1)/(2/sqrt(1000)))
z.test = function(x,mu,popvar){
one.tail.p <- NULL
z.score <- round((mean(x)-mu)/(popvar/sqrt(length(x))),3)
one.tail.p <- round(pnorm(abs(z.score),lower.tail = FALSE),3)
cat(" z =",z.score,"\n",
"one-tailed probability =", one.tail.p,"\n",
"two-tailed probability =", 2*one.tail.p )}
IQ.data <- c(100,101,104,109,125,116,105,108,110)
z.test(IQ.data,100,15)
IQ.data <- c(78, 83, 68, 72, 88)
z.test(IQ.data,70,10)
IQ.data <- c(8, 13, -2, 2, 18)
z.test(IQ.data,0,10)
Z
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Instrument error SD
SD       <- 10
# Get Z-ratio
Z        <- mean(Error)/(SD/length(Error))
Z
pnorm(Z, mean=0, sd=1)
pnorm(abs(Z),lower.tail = FALSE)
x <- c(8, 13, -2, 2, 18)
mu <- 0
popvar <- 10
round((mean(x)-mu)/(popvar/sqrt(length(x))),3)
(mean(x)-mu)
mean(Error)
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Instrument error SD
SD       <- 10
# Get Z-ratio
Z        <- mean(Error)/(SD/sqrt(length(Error)))
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
Z
# Instrument error SD
SD       <- 20
# Get Z-ratio
Z        <- mean(Error)/(SD/sqrt(length(Error)))
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
pnorm(Z, mean=0, sd=1)
z.score <- round((mean(x)-mu)/(popvar/sqrt(length(x))),3)
z.score
Error
SD
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Instrument error SD
SD       <- 10
# Get Z-ratio
Z        <- mean(Error)/(SD/sqrt(length(Error)))
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- 1 - pnorm(Z, mean=0, sd=1)
print(P_value)
pnorm(-2.926254)
pnorm(abs(-2.926254))
1-pnorm(abs(-2.926254))
prom(–2.37)
pnorm(–2.37)
pnorm(-2.37)
(24-30)/(sqrt(1.5^2/20 + 2.0^2/25))
(24-30)/(sqrt(1.5^3/20 + 2.0^4/25))
In 2020, `20` observations are made in Shenzhen with a mean of `24.0` ug/m^3^, and `25` observations were made in Guangzhou with a mean of `30.0` ug/m^3^. We know from previous data that PM2.5 levels in the two cities generally follow normal distributions. And the standard deviation for Shenzhen and Guangzhou is `2.0` ug/m^3^ and `2.0` ug/m^3^, respectively.
sqrt(1.5^3/20 + 2.0^4/25)
(24-30)/(sqrt(2.0^2/20 + 3.0^2/25))
(24-30)/sqrt(2.0^2/20 + 3.0^2/25)
round(rnorm(20,20,2),1)
round(rnorm(10,24,2),1)
round(rnorm(12,30,3),1)
round(rnorm(12,27,3),1)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
SZ_sigma  <- 2.0
# Guangzhou
GZ_PM2.5  <- c(28.1, 25.2, 28.9, 34.3, 27.4, 29.7, 26.6, 24.2, 25.0, 28.1, 27.2, 25.4)
GZ_n      <- length(GZ_PM2.5)
GZ_sigma  <- 3.0
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
Z
pnorm(Z, mean=0, sd=1)
pnorm(Z-1, mean=0, sd=1)
pnorm(Z+1, mean=0, sd=1)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
SZ_sigma  <- 2.0
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
GZ_n      <- length(GZ_PM2.5)
GZ_sigma  <- 3.0
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
Z
pnorm(Z, mean=0, sd=1)
library(ggplot2)
library(ggplot2)
data.frame(SZ_PM2.5, GZ_PM2.5)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
SZ_sigma  <- 2.0
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1)
GZ_n      <- length(GZ_PM2.5)
GZ_sigma  <- 3.0
# Compare boxplots
PM2.5_data <- data.frame(SZ_PM2.5,GZ_PM2.5)
PM2.5_data
PM2.5_data
data.frame(PM2.5=c(SZ_PM2.5,GZ_PM2.5),
City=c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n) ) )
PM2.5_data <- data.frame(PM2.5=c(SZ_PM2.5,GZ_PM2.5),
City=c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n) ) )
PM2.5_data
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
SZ_sigma  <- 2.0
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
GZ_n      <- length(GZ_PM2.5)
GZ_sigma  <- 3.0
# Compare boxplots
PM2.5_data <- data.frame(PM2.5=c(SZ_PM2.5,GZ_PM2.5),
City=c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n) ) )
PM2.5_data
PM2.5_data
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="Temperature Distribution by Month", x="Month", y="Degrees (F)")
PM2.5_data
PM2.5_data
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="Temperature Distribution by Month", x="Month", y="Degrees (F)")
ggplot(PM2.5_data, aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="Temperature Distribution by Month", x="Month", y="Degrees (F)")
ggplot(PM2.5_data, aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="Temperature Distribution by Month", x="Month", y="Degrees (F)")
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
# Find the one-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
# Here we that 1-pnorm to get the probability that the
# variable takes a value higher than the threshold (Z).
P_value   <- pnorm(Z, mean=0, sd=1)
P_value
Z
# Check
ggqqplot(GZ_PM2.5)
library(ggpubr)
ggqqplot(GZ_PM2.5)
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot() +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
ggqqplot() +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
ggqqplot() +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
ggplot(PM2.5_data, aes(x=City, y=PM2.5)) +
ggqqplot() +
facet_wrap(~ month)
ggplot(PM2.5_data, aes(y=PM2.5)) +
ggqqplot() +
facet_wrap(~ month)
ggplot(PM2.5_data, aes(y=PM2.5)) +
ggqqplot() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(x=PM2.5)) +
ggqqplot() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(x=PM2.5)) +
geom_density() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(x=PM2.5)) +
geom_qq_line() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(x=PM2.5)) +
geom_qq() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(sample = PM2.5)) +
geom_qq +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(sample = PM2.5)) +
geom_qq() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(sample = PM2.5)) +
geom_qq_line() +
facet_wrap(~ City)
ggplot(PM2.5_data, aes(sample = PM2.5)) +
geom_qq_line() + geom_qq() +
facet_wrap(~ City)
PM2.5_data %>%
ggplot(aes(sample = PM2.5)) +
ggqqplot() +
facet_wrap(~ City)
shapiro.test(SZ_PM2.5)
shapiro.test(GZ_PM2.5)
7.8*2.16
# Sample
Sample   <- c(78, 83, 68, 72, 88)
# Baseline
Baseline <- 70
# Error
Error    <- Sample - Baseline
# Get sample size and degrees of freedom
n        <- length(Error)
df       <- n - 1
# SE of the average
SE       <- sd(Error)/sqrt(n)
SE
# Get t-ratio
t        <- mean(Error)/SE
t
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the difference
SE       <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t        <- mean(Error)/SE
t
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
n1
df1
sd1
n2
df2
sd2
(df1*sd1^2 + df2*sd2^2)
(df1*sd1^2 + df2*sd2^2)/(df1+df2)
(n1+n2)/(n1*n2)
# SE of the difference
SE       <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
SE
# SE of the difference
SE       <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
t
sqrt(2^2/10+3^2/12)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
# Find the one-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here t).
# Here we that pt to get the probability that the
# variable takes a value higher than the threshold (t).
P_value  <- pt(t, df=df1+df2)
print(P_value)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative ="greater")
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative ="less")
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a positive bias,
# we need to compute the one-side p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative ="less", var.equal = T)
t.test()
t.test(SZ_PM2.5, GZ_PM2.5, var.equal=T)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get Z-ratio
Z        <- (mean(SZ_PM2.5) - mean(GZ_PM2.5)) /
sqrt( SZ_sigma^2/SZ_n + GZ_sigma^2/GZ_n )
# Find the two-side p-value
# The pnorm function gives the Cumulative Distribution Function (CDF)
# of the Normal distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here Z).
P_value   <- (1-pnorm(abs(Z), mean=0, sd=1))*2
print(P_value)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
# Find the two-side p-value
# The pt function gives the Cumulative Distribution Function (CDF)
# of the Student's t distribution in R, which is the probability that
# the variable takes a value lower or equal to a threshold (here |t|).
P_value  <- (1-pt(abs(t), df=df1+df2))*2
print(P_value)
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Call t.test function
# Here we compare the sample average with a known mean (70)
# Since H1 states a less PM2.5 value in Shenzhen,
# we need to compute the one-side p-value
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided", var.equal=T)
rnorm(15, 860, 70)
round(rnorm(15, 860, 70),1)
round(rnorm(10, 800, 80),1)
setwd("D://ese335")
rmarkdown::render_site()
rmarkdown::render_site()
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
mean(SZ_PM2.5)
mean(GZ_PM2.5)
rmarkdown::render_site()
# Shenzhen
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
SZ_n      <- length(SZ_PM2.5)
SZ_sigma  <- 2.0
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
GZ_n      <- length(GZ_PM2.5)
GZ_sigma  <- 3.0
# Make data frame
PM2.5_data <- data.frame(PM2.5 = c(SZ_PM2.5, GZ_PM2.5),
City = c(rep("Shenzhen",SZ_n),rep("Guangzhou",GZ_n)))
# Compare boxplots
PM2.5_data %>%
ggplot(aes(x=as.character(City), y=PM2.5)) +
geom_boxplot(fill="steelblue") +
labs(title="PM2.5 Distribution by City", x="City", y="ug/m3")
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
SZ_PM2.5  <- c(25.6, 23.7, 21.9, 26.0, 24.5, 22.4, 26.7, 24.6, 22.7, 23.8)
# Guangzhou
GZ_PM2.5  <- c(27.1, 24.2, 27.9, 33.3, 26.4, 28.7, 25.6, 23.2, 24.0, 27.1, 26.2, 24.4)
# Sample difference
mean(SZ_PM2.5) - mean(GZ_PM2.5)
# Get sample size, degrees of freedom, and sd
n1        <- length(SZ_PM2.5)
df1       <- n1 - 1
sd1       <- sd(SZ_PM2.5)
n2        <- length(GZ_PM2.5)
df2       <- n2 - 1
sd2       <- sd(GZ_PM2.5)
# SE of the difference
SE        <- sqrt( (df1*sd1^2 + df2*sd2^2)/(df1+df2) * (n1+n2)/(n1*n2) )
# Get t-ratio
t         <- (mean(SZ_PM2.5) - mean(GZ_PM2.5))/SE
t
t.test(SZ_PM2.5, GZ_PM2.5, var.equal =T, alternative="two.sided")
t.test(SZ_PM2.5, GZ_PM2.5, alternative="two.sided")
# Check normal
shapiro.test(Lab1)
Lab1 <- c(14.7, 14.8, 15.2, 15.6)
Lab2 <- c(14.6, 15.0, 15.2)
# Check normal
shapiro.test(Lab1)
shapiro.test(Lab2)
# H0: mu1 = mu2
# Since the question is to check
# Are results from the two labs consistent
# We use two-sided p-value
t.test(Lab1, Lab2, var.equal =T, alternative="two.sided")
# COD measuremnets from two samples
Sample1 <- c(915.4, 789.3, 828.2, 811.4, 832.4, 841.7,
871.6, 830.8, 884.5, 847.5, 841.4, 936.7,
977.0, 825.2, 707.9)
n1      <- length(Sample1)
Sample2 <- c(804.0, 779.8, 749.3, 877.4, 753.8, 778.6,
807.5, 913.3, 784.8, 659.7)
n2      <- length(Sample2)
# Plot Box-plots side by side
# Make data frame
COD_data <- data.frame(COD = c(Sample1, Sample2),
River = c(rep("A",n1),rep("B",n2)))
# Compare boxplots
COD_data %>%
ggplot(aes(x=as.character(River), y=COD)) +
geom_boxplot(fill="steelblue") +
labs(title="COD Distribution by River", x="River", y="mg/l")
# Check normality
shapiro.test(Sample1)
shapiro.test(Sample2)
# H0: mu1 = mu2
# Since the question is to check there are any difference in COD,
# use two-sided p-vaue
t.test(Sample1, Sample2, var.equal =T, alternative="two.sided")
# TSP observations
Lab1 <- c(14.7, 14.8, 15.2, 15.6)
Lab2 <- c(14.6, 15.0, 15.2)
# Check normality
shapiro.test(Lab1)
shapiro.test(Lab2)
# H0: mu1 = mu2
# Since the question is to check
# Are results from the two labs consistent
# We use two-sided p-value
t.test(Lab1, Lab2, var.equal =T, alternative="two.sided")
# p-value > 0.05
# So we can not reject H0,
# and the results from the two labs are consistent.
# Check normality
shapiro.test(Sample1)
shapiro.test(Sample2)
# H0: mu1 = mu2
# Since the question is to check there are any difference in COD,
# use two-sided p-vaue
t.test(Sample1, Sample2, var.equal =T, alternative="two.sided")
