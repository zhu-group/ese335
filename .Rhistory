# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
logistic
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     0,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
library(InformationValue)
library(pscl)
# Population per km2
Pop <- c(797,  3652,   384,   876,  1156,
5282,  3602,  4305,  6451, 939,
2725,   296,  1187,  4819,  7856,
1074,  1444,  2620,   417,  3232)
# PM exceeding
PM  <- c( 0,     1,    0,   0,     0,
1,     0,    1,   1,     1,
1,     0,    0,   0,     1,
0,     0,    1,   0,     1)
# Make a data frame
PM_data <- data.frame(Pop, PM)
str(PM_data)
# Plot data, scatter plots
plot(Pop, PM)
# Fit the regression model
logistic <- glm( PM ~ Pop, data=PM_data, family = binomial)
# Print model detail
summary(logistic)
pR2(logistic)["McFadden"]
#find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, PM_data, type="response")
optimalCutoff(PM_data$PM, predicted_value)[1]
# Define new cities where we want to make predictions
new_cities <- data.frame(Pop = c(1000, 5000))
#predict probability of defaulting
predict(logistic, new_cities, type="response")
#-----------
# Section 18, ex1
#
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic)
# Compute McFadden’s R2
pR2(logistic)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value <- predict(logistic, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic, new_cars, type="response")
#-------------------------------
# Section 18, ex1
#-------------------------------
library(InformationValue)
library(pscl)
# Load the data
data(mtcars)
# Build the logistic regression model
# am as the dependent variable,
# and cyl, hp, and wt as the independent variables
logistic1 <- glm( am ~ cyl + hp + wt, data = mtcars, family = binomial)
str(mtcars)
# Print the model details
summary(logistic1)
# We find that cyl ends with with a insignificant slope,
# so we would not include it in the model
# Build the logistic regression model
# am as the dependent variable,
# hp and wt as the independent variables
logistic2 <- glm( am ~ hp + wt, data = mtcars, family = binomial)
summary(logistic2)
# Compute McFadden’s R2
pR2(logistic2)["McFadden"]
# Compute the probability cutoff
# find optimal cutoff probability to use to maximize accuracy
predicted_value2 <- predict(logistic2, mtcars, type="response")
optimalCutoff(mtcars$am, predicted_value2)[1]
# Make predictions for new cars
new_cars <- data.frame(hp = c(140,90,220), wt = c(3.0,2.0,5.0))
predict(logistic2, new_cars, type="response")
optimalCutoff(mtcars$am, predicted_value2)[1]
log(3)
log(4)
log(5)
log(10)
log(20)
log(21)
round(rnorm(32, 585.2, 89.6),1)
round(rnorm(32, 585.2, 89.6),1)*0.01
round(rnorm(32, 585.2, 89.6),0)*0.01
round(rnorm(32, 533.7, 65.3),0)*0.01
air <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 5.63)
control <- c(6.12, 3.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
hist(control)
control <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
t.test(air)
t.test(air,control)
control <- c(6.12, 3.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
t.test(air,control)
t.test(air,control,var.equal = T)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 5.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
t.test(air,control,var.equal = T)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
t.test(air,control,var.equal = T)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 9.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 8.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 7.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 7.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
t.test(air,control,var.equal = T)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 9.42, 7.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 7.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 9.42, 7.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 2.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 4.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
t.test(air,control,var.equal = T)
shapiro.test(air)
shapiro.test(control)
t.test(air,control,var.equal = T)
control <- c(6.26, 4.13, 5.09, 4.71, 6.01, 5.53, 4.94, 5.97,
5.09, 4.69, 5.49, 6.65, 6.17, 7.83, 6.22, 5.08,
6.45, 6.40, 5.29, 5.42, 6.68, 6.00, 4.88, 6.08,
4.82, 5.30, 5.88, 6.19, 5.86, 5.01, 5.81, 7.63)
air <- c(6.12, 4.59, 5.33, 5.83, 5.34, 5.37, 5.29,
5.55, 5.80, 5.22, 5.29, 4.84, 5.35, 5.04,
3.60, 4.08, 5.11, 5.76, 5.48, 4.96, 5.51,
4.46, 5.52, 5.35, 5.19, 1.88, 5.91, 6.57,
6.74, 5.18, 5.98, 5.61)
shapiro.test(air)
shapiro.test(control)
control <- c(6.26, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	6.17, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.30, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
air <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	5.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
shapiro.test(air)
shapiro.test(control)
air <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	1.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
shapiro.test(air)
air <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
shapiro.test(air)
air <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	3.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
shapiro.test(air)
air <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
shapiro.test(air)
shapiro.test(control)
A <- c(73, 102, 118, 104, 81, 107, 100, 87, 117, 111)
B <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
C	<- c(94, 79, 96, 98, 102, 102, 108, 91, 120, 105)
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(c(A,B,C))
library(randtests)
runs.test(A)
runs.test(B)
runs.test(C)
hours <- c(1, 2, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14)/5
hours
bp    <- c(64, 66, 76, 73, 74, 81, 83, 82, 80, 88, 84, 82, 91, 93, 89)
shapiro.test(bp)
hist(bp)
boxplot(bp)
reg <- lm(bp ~ hours)
summary(bp)
summary(reg)
hours <- c(1, 2, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14)/5
hours
hours <- c(0.19, 0.41, 0.73, 1.12, 1.15, 1.21, 1.25, 1.49, 1.67, 1.93, 2.05, 2.16, 2.22, 2.51, 2.88)
bp    <- c(64, 66, 76, 73, 74, 81, 83, 82, 80, 88, 84, 82, 91, 93, 89)+20
bp
shapiro.test(bp)
hist(bp)
boxplot(bp)
reg <- lm(bp ~ hours)
summary(reg)
bp
length(bp)
hours <- c(0.19, 0.41, 0.73, 1.12, 1.15, 1.21, 1.25, 1.49, 1.67, 1.93, 2.05, 2.16, 2.22, 2.51, 2.88)
bp    <- c(84,  86,  96,  93,  94, 101, 103, 102, 100, 108, 104, 102, 111, 113, 109)
bp
X2 <- rnorm(10, 200, 10)
X1 <- rnorm(10, 2, 1)
X2 <- rnorm(10, 200, 10)
X4 <- rnorm(10, 200, 10)/2
X5 <- rnorm(10, 200, 10)/10
X6 <- rnorm(10, 20, 10)
X7 <- rnorm(10, 20, 10)*2
X8 <- rnorm(10, 10, 10)*1.3
Y <- X1*10 + X2*0.38 + X7*0.46
reg <- lm(Y ~ X1+X2+X7 )
summary(reg)
X1 <- rnorm(20, 2, 1)
X2 <- rnorm(20, 200, 10)
X4 <- rnorm(20, 200, 10)/2
X5 <- rnorm(20, 200, 10)/10
X6 <- rnorm(20, 20, 10)
X7 <- rnorm(20, 20, 10)*2
X8 <- rnorm(20, 10, 10)*1.3
Y <- X1*10 + X2*0.38 + X7*0.46 + X2 + X3 + X4
reg <- lm(Y ~ X1+X2+X7 )
summary(reg)
Y <- X1*1.6 + X2*0.38 + X7*0.46 + X2 + X3 + X4
X1 <- rnorm(20, 2, 1)
X2 <- rnorm(20, 200, 10)
X4 <- rnorm(20, 200, 10)/2
X5 <- rnorm(20, 200, 10)/10
X6 <- rnorm(20, 20, 10)
X7 <- rnorm(20, 20, 10)*2
X8 <- rnorm(20, 10, 10)*1.3
Y <- X1*1.6 + X2*0.38 + X7*0.46 + X2 + X5 + X4
reg <- lm(Y ~ X1 + X2 + X7 )
summary(reg)
Y <- X1*1.6 + X2*0.38 + X7*0.46 + X2 + X5 + X4 + X6 +X8
reg <- lm(Y ~ X1 + X2 + X7 )
summary(reg)
Y <- X1*1.6 + X2*0.38 + X7*0.46 - X2 + X5 + X4 - X6 +X8
reg <- lm(Y ~ X1 + X2 + X7 )
summary(reg)
Y <- X1*1.6 - X2*0.38 + X7*0.46 - X2 + X5 + X4 - X6 +X8
reg <- lm(Y ~ X1 + X2 + X7 )
summary(reg)
Y <- X1*1.6 - X2*0.38 + X7*0.46 - X2 + X5 + X4 + X6 +X8
reg <- lm(Y ~ X1 + X2 + X7 )
summary(reg)
X1 <- rnorm(20, 2, 1)
X2 <- rnorm(20, 200, 10)
X3 <- runif(20, 200, 10)
X4 <- rnorm(20, 200, 10)/2
X5 <- rnorm(20, 200, 10)/10
X6 <- rnorm(20, 20, 10)
X7 <- rnorm(20, 20, 10)*2
X8 <- rnorm(20, 10, 10)*1.3
X9 <- runif(20, 200, 10)
Y <- X1*1.6 - X2*0.38 + X7*0.46 - X2 + X3 + X5 + X4 + X6 + X8 + X9
X1 <- rnorm(20, 2, 1)
X2 <- rnorm(20, 200, 10)
X3 <- runif(20, 10, 200)
X4 <- rnorm(20, 200, 10)/2
X5 <- rnorm(20, 200, 10)/10
X6 <- rnorm(20, 20, 10)
X7 <- rnorm(20, 20, 10)*2
X8 <- rnorm(20, 10, 10)*1.3
X9 <- runif(20, 10, 200)
Y <- X1*1.6 - X2*0.38 + X7*0.46 - X2 + X3 + X5 + X4 + X6 + X8 + X9
X1 <- rnorm(20, 2, 1)
X2 <- rnorm(20, 200, 10)
X3 <- rnorm(20, 200, 10)
X4 <- rnorm(20, 200, 10)/2
X5 <- rnorm(20, 200, 10)/10
X6 <- rnorm(20, 20, 10)
X7 <- rnorm(20, 20, 10)*2
X8 <- rnorm(20, 10, 10)*1.3
X9 <- runif(20, 10, 200)
Y <- X1*1.6 - X2*0.38 + X7*0.46 - X2 + X3 + X5 + X4 + X6 + X8 + X9
reg <- lm(Y ~ X1 + X2 + X3 + X4 +X5 )
summary(reg)
# Fit the full model, where all independent variables are included
full_model  <- lm(Y ~ Y ~ X1 + X2 + X3 + X4 +X5)
# Fit the full model, where all independent variables are included
full_model  <- lm(Y ~ X1 + X2 + X3 + X4 +X5)
full_model
# Test all possible subsets
output      <- ols_step_all_possible(full_model)
library(olsrr)
# Test all possible subsets
output      <- ols_step_all_possible(full_model)
# Print results from all possible subsets
output
Y <- X1*1.6 - X2*0.38 + X7*0.46 + X6 + X9
reg <- lm(Y ~ X1 + X2 + X3 + X4 +X5 )
summary(reg)
X1 <- rnorm(20, 2, 1)
X2 <- rnorm(20, 200, 10)
X3 <- rnorm(20, 200, 10)
X4 <- rnorm(20, 200, 10)/2
X5 <- rnorm(20, 200, 10)/10
X6 <- rnorm(20, 20, 10)
X7 <- rnorm(20, 20, 10)*2
X8 <- rnorm(20, 10, 10)*1.3
X9 <- runif(20, 10, 200)
Y <- X1*1.6 - X2*0.38 + X7*0.46 + X6 + X9
reg <- lm(Y ~ X1 + X2 + X3 + X4 +X5 )
summary(reg)
X1 <- rnorm(20, 200, 10)
X2 <- rnorm(20, 200, 10)
X3 <- rnorm(20, 200, 10)
X4 <- rnorm(20, 200, 10)
X5 <- rnorm(20, 200, 10)
X6 <- rnorm(20, 20, 10)
X7 <- runif(20, 10, 200)
Y <- X1*1.6 - X2*0.38 + X7*0.46 + X6 + X9
reg <- lm(Y ~ X1 + X2 + X3 + X4 +X5 )
summary(reg)
Y <- X1*1.6 + X2*0.38 + X7*0.46 + X6 + X9
reg <- lm(Y ~ X1 + X2 + X3 + X4 +X5 )
summary(reg)
X1 <- rnorm(20, 200, 10)
X2 <- rnorm(20, 200, 10)
X3 <- rnorm(20, 200, 10)
X4 <- rnorm(20, 200, 10)
X5 <- rnorm(20, 200, 10)
X6 <- rnorm(20, 20, 10)
X7 <- runif(20, 10, 200)
Y <- X1*1.6 + X2*0.38 + X3*0.46 + X6 + X9
reg <- lm(Y ~ X1 + X2 + X3 + X4 +X5 )
summary(reg)
setwd("D://ese335")
rmarkdown::render_site()
